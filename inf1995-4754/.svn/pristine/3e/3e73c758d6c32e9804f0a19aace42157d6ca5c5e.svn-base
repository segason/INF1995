GAS LISTING /tmp/ccPqrgEP.s 			page 1


   1               		.file	"main.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/usagers/alvux/Bureau/inf1995-4754/projet/",100,0,4,.Ltext0
   8               		.stabs	"main.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"short _Fract:t(0,23)=r(0,9);1;0;",128,0,0,0
  38               		.stabs	"long _Fract:t(0,24)=r(0,9);4;0;",128,0,0,0
  39               		.stabs	"long long _Fract:t(0,25)=r(0,9);8;0;",128,0,0,0
  40               		.stabs	"unsigned short _Fract:t(0,26)=r(0,9);1;0;",128,0,0,0
  41               		.stabs	"unsigned _Fract:t(0,27)=r(0,9);2;0;",128,0,0,0
  42               		.stabs	"unsigned long _Fract:t(0,28)=r(0,9);4;0;",128,0,0,0
  43               		.stabs	"unsigned long long _Fract:t(0,29)=r(0,9);8;0;",128,0,0,0
  44               		.stabs	"_Sat short _Fract:t(0,30)=r(0,9);1;0;",128,0,0,0
  45               		.stabs	"_Sat _Fract:t(0,31)=r(0,9);2;0;",128,0,0,0
  46               		.stabs	"_Sat long _Fract:t(0,32)=r(0,9);4;0;",128,0,0,0
  47               		.stabs	"_Sat long long _Fract:t(0,33)=r(0,9);8;0;",128,0,0,0
  48               		.stabs	"_Sat unsigned short _Fract:t(0,34)=r(0,9);1;0;",128,0,0,0
  49               		.stabs	"_Sat unsigned _Fract:t(0,35)=r(0,9);2;0;",128,0,0,0
  50               		.stabs	"_Sat unsigned long _Fract:t(0,36)=r(0,9);4;0;",128,0,0,0
  51               		.stabs	"_Sat unsigned long long _Fract:t(0,37)=r(0,9);8;0;",128,0,0,0
  52               		.stabs	"short _Accum:t(0,38)=r(0,9);2;0;",128,0,0,0
  53               		.stabs	"long _Accum:t(0,39)=r(0,9);8;0;",128,0,0,0
  54               		.stabs	"long long _Accum:t(0,40)=r(0,9);8;0;",128,0,0,0
  55               		.stabs	"unsigned short _Accum:t(0,41)=r(0,9);2;0;",128,0,0,0
  56               		.stabs	"unsigned _Accum:t(0,42)=r(0,9);4;0;",128,0,0,0
  57               		.stabs	"unsigned long _Accum:t(0,43)=r(0,9);8;0;",128,0,0,0
GAS LISTING /tmp/ccPqrgEP.s 			page 2


  58               		.stabs	"unsigned long long _Accum:t(0,44)=r(0,9);8;0;",128,0,0,0
  59               		.stabs	"_Sat short _Accum:t(0,45)=r(0,9);2;0;",128,0,0,0
  60               		.stabs	"_Sat _Accum:t(0,46)=r(0,9);4;0;",128,0,0,0
  61               		.stabs	"_Sat long _Accum:t(0,47)=r(0,9);8;0;",128,0,0,0
  62               		.stabs	"_Sat long long _Accum:t(0,48)=r(0,9);8;0;",128,0,0,0
  63               		.stabs	"_Sat unsigned short _Accum:t(0,49)=r(0,9);2;0;",128,0,0,0
  64               		.stabs	"_Sat unsigned _Accum:t(0,50)=r(0,9);4;0;",128,0,0,0
  65               		.stabs	"_Sat unsigned long _Accum:t(0,51)=r(0,9);8;0;",128,0,0,0
  66               		.stabs	"_Sat unsigned long long _Accum:t(0,52)=r(0,9);8;0;",128,0,0,0
  67               		.stabs	"void:t(0,4)",128,0,0,0
  68               		.stabs	"wchar_t:t(0,53)=r(0,53);-32768;32767;",128,0,0,0
  69               		.stabs	"bool:t(0,54)=@s8;-16;",128,0,0,0
  70               		.stabs	"__vtbl_ptr_type:t(0,55)=*(0,56)=f(0,9)",128,0,0,0
  71               		.stabs	"decltype(nullptr):t(0,57)=(0,57)",128,0,0,0
  72               		.stabs	"int8_t:t(0,58)=(0,16)",128,0,121,0
  73               		.stabs	"uint8_t:t(0,59)=(0,13)",128,0,122,0
  74               		.stabs	"int16_t:t(0,60)=(0,9)",128,0,123,0
  75               		.stabs	"uint16_t:t(0,61)=(0,12)",128,0,124,0
  76               		.stabs	"int32_t:t(0,62)=(0,15)",128,0,125,0
  77               		.stabs	"uint32_t:t(0,63)=(0,11)",128,0,126,0
  78               		.stabs	"int64_t:t(0,64)=(0,14)",128,0,128,0
  79               		.stabs	"uint64_t:t(0,65)=(0,10)",128,0,129,0
  80               		.stabs	"intptr_t:t(0,66)=(0,60)",128,0,142,0
  81               		.stabs	"uintptr_t:t(0,67)=(0,61)",128,0,147,0
  82               		.stabs	"int_least8_t:t(0,68)=(0,58)",128,0,159,0
  83               		.stabs	"uint_least8_t:t(0,69)=(0,59)",128,0,164,0
  84               		.stabs	"int_least16_t:t(0,70)=(0,60)",128,0,169,0
  85               		.stabs	"uint_least16_t:t(0,71)=(0,61)",128,0,174,0
  86               		.stabs	"int_least32_t:t(0,72)=(0,62)",128,0,179,0
  87               		.stabs	"uint_least32_t:t(0,73)=(0,63)",128,0,184,0
  88               		.stabs	"int_least64_t:t(0,74)=(0,64)",128,0,192,0
  89               		.stabs	"uint_least64_t:t(0,75)=(0,65)",128,0,199,0
  90               		.stabs	"int_fast8_t:t(0,76)=(0,58)",128,0,213,0
  91               		.stabs	"uint_fast8_t:t(0,77)=(0,59)",128,0,218,0
  92               		.stabs	"int_fast16_t:t(0,78)=(0,60)",128,0,223,0
  93               		.stabs	"uint_fast16_t:t(0,79)=(0,61)",128,0,228,0
  94               		.stabs	"int_fast32_t:t(0,80)=(0,62)",128,0,233,0
  95               		.stabs	"uint_fast32_t:t(0,81)=(0,63)",128,0,238,0
  96               		.stabs	"int_fast64_t:t(0,82)=(0,64)",128,0,246,0
  97               		.stabs	"uint_fast64_t:t(0,83)=(0,65)",128,0,253,0
  98               		.stabs	"intmax_t:t(0,84)=(0,64)",128,0,273,0
  99               		.stabs	"uintmax_t:t(0,85)=(0,65)",128,0,278,0
 100               		.stabs	"int_farptr_t:t(0,86)=(0,62)",128,0,77,0
 101               		.stabs	"uint_farptr_t:t(0,87)=(0,63)",128,0,81,0
 102               		.stabs	"._0:Tt(0,88)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
 103               		.stabs	"__fuse_t:t(0,88)",128,0,244,0
 104               		.stabs	"Memoire24CXXX:Tt(0,89)=s1m_adresse_peripherique:/0(0,59):_ZN13Memoire24CXXX22m_adresse_per
 105               		.stabs	"Del:Tt(0,98)=s1__base_ctor ::(0,99)=#(0,98),(0,4),(0,100)=*(0,98),(0,4);:_ZN3DelC2Ev;2A.;_
 106               		.stabs	"Moteur:Tt(0,102)=s1__base_ctor ::(0,103)=#(0,102),(0,4),(0,104)=*(0,102),(0,4);:_ZN6Moteur
 107               		.stabs	"can:Tt(0,105)=s1__base_ctor ::(0,106)=#(0,105),(0,4),(0,107)=*(0,105),(0,4);:_ZN3canC2Ev;2
 108               		.stabs	"Minuterie:Tt(0,109)=s4minuterieExpiree_:/0(0,110)=B(0,59),0,8;duree_:/0(0,61),8,16;boutonP
 109               		.stabs	"PwmSon:Tt(0,119)=s1__base_ctor ::(0,120)=#(0,119),(0,4),(0,121)=*(0,119),(0,4);:_ZN6PwmSon
 110               		.stabs	"Pwm:Tt(0,123)=s1__base_ctor ::(0,124)=#(0,123),(0,4),(0,125)=*(0,123),(0,4);:_ZN3PwmC2Ev;2
 111               		.stabs	"_Z18initialisationUARTv:F(0,4)",36,0,24,_Z18initialisationUARTv
 112               	.global	_Z18initialisationUARTv
 113               		.type	_Z18initialisationUARTv, @function
 114               	_Z18initialisationUARTv:
GAS LISTING /tmp/ccPqrgEP.s 			page 3


 115               		.stabd	46,0,0
   1:main.cpp      **** #include "Memoire24CXXX.h"
   2:main.cpp      **** #include "delControl.h" 
   3:main.cpp      **** #include "Moteur.h" 
   4:main.cpp      **** #include "can.h"
   5:main.cpp      **** #include "minuterie.h" 
   6:main.cpp      **** #include "Memoire24CXXX.h" 
   7:main.cpp      **** #include "PwmSon.h"
   8:main.cpp      **** #include "PWM.h"
   9:main.cpp      **** #include <avr/io.h>
  10:main.cpp      **** #include <avr/interrupt.h> 
  11:main.cpp      **** #define F_CPU 8000000
  12:main.cpp      **** #include <util/delay.h>
  13:main.cpp      **** using namespace std;
  14:main.cpp      ****     volatile bool bit1 = false, bit2 = false, bit3 = false, bit4 = false, bit5 = false;
  15:main.cpp      **** 
  16:main.cpp      **** /*Capteurs:
  17:main.cpp      **** PINC & 0b00010000   capteur_droit
  18:main.cpp      **** PINC & 0b00000001   capteur_gauche
  19:main.cpp      **** PINC & 0b00000010   centre capteur_gauche
  20:main.cpp      **** PINC & 0b00001000   centre droit
  21:main.cpp      **** PINC & 0b00000100   centre
  22:main.cpp      ****  
  23:main.cpp      ****  */
  24:main.cpp      **** void initialisationUART ( void ) {
 116               		.stabn	68,0,24,.LM0-.LFBB1
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
  25:main.cpp      **** 
  26:main.cpp      **** // 2400 bauds. Nous vous donnons la valeur des deux
  27:main.cpp      **** 
  28:main.cpp      **** // premier registres pour vous éviter des complications
  29:main.cpp      **** 
  30:main.cpp      **** UBRR0H = 0;
 123               		.stabn	68,0,30,.LM1-.LFBB1
 124               	.LM1:
 125 0000 1092 C500 		sts 197,__zero_reg__
  31:main.cpp      **** 
  32:main.cpp      **** UBRR0L = 0xCF;
 126               		.stabn	68,0,32,.LM2-.LFBB1
 127               	.LM2:
 128 0004 8FEC      		ldi r24,lo8(-49)
 129 0006 8093 C400 		sts 196,r24
  33:main.cpp      **** 
  34:main.cpp      **** // permettre la reception et la transmission par le UART0
  35:main.cpp      **** 
  36:main.cpp      **** UCSR0A = (1 << TXC0) | (1 << RXC0) ;
 130               		.stabn	68,0,36,.LM3-.LFBB1
 131               	.LM3:
 132 000a 80EC      		ldi r24,lo8(-64)
 133 000c 8093 C000 		sts 192,r24
  37:main.cpp      **** 
  38:main.cpp      **** UCSR0B =  (1 << RXEN0) | (1 << TXEN0) ; // L'émetteur USART est activé en réglant TXEN dans UCSR
GAS LISTING /tmp/ccPqrgEP.s 			page 4


 134               		.stabn	68,0,38,.LM4-.LFBB1
 135               	.LM4:
 136 0010 88E1      		ldi r24,lo8(24)
 137 0012 8093 C100 		sts 193,r24
  39:main.cpp      **** 
  40:main.cpp      **** // Format des trames: 8 bits, 1 stop bits, none parity
  41:main.cpp      **** 
  42:main.cpp      **** UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 138               		.stabn	68,0,42,.LM5-.LFBB1
 139               	.LM5:
 140 0016 86E0      		ldi r24,lo8(6)
 141 0018 8093 C200 		sts 194,r24
 142 001c 0895      		ret
 143               		.size	_Z18initialisationUARTv, .-_Z18initialisationUARTv
 144               	.Lscope1:
 145               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 146               		.stabd	78,0,0
 147               		.stabs	"_Z22transmissionUARTVersPch:F(0,4)",36,0,46,_Z22transmissionUARTVersPch
 148               		.stabs	"donnee:P(0,59)",64,0,46,24
 149               	.global	_Z22transmissionUARTVersPch
 150               		.type	_Z22transmissionUARTVersPch, @function
 151               	_Z22transmissionUARTVersPch:
 152               		.stabd	46,0,0
  43:main.cpp      **** 
  44:main.cpp      **** }
  45:main.cpp      **** 
  46:main.cpp      **** void transmissionUARTVersPc ( uint8_t donnee ) {
 153               		.stabn	68,0,46,.LM6-.LFBB2
 154               	.LM6:
 155               	.LFBB2:
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
 160               	.L3:
  47:main.cpp      **** 
  48:main.cpp      **** 	while (!( UCSR0A & (1<<UDRE0))) //Attendre que le tampon soient libre. 
 161               		.stabn	68,0,48,.LM7-.LFBB2
 162               	.LM7:
 163 001e 9091 C000 		lds r25,192
 164 0022 95FF      		sbrs r25,5
 165 0024 00C0      		rjmp .L3
  49:main.cpp      **** 	{
  50:main.cpp      **** 	}
  51:main.cpp      ****                
  52:main.cpp      ****     	UDR0 = donnee; 
 166               		.stabn	68,0,52,.LM8-.LFBB2
 167               	.LM8:
 168 0026 8093 C600 		sts 198,r24
 169 002a 0895      		ret
 170               		.size	_Z22transmissionUARTVersPch, .-_Z22transmissionUARTVersPch
 171               	.Lscope2:
 172               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 173               		.stabd	78,0,0
 174               		.stabs	"_Z13lireDirectionv:F(0,4)",36,0,54,_Z13lireDirectionv
 175               	.global	_Z13lireDirectionv
 176               		.type	_Z13lireDirectionv, @function
GAS LISTING /tmp/ccPqrgEP.s 			page 5


 177               	_Z13lireDirectionv:
 178               		.stabd	46,0,0
  53:main.cpp      **** }
  54:main.cpp      **** void lireDirection()
  55:main.cpp      **** {
 179               		.stabn	68,0,55,.LM9-.LFBB3
 180               	.LM9:
 181               	.LFBB3:
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
  56:main.cpp      ****         bit1 = PINC & 0b00000001;
 186               		.stabn	68,0,56,.LM10-.LFBB3
 187               	.LM10:
 188 002c 86B1      		in r24,0x6
 189 002e 8170      		andi r24,lo8(1)
 190 0030 8093 0000 		sts bit1,r24
  57:main.cpp      ****         bit2 = PINC & 0b00000010;
 191               		.stabn	68,0,57,.LM11-.LFBB3
 192               	.LM11:
 193 0034 86B1      		in r24,0x6
 194 0036 8695      		lsr r24
 195 0038 8170      		andi r24,1
 196 003a 8093 0000 		sts bit2,r24
  58:main.cpp      ****         bit3 = PINC & 0b00000100;
 197               		.stabn	68,0,58,.LM12-.LFBB3
 198               	.LM12:
 199 003e 86B1      		in r24,0x6
 200 0040 82FB      		bst r24,2
 201 0042 8827      		clr r24
 202 0044 80F9      		bld r24,0
 203 0046 8093 0000 		sts bit3,r24
  59:main.cpp      ****         bit4 = PINC & 0b00001000;
 204               		.stabn	68,0,59,.LM13-.LFBB3
 205               	.LM13:
 206 004a 86B1      		in r24,0x6
 207 004c 83FB      		bst r24,3
 208 004e 8827      		clr r24
 209 0050 80F9      		bld r24,0
 210 0052 8093 0000 		sts bit4,r24
  60:main.cpp      ****         bit5 = PINC & 0b00010000;
 211               		.stabn	68,0,60,.LM14-.LFBB3
 212               	.LM14:
 213 0056 86B1      		in r24,0x6
 214 0058 8295      		swap r24
 215 005a 8170      		andi r24,1
 216 005c 8093 0000 		sts bit5,r24
 217 0060 0895      		ret
 218               		.size	_Z13lireDirectionv, .-_Z13lireDirectionv
 219               	.Lscope3:
 220               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 221               		.stabd	78,0,0
 222               		.section	.text.startup,"ax",@progbits
 223               		.stabs	"main:F(0,9)",36,0,63,main
 224               	.global	main
 225               		.type	main, @function
GAS LISTING /tmp/ccPqrgEP.s 			page 6


 226               	main:
 227               		.stabd	46,0,0
  61:main.cpp      **** }
  62:main.cpp      **** //!(x^y) 00011111   00011111 & 0x01  0z02 (stuff de godalol)
  63:main.cpp      **** int main()
  64:main.cpp      **** {
 228               		.stabn	68,0,64,.LM15-.LFBB4
 229               	.LM15:
 230               	.LFBB4:
 231 0000 EF92      		push r14
 232 0002 FF92      		push r15
 233 0004 1F93      		push r17
 234 0006 CF93      		push r28
 235 0008 DF93      		push r29
 236 000a 00D0      		rcall .
 237 000c 00D0      		rcall .
 238 000e 00D0      		rcall .
 239 0010 CDB7      		in r28,__SP_L__
 240 0012 DEB7      		in r29,__SP_H__
 241               	/* prologue: function */
 242               	/* frame size = 6 */
 243               	/* stack size = 11 */
 244               	.L__stack_usage = 11
 245               	.LBB30:
  65:main.cpp      ****     
  66:main.cpp      ****     DDRD = 0b11110000;
 246               		.stabn	68,0,66,.LM16-.LFBB4
 247               	.LM16:
 248 0014 80EF      		ldi r24,lo8(-16)
 249 0016 8AB9      		out 0xa,r24
  67:main.cpp      ****     DDRC = 0x00;
 250               		.stabn	68,0,67,.LM17-.LFBB4
 251               	.LM17:
 252 0018 17B8      		out 0x7,__zero_reg__
  68:main.cpp      ****     DDRA = 0x0F;
 253               		.stabn	68,0,68,.LM18-.LFBB4
 254               	.LM18:
 255 001a 8FE0      		ldi r24,lo8(15)
 256 001c 81B9      		out 0x1,r24
  69:main.cpp      ****     Del del;
 257               		.stabn	68,0,69,.LM19-.LFBB4
 258               	.LM19:
 259 001e CE01      		movw r24,r28
 260 0020 0696      		adiw r24,6
 261 0022 0E94 0000 		call _ZN3DelC1Ev
  70:main.cpp      ****     Pwm moteur;
 262               		.stabn	68,0,70,.LM20-.LFBB4
 263               	.LM20:
 264 0026 CE01      		movw r24,r28
 265 0028 0596      		adiw r24,5
 266 002a 0E94 0000 		call _ZN3PwmC1Ev
  71:main.cpp      ****     can intensite;
 267               		.stabn	68,0,71,.LM21-.LFBB4
 268               	.LM21:
 269 002e CE01      		movw r24,r28
 270 0030 0496      		adiw r24,4
 271 0032 0E94 0000 		call _ZN3canC1Ev
GAS LISTING /tmp/ccPqrgEP.s 			page 7


  72:main.cpp      ****     uint8_t rapport;
  73:main.cpp      ****     //bool aTourneAGauche = false;
  74:main.cpp      ****     //bool aTourneADroite = false;
  75:main.cpp      ****     bool passeDansLeTunel = false;
  76:main.cpp      ****     bool estSortiDuTunel = false;
  77:main.cpp      ****     initialisationUART();
 272               		.stabn	68,0,77,.LM22-.LFBB4
 273               	.LM22:
 274 0036 0E94 0000 		call _Z18initialisationUARTv
  78:main.cpp      ****     
  79:main.cpp      **** ///////////// BOUTONS DE DIRECTION ///////////////
  80:main.cpp      ****     char directions[3] = {};
 275               		.stabn	68,0,80,.LM23-.LFBB4
 276               	.LM23:
 277 003a 1982      		std Y+1,__zero_reg__
 278 003c 1A82      		std Y+2,__zero_reg__
 279 003e 1B82      		std Y+3,__zero_reg__
  81:main.cpp      ****     uint8_t compteur = 0;
  82:main.cpp      ****     bool enfonceDroit = false;
  83:main.cpp      ****     bool enfonceGauche = false;
  84:main.cpp      ****     DDRB = 0b11111100;
 280               		.stabn	68,0,84,.LM24-.LFBB4
 281               	.LM24:
 282 0040 8CEF      		ldi r24,lo8(-4)
 283 0042 84B9      		out 0x4,r24
  83:main.cpp      ****     DDRB = 0b11111100;
 284               		.stabn	68,0,83,.LM25-.LFBB4
 285               	.LM25:
 286 0044 20E0      		ldi r18,0
  82:main.cpp      ****     bool enfonceGauche = false;
 287               		.stabn	68,0,82,.LM26-.LFBB4
 288               	.LM26:
 289 0046 90E0      		ldi r25,0
  81:main.cpp      ****     uint8_t compteur = 0;
 290               		.stabn	68,0,81,.LM27-.LFBB4
 291               	.LM27:
 292 0048 80E0      		ldi r24,0
  85:main.cpp      ****     
  86:main.cpp      **** 	while (compteur<3) {
  87:main.cpp      **** 	
  88:main.cpp      **** 		
  89:main.cpp      **** 			if (!(PINB & 0x01)) { 	//bouton droit
  90:main.cpp      **** 				_delay_ms(10);
  91:main.cpp      **** 				if(!(PINB & 0x01)){
  92:main.cpp      **** 					enfonceDroit = true;
  93:main.cpp      ****                                         PORTA = 0b1000;
  94:main.cpp      **** 					_delay_ms(10);
  95:main.cpp      **** 				}
  96:main.cpp      **** 			}
  97:main.cpp      **** 			else
  98:main.cpp      **** 				if(enfonceDroit){
  99:main.cpp      **** 					enfonceDroit = false;
 100:main.cpp      ****                                         PORTA = 0x00;
 101:main.cpp      **** 					directions[compteur] = 'g';
 293               		.stabn	68,0,101,.LM28-.LFBB4
 294               	.LM28:
 295 004a 37E6      		ldi r19,lo8(103)
GAS LISTING /tmp/ccPqrgEP.s 			page 8


  93:main.cpp      **** 					_delay_ms(10);
 296               		.stabn	68,0,93,.LM29-.LFBB4
 297               	.LM29:
 298 004c 48E0      		ldi r20,lo8(8)
 102:main.cpp      **** 					compteur++;
 103:main.cpp      **** 				}
 104:main.cpp      **** 				
 105:main.cpp      **** 			if (!(PINB & 0x02)) { 		//bouton gauche
 106:main.cpp      **** 				_delay_ms(10);
 107:main.cpp      **** 				if(!(PINB & 0x02)){
 108:main.cpp      **** 					enfonceGauche = true;
 109:main.cpp      ****                                          PORTA = 0b0100;
 110:main.cpp      **** 					_delay_ms(10);
 111:main.cpp      **** 				}
 112:main.cpp      **** 			}
 113:main.cpp      **** 			else
 114:main.cpp      **** 				if(enfonceGauche){
 115:main.cpp      **** 					enfonceGauche = false;
 116:main.cpp      ****                                         PORTA = 0x00;
 117:main.cpp      **** 					directions[compteur] = 'd';
 299               		.stabn	68,0,117,.LM30-.LFBB4
 300               	.LM30:
 301 004e 54E6      		ldi r21,lo8(100)
 109:main.cpp      **** 					_delay_ms(10);
 302               		.stabn	68,0,109,.LM31-.LFBB4
 303               	.LM31:
 304 0050 64E0      		ldi r22,lo8(4)
 305               	.L13:
  89:main.cpp      **** 				_delay_ms(10);
 306               		.stabn	68,0,89,.LM32-.LFBB4
 307               	.LM32:
 308 0052 1899      		sbic 0x3,0
 309 0054 00C0      		rjmp .L9
 310               	.LBB31:
 311               	.LBB32:
 312               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext1
 313               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
GAS LISTING /tmp/ccPqrgEP.s 			page 9


  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
GAS LISTING /tmp/ccPqrgEP.s 			page 10


  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
GAS LISTING /tmp/ccPqrgEP.s 			page 11


 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/avr/include/util/delay.h **** 
 156:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/avr/include/util/delay.h **** 
 159:/usr/avr/include/util/delay.h **** 	#else
 160:/usr/avr/include/util/delay.h **** 		//round up by default
 161:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/avr/include/util/delay.h **** 	#endif
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 314               		.stabn	68,0,164,.LM33-.LFBB4
 315               	.LM33:
 316 0056 EFE1      		ldi r30,lo8(19999)
 317 0058 FEE4      		ldi r31,hi8(19999)
 318 005a 3197      		1: sbiw r30,1
 319 005c 01F4      		brne 1b
 320 005e 00C0      		rjmp .
 321 0060 0000      		nop
 322               	.LBE32:
 323               	.LBE31:
 324               		.stabs	"main.cpp",132,0,0,.Ltext2
 325               	.Ltext2:
  91:main.cpp      **** 					enfonceDroit = true;
 326               		.stabn	68,0,91,.LM34-.LFBB4
 327               	.LM34:
 328 0062 1899      		sbic 0x3,0
 329 0064 00C0      		rjmp .L10
  93:main.cpp      **** 					_delay_ms(10);
 330               		.stabn	68,0,93,.LM35-.LFBB4
 331               	.LM35:
 332 0066 42B9      		out 0x2,r20
 333               	.LBB33:
 334               	.LBB34:
 335               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext3
 336               	.Ltext3:
 337               		.stabn	68,0,164,.LM36-.LFBB4
 338               	.LM36:
GAS LISTING /tmp/ccPqrgEP.s 			page 12


 339 0068 EFE1      		ldi r30,lo8(19999)
 340 006a FEE4      		ldi r31,hi8(19999)
 341 006c 3197      		1: sbiw r30,1
 342 006e 01F4      		brne 1b
 343 0070 00C0      		rjmp .
 344 0072 0000      		nop
 345               	.LBE34:
 346               	.LBE33:
 347               		.stabs	"main.cpp",132,0,0,.Ltext4
 348               	.Ltext4:
  92:main.cpp      ****                                         PORTA = 0b1000;
 349               		.stabn	68,0,92,.LM37-.LFBB4
 350               	.LM37:
 351 0074 91E0      		ldi r25,lo8(1)
 352 0076 00C0      		rjmp .L10
 353               	.L9:
  98:main.cpp      **** 					enfonceDroit = false;
 354               		.stabn	68,0,98,.LM38-.LFBB4
 355               	.LM38:
 356 0078 9923      		tst r25
 357 007a 01F0      		breq .L10
 100:main.cpp      **** 					directions[compteur] = 'g';
 358               		.stabn	68,0,100,.LM39-.LFBB4
 359               	.LM39:
 360 007c 12B8      		out 0x2,__zero_reg__
 101:main.cpp      **** 					compteur++;
 361               		.stabn	68,0,101,.LM40-.LFBB4
 362               	.LM40:
 363 007e E1E0      		ldi r30,lo8(1)
 364 0080 F0E0      		ldi r31,0
 365 0082 EC0F      		add r30,r28
 366 0084 FD1F      		adc r31,r29
 367 0086 E80F      		add r30,r24
 368 0088 F11D      		adc r31,__zero_reg__
 369 008a 3083      		st Z,r19
 102:main.cpp      **** 				}
 370               		.stabn	68,0,102,.LM41-.LFBB4
 371               	.LM41:
 372 008c 8F5F      		subi r24,lo8(-(1))
  99:main.cpp      ****                                         PORTA = 0x00;
 373               		.stabn	68,0,99,.LM42-.LFBB4
 374               	.LM42:
 375 008e 90E0      		ldi r25,0
 376               	.L10:
 105:main.cpp      **** 				_delay_ms(10);
 377               		.stabn	68,0,105,.LM43-.LFBB4
 378               	.LM43:
 379 0090 1999      		sbic 0x3,1
 380 0092 00C0      		rjmp .L11
 381               	.LBB35:
 382               	.LBB36:
 383               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext5
 384               	.Ltext5:
 385               		.stabn	68,0,164,.LM44-.LFBB4
 386               	.LM44:
 387 0094 EFE1      		ldi r30,lo8(19999)
 388 0096 FEE4      		ldi r31,hi8(19999)
GAS LISTING /tmp/ccPqrgEP.s 			page 13


 389 0098 3197      		1: sbiw r30,1
 390 009a 01F4      		brne 1b
 391 009c 00C0      		rjmp .
 392 009e 0000      		nop
 393               	.LBE36:
 394               	.LBE35:
 395               		.stabs	"main.cpp",132,0,0,.Ltext6
 396               	.Ltext6:
 107:main.cpp      **** 					enfonceGauche = true;
 397               		.stabn	68,0,107,.LM45-.LFBB4
 398               	.LM45:
 399 00a0 1999      		sbic 0x3,1
 400 00a2 00C0      		rjmp .L12
 109:main.cpp      **** 					_delay_ms(10);
 401               		.stabn	68,0,109,.LM46-.LFBB4
 402               	.LM46:
 403 00a4 62B9      		out 0x2,r22
 404               	.LBB37:
 405               	.LBB38:
 406               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext7
 407               	.Ltext7:
 408               		.stabn	68,0,164,.LM47-.LFBB4
 409               	.LM47:
 410 00a6 EFE1      		ldi r30,lo8(19999)
 411 00a8 FEE4      		ldi r31,hi8(19999)
 412 00aa 3197      		1: sbiw r30,1
 413 00ac 01F4      		brne 1b
 414 00ae 00C0      		rjmp .
 415 00b0 0000      		nop
 416               	.LBE38:
 417               	.LBE37:
 418               		.stabs	"main.cpp",132,0,0,.Ltext8
 419               	.Ltext8:
 108:main.cpp      ****                                          PORTA = 0b0100;
 420               		.stabn	68,0,108,.LM48-.LFBB4
 421               	.LM48:
 422 00b2 21E0      		ldi r18,lo8(1)
 423 00b4 00C0      		rjmp .L12
 424               	.L11:
 114:main.cpp      **** 					enfonceGauche = false;
 425               		.stabn	68,0,114,.LM49-.LFBB4
 426               	.LM49:
 427 00b6 2223      		tst r18
 428 00b8 01F0      		breq .L12
 116:main.cpp      **** 					directions[compteur] = 'd';
 429               		.stabn	68,0,116,.LM50-.LFBB4
 430               	.LM50:
 431 00ba 12B8      		out 0x2,__zero_reg__
 432               		.stabn	68,0,117,.LM51-.LFBB4
 433               	.LM51:
 434 00bc E1E0      		ldi r30,lo8(1)
 435 00be F0E0      		ldi r31,0
 436 00c0 EC0F      		add r30,r28
 437 00c2 FD1F      		adc r31,r29
 438 00c4 E80F      		add r30,r24
 439 00c6 F11D      		adc r31,__zero_reg__
 440 00c8 5083      		st Z,r21
GAS LISTING /tmp/ccPqrgEP.s 			page 14


 118:main.cpp      **** 					compteur++;
 441               		.stabn	68,0,118,.LM52-.LFBB4
 442               	.LM52:
 443 00ca 8F5F      		subi r24,lo8(-(1))
 115:main.cpp      ****                                         PORTA = 0x00;
 444               		.stabn	68,0,115,.LM53-.LFBB4
 445               	.LM53:
 446 00cc 20E0      		ldi r18,0
 447               	.L12:
  86:main.cpp      **** 	
 448               		.stabn	68,0,86,.LM54-.LFBB4
 449               	.LM54:
 450 00ce 8330      		cpi r24,lo8(3)
 451 00d0 00F4      		brsh .+2
 452 00d2 00C0      		rjmp .L13
 453 00d4 10E0      		ldi r17,0
 454               	.L14:
 119:main.cpp      **** 				}
 120:main.cpp      **** 				
 121:main.cpp      ****         }
 122:main.cpp      **** 
 123:main.cpp      **** 	
 124:main.cpp      **** 		
 125:main.cpp      **** 	
 126:main.cpp      **** ////////////// FIN DE DETECTION DE BOUTONS /////////////////////
 127:main.cpp      ****  
 128:main.cpp      ****  
 129:main.cpp      ****  
 130:main.cpp      ****     compteur = 0;
 131:main.cpp      ****     while (true)
 132:main.cpp      ****     {
 133:main.cpp      ****         ////////////////// SOYA GIRL SUPER ADDONS ///////////////////////////
 134:main.cpp      ****         rapport = intensite.lecture(6) >> 2;  /////////////////////////////////////// LIRE SUR LE B
 455               		.stabn	68,0,134,.LM55-.LFBB4
 456               	.LM55:
 457 00d6 66E0      		ldi r22,lo8(6)
 458 00d8 CE01      		movw r24,r28
 459 00da 0496      		adiw r24,4
 460 00dc 0E94 0000 		call _ZN3can7lectureEh
 461 00e0 7C01      		movw r14,r24
 135:main.cpp      ****         lireDirection();
 462               		.stabn	68,0,135,.LM56-.LFBB4
 463               	.LM56:
 464 00e2 0E94 0000 		call _Z13lireDirectionv
 134:main.cpp      ****         lireDirection();
 465               		.stabn	68,0,134,.LM57-.LFBB4
 466               	.LM57:
 467 00e6 C701      		movw r24,r14
 468 00e8 9695      		lsr r25
 469 00ea 8795      		ror r24
 470 00ec 9695      		lsr r25
 471 00ee 8795      		ror r24
 136:main.cpp      ****         transmissionUARTVersPc(rapport);
 472               		.stabn	68,0,136,.LM58-.LFBB4
 473               	.LM58:
 474 00f0 0E94 0000 		call _Z22transmissionUARTVersPch
 137:main.cpp      ****     
GAS LISTING /tmp/ccPqrgEP.s 			page 15


 138:main.cpp      ****        
 139:main.cpp      ****         
 140:main.cpp      ****       /*  if(rapport < 80 && !estSortiDuTunel)
 141:main.cpp      ****         {
 142:main.cpp      ****             passeDansLeTunel = true;
 143:main.cpp      ****             PORTA = 0b1100;
 144:main.cpp      ****         }
 145:main.cpp      ****         else if(rapport >= 80 && passeDansLeTunel)
 146:main.cpp      ****         {
 147:main.cpp      ****             passeDansLeTunel = false;
 148:main.cpp      ****             estSortiDuTunel = true;
 149:main.cpp      ****             PORTA = 0x00;
 150:main.cpp      ****         }
 151:main.cpp      ****         if(estSortiDuTunel) //En gros on fait une intersection fancy
 152:main.cpp      ****         {
 153:main.cpp      ****             _delay_ms(100); //Pour pas qu'il detecte trop tot et qu'il tourne dans le mur.
 154:main.cpp      ****             
 155:main.cpp      ****             if(compteur >= 3)// Comme ça si l'arrêt est à la sorti du tunnel bein c'est ça
 156:main.cpp      ****             {
 157:main.cpp      ****                 moteur.Avance(0);
 158:main.cpp      ****                 return 0;
 159:main.cpp      ****             }    
 160:main.cpp      ****             else if (directions[compteur] == 'd')
 161:main.cpp      ****             {
 162:main.cpp      ****                 moteur.pivotDroit(150);
 163:main.cpp      ****                 _delay_ms(250);
 164:main.cpp      ****                // moteur.Avance(120);
 165:main.cpp      ****                 while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 166:main.cpp      ****                 {
 167:main.cpp      ****                     lireDirection();
 168:main.cpp      ****                     moteur.Tourner_Gauche(170);
 169:main.cpp      ****                 }
 170:main.cpp      **** 					
 171:main.cpp      **** 		//_delay_ms(300);
 172:main.cpp      **** 		//moteur.Tourner_Gauche(150);
 173:main.cpp      **** 		//_delay_ms(200);
 174:main.cpp      ****             }
 175:main.cpp      ****             else if (directions[compteur] == 'g')
 176:main.cpp      ****             {
 177:main.cpp      **** 		moteur.pivotGauche(150);
 178:main.cpp      **** 		_delay_ms(250);
 179:main.cpp      **** 		//moteur.Avance(120);
 180:main.cpp      **** 		while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 181:main.cpp      **** 		{
 182:main.cpp      ****                     lireDirection();
 183:main.cpp      ****                     moteur.Tourner_Gauche(170);
 184:main.cpp      **** 		}		
 185:main.cpp      **** 		//_delay_ms(300);
 186:main.cpp      **** 		//moteur.Tourner_Gauche(150);
 187:main.cpp      **** 		//_delay_ms(200);
 188:main.cpp      ****             }
 189:main.cpp      **** 				
 190:main.cpp      **** 		
 191:main.cpp      ****             compteur++;
 192:main.cpp      ****         }
 193:main.cpp      ****         */
 194:main.cpp      ****         /////////////////// FIN DES AJOUTS EXCITANTS ///////////////////////////
GAS LISTING /tmp/ccPqrgEP.s 			page 16


 195:main.cpp      ****         
 196:main.cpp      ****         if(bit1 && !(bit2 && bit3 && bit4 && bit5)) //sensor gauche
 475               		.stabn	68,0,196,.LM59-.LFBB4
 476               	.LM59:
 477 00f4 8091 0000 		lds r24,bit1
 478 00f8 8823      		tst r24
 479 00fa 01F0      		breq .L15
 480               		.stabn	68,0,196,.LM60-.LFBB4
 481               	.LM60:
 482 00fc 8091 0000 		lds r24,bit2
 483 0100 8823      		tst r24
 484 0102 01F0      		breq .L16
 485               		.stabn	68,0,196,.LM61-.LFBB4
 486               	.LM61:
 487 0104 8091 0000 		lds r24,bit3
 488 0108 8823      		tst r24
 489 010a 01F0      		breq .L16
 490               		.stabn	68,0,196,.LM62-.LFBB4
 491               	.LM62:
 492 010c 8091 0000 		lds r24,bit4
 493 0110 8823      		tst r24
 494 0112 01F0      		breq .L16
 495               		.stabn	68,0,196,.LM63-.LFBB4
 496               	.LM63:
 497 0114 8091 0000 		lds r24,bit5
 498 0118 8111      		cpse r24,__zero_reg__
 499 011a 00C0      		rjmp .L15
 500               	.L16:
 197:main.cpp      ****         {
 198:main.cpp      ****             moteur.pivotGauche(130);
 501               		.stabn	68,0,198,.LM64-.LFBB4
 502               	.LM64:
 503 011c 62E8      		ldi r22,lo8(-126)
 504 011e 70E0      		ldi r23,0
 505 0120 CE01      		movw r24,r28
 506 0122 0596      		adiw r24,5
 507 0124 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 508 0128 00C0      		rjmp .L14
 509               	.L15:
 199:main.cpp      ****           
 200:main.cpp      ****             
 201:main.cpp      ****         }
 202:main.cpp      ****         else if(bit1 && bit2 && bit3 && bit4 && bit5)
 510               		.stabn	68,0,202,.LM65-.LFBB4
 511               	.LM65:
 512 012a 8091 0000 		lds r24,bit1
 513 012e 8823      		tst r24
 514 0130 01F0      		breq .L17
 515               		.stabn	68,0,202,.LM66-.LFBB4
 516               	.LM66:
 517 0132 8091 0000 		lds r24,bit2
 518 0136 8823      		tst r24
 519 0138 01F0      		breq .L17
 520               		.stabn	68,0,202,.LM67-.LFBB4
 521               	.LM67:
 522 013a 8091 0000 		lds r24,bit3
 523 013e 8823      		tst r24
GAS LISTING /tmp/ccPqrgEP.s 			page 17


 524 0140 01F0      		breq .L17
 525               		.stabn	68,0,202,.LM68-.LFBB4
 526               	.LM68:
 527 0142 8091 0000 		lds r24,bit4
 528 0146 8823      		tst r24
 529 0148 01F0      		breq .L17
 530               		.stabn	68,0,202,.LM69-.LFBB4
 531               	.LM69:
 532 014a 8091 0000 		lds r24,bit5
 533 014e 8111      		cpse r24,__zero_reg__
 534 0150 00C0      		rjmp .L18
 535               	.L17:
 203:main.cpp      ****         {
 204:main.cpp      ****             if(compteur >= 3)
 205:main.cpp      ****             {
 206:main.cpp      ****                 moteur.Avance(0);
 207:main.cpp      ****                 return 0;
 208:main.cpp      ****             }
 209:main.cpp      ****             else
 210:main.cpp      ****                 moteur.Avance(120);
 211:main.cpp      ****         }
 212:main.cpp      ****         else if(bit1 && bit2 && !(bit3 && bit4 && bit5)) //sensor gauche et Mgauche
 536               		.stabn	68,0,212,.LM70-.LFBB4
 537               	.LM70:
 538 0152 8091 0000 		lds r24,bit1
 539 0156 8823      		tst r24
 540 0158 01F0      		breq .L20
 541               		.stabn	68,0,212,.LM71-.LFBB4
 542               	.LM71:
 543 015a 8091 0000 		lds r24,bit2
 544 015e 8823      		tst r24
 545 0160 01F0      		breq .L20
 546               		.stabn	68,0,212,.LM72-.LFBB4
 547               	.LM72:
 548 0162 8091 0000 		lds r24,bit3
 549 0166 8823      		tst r24
 550 0168 01F0      		breq .L23
 551               		.stabn	68,0,212,.LM73-.LFBB4
 552               	.LM73:
 553 016a 8091 0000 		lds r24,bit4
 554 016e 8823      		tst r24
 555 0170 01F0      		breq .L23
 556               		.stabn	68,0,212,.LM74-.LFBB4
 557               	.LM74:
 558 0172 8091 0000 		lds r24,bit5
 559 0176 8111      		cpse r24,__zero_reg__
 560 0178 00C0      		rjmp .L20
 561 017a 00C0      		rjmp .L23
 562               	.L18:
 204:main.cpp      ****             {
 563               		.stabn	68,0,204,.LM75-.LFBB4
 564               	.LM75:
 565 017c 1330      		cpi r17,lo8(3)
 566 017e 00F4      		brsh .+2
 567 0180 00C0      		rjmp .L191
 568 0182 00C0      		rjmp .L204
 569               	.L20:
GAS LISTING /tmp/ccPqrgEP.s 			page 18


 213:main.cpp      ****         {
 214:main.cpp      ****             moteur.Tourner_Gauche(120);
 215:main.cpp      ****         }
 216:main.cpp      ****         else if(!bit1 && bit2 && !(bit3 && bit4 && bit5)) //sensor Mgauche
 570               		.stabn	68,0,216,.LM76-.LFBB4
 571               	.LM76:
 572 0184 8091 0000 		lds r24,bit1
 573 0188 8111      		cpse r24,__zero_reg__
 574 018a 00C0      		rjmp .L22
 575               		.stabn	68,0,216,.LM77-.LFBB4
 576               	.LM77:
 577 018c 8091 0000 		lds r24,bit2
 578 0190 8823      		tst r24
 579 0192 01F0      		breq .L22
 580               		.stabn	68,0,216,.LM78-.LFBB4
 581               	.LM78:
 582 0194 8091 0000 		lds r24,bit3
 583 0198 8823      		tst r24
 584 019a 01F0      		breq .L23
 585               		.stabn	68,0,216,.LM79-.LFBB4
 586               	.LM79:
 587 019c 8091 0000 		lds r24,bit4
 588 01a0 8823      		tst r24
 589 01a2 01F0      		breq .L23
 590               		.stabn	68,0,216,.LM80-.LFBB4
 591               	.LM80:
 592 01a4 8091 0000 		lds r24,bit5
 593 01a8 8111      		cpse r24,__zero_reg__
 594 01aa 00C0      		rjmp .L22
 595               	.L23:
 217:main.cpp      ****         {
 218:main.cpp      ****             moteur.Tourner_Gauche(120);
 596               		.stabn	68,0,218,.LM81-.LFBB4
 597               	.LM81:
 598 01ac 68E7      		ldi r22,lo8(120)
 599 01ae 70E0      		ldi r23,0
 600 01b0 CE01      		movw r24,r28
 601 01b2 0596      		adiw r24,5
 602 01b4 0E94 0000 		call _ZN3Pwm14Tourner_GaucheEj
 603 01b8 00C0      		rjmp .L14
 604               	.L22:
 219:main.cpp      ****         }
 220:main.cpp      ****         else if(!(bit1) && !(bit2) && bit3 && bit4 && bit5)
 605               		.stabn	68,0,220,.LM82-.LFBB4
 606               	.LM82:
 607 01ba 8091 0000 		lds r24,bit1
 608 01be 8111      		cpse r24,__zero_reg__
 609 01c0 00C0      		rjmp .L24
 610               		.stabn	68,0,220,.LM83-.LFBB4
 611               	.LM83:
 612 01c2 8091 0000 		lds r24,bit2
 613 01c6 8111      		cpse r24,__zero_reg__
 614 01c8 00C0      		rjmp .L24
 615               		.stabn	68,0,220,.LM84-.LFBB4
 616               	.LM84:
 617 01ca 8091 0000 		lds r24,bit3
 618 01ce 8823      		tst r24
GAS LISTING /tmp/ccPqrgEP.s 			page 19


 619 01d0 01F0      		breq .L24
 620               		.stabn	68,0,220,.LM85-.LFBB4
 621               	.LM85:
 622 01d2 8091 0000 		lds r24,bit4
 623 01d6 8823      		tst r24
 624 01d8 01F0      		breq .L24
 625               		.stabn	68,0,220,.LM86-.LFBB4
 626               	.LM86:
 627 01da 8091 0000 		lds r24,bit5
 628 01de 8823      		tst r24
 629 01e0 01F0      		breq .L24
 221:main.cpp      ****         {
 222:main.cpp      ****             moteur.pivotDroit(120);
 630               		.stabn	68,0,222,.LM87-.LFBB4
 631               	.LM87:
 632 01e2 68E7      		ldi r22,lo8(120)
 633 01e4 70E0      		ldi r23,0
 634 01e6 CE01      		movw r24,r28
 635 01e8 0596      		adiw r24,5
 636 01ea 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 637               	.LBB39:
 638               	.LBB40:
 639               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext9
 640               	.Ltext9:
 641               		.stabn	68,0,164,.LM88-.LFBB4
 642               	.LM88:
 643 01ee 2FEF      		ldi r18,lo8(479999)
 644 01f0 82E5      		ldi r24,hi8(479999)
 645 01f2 97E0      		ldi r25,hlo8(479999)
 646 01f4 2150      		1: subi r18,1
 647 01f6 8040      		sbci r24,0
 648 01f8 9040      		sbci r25,0
 649 01fa 01F4      		brne 1b
 650 01fc 00C0      		rjmp .L203
 651               	.L24:
 652               	.LBE40:
 653               	.LBE39:
 654               		.stabs	"main.cpp",132,0,0,.Ltext10
 655               	.Ltext10:
 223:main.cpp      ****             _delay_ms(300);
 224:main.cpp      ****         }
 225:main.cpp      ****         else if(bit1 && bit2 && bit3 && !(bit4) && !(bit5))
 656               		.stabn	68,0,225,.LM89-.LFBB4
 657               	.LM89:
 658 01fe 8091 0000 		lds r24,bit1
 659 0202 8823      		tst r24
 660 0204 01F0      		breq .L26
 661               		.stabn	68,0,225,.LM90-.LFBB4
 662               	.LM90:
 663 0206 8091 0000 		lds r24,bit2
 664 020a 8823      		tst r24
 665 020c 01F0      		breq .L26
 666               		.stabn	68,0,225,.LM91-.LFBB4
 667               	.LM91:
 668 020e 8091 0000 		lds r24,bit3
 669 0212 8823      		tst r24
 670 0214 01F0      		breq .L26
GAS LISTING /tmp/ccPqrgEP.s 			page 20


 671               		.stabn	68,0,225,.LM92-.LFBB4
 672               	.LM92:
 673 0216 8091 0000 		lds r24,bit4
 674 021a 8111      		cpse r24,__zero_reg__
 675 021c 00C0      		rjmp .L26
 676               		.stabn	68,0,225,.LM93-.LFBB4
 677               	.LM93:
 678 021e 8091 0000 		lds r24,bit5
 679 0222 8111      		cpse r24,__zero_reg__
 680 0224 00C0      		rjmp .L26
 226:main.cpp      ****         {
 227:main.cpp      ****             moteur.pivotGauche(120);
 681               		.stabn	68,0,227,.LM94-.LFBB4
 682               	.LM94:
 683 0226 68E7      		ldi r22,lo8(120)
 684 0228 70E0      		ldi r23,0
 685 022a CE01      		movw r24,r28
 686 022c 0596      		adiw r24,5
 687 022e 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 688               	.LBB41:
 689               	.LBB42:
 690               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext11
 691               	.Ltext11:
 692               		.stabn	68,0,164,.LM95-.LFBB4
 693               	.LM95:
 694 0232 EFEF      		ldi r30,lo8(479999)
 695 0234 F2E5      		ldi r31,hi8(479999)
 696 0236 27E0      		ldi r18,hlo8(479999)
 697 0238 E150      		1: subi r30,1
 698 023a F040      		sbci r31,0
 699 023c 2040      		sbci r18,0
 700 023e 01F4      		brne 1b
 701               	.L203:
 702 0240 00C0      		rjmp .
 703 0242 0000      		nop
 704 0244 00C0      		rjmp .L14
 705               	.L26:
 706               	.LBE42:
 707               	.LBE41:
 708               		.stabs	"main.cpp",132,0,0,.Ltext12
 709               	.Ltext12:
 228:main.cpp      ****             _delay_ms(300);
 229:main.cpp      ****         }
 230:main.cpp      ****         else if (!(bit1 && bit2 && bit3 && bit4) && bit5) //sensor droite
 710               		.stabn	68,0,230,.LM96-.LFBB4
 711               	.LM96:
 712 0246 8091 0000 		lds r24,bit1
 713 024a 8823      		tst r24
 714 024c 01F0      		breq .L28
 715               		.stabn	68,0,230,.LM97-.LFBB4
 716               	.LM97:
 717 024e 8091 0000 		lds r24,bit2
 718 0252 8823      		tst r24
 719 0254 01F0      		breq .L28
 720               		.stabn	68,0,230,.LM98-.LFBB4
 721               	.LM98:
 722 0256 8091 0000 		lds r24,bit3
GAS LISTING /tmp/ccPqrgEP.s 			page 21


 723 025a 8823      		tst r24
 724 025c 01F0      		breq .L28
 725               		.stabn	68,0,230,.LM99-.LFBB4
 726               	.LM99:
 727 025e 8091 0000 		lds r24,bit4
 728 0262 8111      		cpse r24,__zero_reg__
 729 0264 00C0      		rjmp .L29
 730               	.L28:
 731               		.stabn	68,0,230,.LM100-.LFBB4
 732               	.LM100:
 733 0266 8091 0000 		lds r24,bit5
 734 026a 8823      		tst r24
 735 026c 01F0      		breq .L29
 231:main.cpp      ****         {
 232:main.cpp      ****             moteur.pivotDroit(130);
 736               		.stabn	68,0,232,.LM101-.LFBB4
 737               	.LM101:
 738 026e 62E8      		ldi r22,lo8(-126)
 739 0270 70E0      		ldi r23,0
 740 0272 00C0      		rjmp .L202
 741               	.L29:
 233:main.cpp      ****           
 234:main.cpp      ****         }
 235:main.cpp      ****         else if (!(bit1 && bit2 && bit3) && bit4 && bit5) //sensor droite et Mdroite
 742               		.stabn	68,0,235,.LM102-.LFBB4
 743               	.LM102:
 744 0274 8091 0000 		lds r24,bit1
 745 0278 8823      		tst r24
 746 027a 01F0      		breq .L31
 747               		.stabn	68,0,235,.LM103-.LFBB4
 748               	.LM103:
 749 027c 8091 0000 		lds r24,bit2
 750 0280 8823      		tst r24
 751 0282 01F0      		breq .L31
 752               		.stabn	68,0,235,.LM104-.LFBB4
 753               	.LM104:
 754 0284 8091 0000 		lds r24,bit3
 755 0288 8111      		cpse r24,__zero_reg__
 756 028a 00C0      		rjmp .L32
 757               	.L31:
 758               		.stabn	68,0,235,.LM105-.LFBB4
 759               	.LM105:
 760 028c 8091 0000 		lds r24,bit4
 761 0290 8823      		tst r24
 762 0292 01F0      		breq .L32
 763               		.stabn	68,0,235,.LM106-.LFBB4
 764               	.LM106:
 765 0294 8091 0000 		lds r24,bit5
 766 0298 8111      		cpse r24,__zero_reg__
 767 029a 00C0      		rjmp .L188
 768               	.L32:
 236:main.cpp      ****         {
 237:main.cpp      ****             moteur.Tourner_Droite(120);
 238:main.cpp      ****         }
 239:main.cpp      ****         else if (!(bit1 && bit2 && bit3) && bit4 && !bit5) //sensor Mdroite
 769               		.stabn	68,0,239,.LM107-.LFBB4
 770               	.LM107:
GAS LISTING /tmp/ccPqrgEP.s 			page 22


 771 029c 8091 0000 		lds r24,bit1
 772 02a0 8823      		tst r24
 773 02a2 01F0      		breq .L34
 774               		.stabn	68,0,239,.LM108-.LFBB4
 775               	.LM108:
 776 02a4 8091 0000 		lds r24,bit2
 777 02a8 8823      		tst r24
 778 02aa 01F0      		breq .L34
 779               		.stabn	68,0,239,.LM109-.LFBB4
 780               	.LM109:
 781 02ac 8091 0000 		lds r24,bit3
 782 02b0 8111      		cpse r24,__zero_reg__
 783 02b2 00C0      		rjmp .L35
 784               	.L34:
 785               		.stabn	68,0,239,.LM110-.LFBB4
 786               	.LM110:
 787 02b4 8091 0000 		lds r24,bit4
 788 02b8 8823      		tst r24
 789 02ba 01F0      		breq .L35
 790               		.stabn	68,0,239,.LM111-.LFBB4
 791               	.LM111:
 792 02bc 8091 0000 		lds r24,bit5
 793 02c0 8823      		tst r24
 794 02c2 01F0      		breq .L188
 795               	.L35:
 240:main.cpp      ****         {
 241:main.cpp      ****             moteur.Tourner_Droite(120);
 242:main.cpp      ****         }
 243:main.cpp      ****         
 244:main.cpp      **** 	else if (!bit1 && !bit2 && bit3 && !bit4 && !bit5) //sensor centre
 796               		.stabn	68,0,244,.LM112-.LFBB4
 797               	.LM112:
 798 02c4 8091 0000 		lds r24,bit1
 799 02c8 8111      		cpse r24,__zero_reg__
 800 02ca 00C0      		rjmp .L37
 801               		.stabn	68,0,244,.LM113-.LFBB4
 802               	.LM113:
 803 02cc 8091 0000 		lds r24,bit2
 804 02d0 8111      		cpse r24,__zero_reg__
 805 02d2 00C0      		rjmp .L37
 806               		.stabn	68,0,244,.LM114-.LFBB4
 807               	.LM114:
 808 02d4 8091 0000 		lds r24,bit3
 809 02d8 8823      		tst r24
 810 02da 01F0      		breq .L37
 811               		.stabn	68,0,244,.LM115-.LFBB4
 812               	.LM115:
 813 02dc 8091 0000 		lds r24,bit4
 814 02e0 8111      		cpse r24,__zero_reg__
 815 02e2 00C0      		rjmp .L37
 816               		.stabn	68,0,244,.LM116-.LFBB4
 817               	.LM116:
 818 02e4 8091 0000 		lds r24,bit5
 819 02e8 8111      		cpse r24,__zero_reg__
 820 02ea 00C0      		rjmp .L37
 821 02ec 00C0      		rjmp .L191
 822               	.L188:
GAS LISTING /tmp/ccPqrgEP.s 			page 23


 241:main.cpp      ****         }
 823               		.stabn	68,0,241,.LM117-.LFBB4
 824               	.LM117:
 825 02ee 68E7      		ldi r22,lo8(120)
 826 02f0 70E0      		ldi r23,0
 827 02f2 CE01      		movw r24,r28
 828 02f4 0596      		adiw r24,5
 829 02f6 0E94 0000 		call _ZN3Pwm14Tourner_DroiteEj
 830 02fa 00C0      		rjmp .L14
 831               	.L37:
 245:main.cpp      **** 	{
 246:main.cpp      **** 		moteur.Avance(120);
 247:main.cpp      **** 	}
 248:main.cpp      **** 	else if (!bit1 && bit2 && bit3 && !bit4 && !bit5) //sensor centre et Mgauche
 832               		.stabn	68,0,248,.LM118-.LFBB4
 833               	.LM118:
 834 02fc 8091 0000 		lds r24,bit1
 835 0300 8111      		cpse r24,__zero_reg__
 836 0302 00C0      		rjmp .L39
 837               		.stabn	68,0,248,.LM119-.LFBB4
 838               	.LM119:
 839 0304 8091 0000 		lds r24,bit2
 840 0308 8823      		tst r24
 841 030a 01F0      		breq .L39
 842               		.stabn	68,0,248,.LM120-.LFBB4
 843               	.LM120:
 844 030c 8091 0000 		lds r24,bit3
 845 0310 8823      		tst r24
 846 0312 01F0      		breq .L39
 847               		.stabn	68,0,248,.LM121-.LFBB4
 848               	.LM121:
 849 0314 8091 0000 		lds r24,bit4
 850 0318 8111      		cpse r24,__zero_reg__
 851 031a 00C0      		rjmp .L39
 852               		.stabn	68,0,248,.LM122-.LFBB4
 853               	.LM122:
 854 031c 8091 0000 		lds r24,bit5
 855 0320 8823      		tst r24
 856 0322 01F0      		breq .L191
 857               	.L39:
 249:main.cpp      **** 	{
 250:main.cpp      **** 		moteur.Avance(120);
 251:main.cpp      **** 	}
 252:main.cpp      **** 	else if (!bit1 && !bit2 && bit3 && bit4 && !bit5) //sensor centre et Mdroite
 858               		.stabn	68,0,252,.LM123-.LFBB4
 859               	.LM123:
 860 0324 8091 0000 		lds r24,bit1
 861 0328 8111      		cpse r24,__zero_reg__
 862 032a 00C0      		rjmp .L41
 863               		.stabn	68,0,252,.LM124-.LFBB4
 864               	.LM124:
 865 032c 8091 0000 		lds r24,bit2
 866 0330 8111      		cpse r24,__zero_reg__
 867 0332 00C0      		rjmp .L41
 868               		.stabn	68,0,252,.LM125-.LFBB4
 869               	.LM125:
 870 0334 8091 0000 		lds r24,bit3
GAS LISTING /tmp/ccPqrgEP.s 			page 24


 871 0338 8823      		tst r24
 872 033a 01F0      		breq .L41
 873               		.stabn	68,0,252,.LM126-.LFBB4
 874               	.LM126:
 875 033c 8091 0000 		lds r24,bit4
 876 0340 8823      		tst r24
 877 0342 01F0      		breq .L41
 878               		.stabn	68,0,252,.LM127-.LFBB4
 879               	.LM127:
 880 0344 8091 0000 		lds r24,bit5
 881 0348 8111      		cpse r24,__zero_reg__
 882 034a 00C0      		rjmp .L41
 883               	.L191:
 253:main.cpp      **** 	{
 254:main.cpp      **** 		moteur.Avance(120);
 884               		.stabn	68,0,254,.LM128-.LFBB4
 885               	.LM128:
 886 034c 68E7      		ldi r22,lo8(120)
 887 034e 70E0      		ldi r23,0
 888 0350 CE01      		movw r24,r28
 889 0352 0596      		adiw r24,5
 890 0354 0E94 0000 		call _ZN3Pwm6AvanceEj
 891 0358 00C0      		rjmp .L14
 892               	.L41:
 255:main.cpp      **** 	}
 256:main.cpp      ****     
 257:main.cpp      **** 	else if (!bit1 && !bit2 && bit3 && bit4 && bit5) //sensor centre et Mdroite et droite (coin)
 893               		.stabn	68,0,257,.LM129-.LFBB4
 894               	.LM129:
 895 035a 8091 0000 		lds r24,bit1
 896 035e 8111      		cpse r24,__zero_reg__
 897 0360 00C0      		rjmp .L43
 898               		.stabn	68,0,257,.LM130-.LFBB4
 899               	.LM130:
 900 0362 8091 0000 		lds r24,bit2
 901 0366 8111      		cpse r24,__zero_reg__
 902 0368 00C0      		rjmp .L43
 903               		.stabn	68,0,257,.LM131-.LFBB4
 904               	.LM131:
 905 036a 8091 0000 		lds r24,bit3
 906 036e 8823      		tst r24
 907 0370 01F0      		breq .L43
 908               		.stabn	68,0,257,.LM132-.LFBB4
 909               	.LM132:
 910 0372 8091 0000 		lds r24,bit4
 911 0376 8823      		tst r24
 912 0378 01F0      		breq .L43
 913               		.stabn	68,0,257,.LM133-.LFBB4
 914               	.LM133:
 915 037a 8091 0000 		lds r24,bit5
 916 037e 8823      		tst r24
 917 0380 01F0      		breq .L43
 258:main.cpp      **** 	{
 259:main.cpp      ****             moteur.pivotDroit(150);
 918               		.stabn	68,0,259,.LM134-.LFBB4
 919               	.LM134:
 920 0382 66E9      		ldi r22,lo8(-106)
GAS LISTING /tmp/ccPqrgEP.s 			page 25


 921 0384 70E0      		ldi r23,0
 922               	.L202:
 923 0386 CE01      		movw r24,r28
 924 0388 0596      		adiw r24,5
 925 038a 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 926 038e 00C0      		rjmp .L14
 927               	.L43:
 260:main.cpp      **** 	}
 261:main.cpp      **** 		
 262:main.cpp      **** 		
 263:main.cpp      **** 	else if (!(bit1 && bit2 && bit3 && bit4 && bit5))	//Aucun sensor (aka embranchement Y)
 928               		.stabn	68,0,263,.LM135-.LFBB4
 929               	.LM135:
 930 0390 8091 0000 		lds r24,bit1
 931 0394 8823      		tst r24
 932 0396 01F0      		breq .L45
 933               		.stabn	68,0,263,.LM136-.LFBB4
 934               	.LM136:
 935 0398 8091 0000 		lds r24,bit2
 936 039c 8823      		tst r24
 937 039e 01F0      		breq .L45
 938               		.stabn	68,0,263,.LM137-.LFBB4
 939               	.LM137:
 940 03a0 8091 0000 		lds r24,bit3
 941 03a4 8823      		tst r24
 942 03a6 01F0      		breq .L45
 943               		.stabn	68,0,263,.LM138-.LFBB4
 944               	.LM138:
 945 03a8 8091 0000 		lds r24,bit4
 946 03ac 8823      		tst r24
 947 03ae 01F0      		breq .L45
 948               		.stabn	68,0,263,.LM139-.LFBB4
 949               	.LM139:
 950 03b0 8091 0000 		lds r24,bit5
 951 03b4 8111      		cpse r24,__zero_reg__
 952 03b6 00C0      		rjmp .L14
 953               	.L45:
 264:main.cpp      **** 	{
 265:main.cpp      **** 			moteur.Avance(120);
 954               		.stabn	68,0,265,.LM140-.LFBB4
 955               	.LM140:
 956 03b8 68E7      		ldi r22,lo8(120)
 957 03ba 70E0      		ldi r23,0
 958 03bc CE01      		movw r24,r28
 959 03be 0596      		adiw r24,5
 960 03c0 0E94 0000 		call _ZN3Pwm6AvanceEj
 961               	.LBB43:
 962               	.LBB44:
 963               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext13
 964               	.Ltext13:
 965               		.stabn	68,0,164,.LM141-.LFBB4
 966               	.LM141:
 967 03c4 8FEF      		ldi r24,lo8(479999)
 968 03c6 92E5      		ldi r25,hi8(479999)
 969 03c8 E7E0      		ldi r30,hlo8(479999)
 970 03ca 8150      		1: subi r24,1
 971 03cc 9040      		sbci r25,0
GAS LISTING /tmp/ccPqrgEP.s 			page 26


 972 03ce E040      		sbci r30,0
 973 03d0 01F4      		brne 1b
 974 03d2 00C0      		rjmp .
 975 03d4 0000      		nop
 976               	.LBE44:
 977               	.LBE43:
 978               		.stabs	"main.cpp",132,0,0,.Ltext14
 979               	.Ltext14:
 266:main.cpp      **** 			_delay_ms(300);
 267:main.cpp      **** 			
 268:main.cpp      **** 			if (!(bit1 && bit2 && bit3 && bit4 && bit5))
 980               		.stabn	68,0,268,.LM142-.LFBB4
 981               	.LM142:
 982 03d6 8091 0000 		lds r24,bit1
 983 03da 8823      		tst r24
 984 03dc 01F0      		breq .L46
 985               		.stabn	68,0,268,.LM143-.LFBB4
 986               	.LM143:
 987 03de 8091 0000 		lds r24,bit2
 988 03e2 8823      		tst r24
 989 03e4 01F0      		breq .L46
 990               		.stabn	68,0,268,.LM144-.LFBB4
 991               	.LM144:
 992 03e6 8091 0000 		lds r24,bit3
 993 03ea 8823      		tst r24
 994 03ec 01F0      		breq .L46
 995               		.stabn	68,0,268,.LM145-.LFBB4
 996               	.LM145:
 997 03ee 8091 0000 		lds r24,bit4
 998 03f2 8823      		tst r24
 999 03f4 01F0      		breq .L46
 1000               		.stabn	68,0,268,.LM146-.LFBB4
 1001               	.LM146:
 1002 03f6 8091 0000 		lds r24,bit5
 1003 03fa 8111      		cpse r24,__zero_reg__
 1004 03fc 00C0      		rjmp .L14
 1005               	.L46:
 269:main.cpp      **** 			{
 270:main.cpp      ****                             
 271:main.cpp      ****                                
 272:main.cpp      **** 				if (directions[compteur] == 'd')
 1006               		.stabn	68,0,272,.LM147-.LFBB4
 1007               	.LM147:
 1008 03fe E1E0      		ldi r30,lo8(1)
 1009 0400 F0E0      		ldi r31,0
 1010 0402 EC0F      		add r30,r28
 1011 0404 FD1F      		adc r31,r29
 1012 0406 E10F      		add r30,r17
 1013 0408 F11D      		adc r31,__zero_reg__
 1014 040a 8081      		ld r24,Z
 1015 040c 8436      		cpi r24,lo8(100)
 1016 040e 01F4      		brne .L201
 273:main.cpp      **** 				{
 274:main.cpp      **** 					moteur.pivotDroit(150);
 1017               		.stabn	68,0,274,.LM148-.LFBB4
 1018               	.LM148:
 1019 0410 66E9      		ldi r22,lo8(-106)
GAS LISTING /tmp/ccPqrgEP.s 			page 27


 1020 0412 70E0      		ldi r23,0
 1021 0414 CE01      		movw r24,r28
 1022 0416 0596      		adiw r24,5
 1023 0418 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 1024               	.LBB45:
 1025               	.LBB46:
 1026               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext15
 1027               	.Ltext15:
 1028               		.stabn	68,0,164,.LM149-.LFBB4
 1029               	.LM149:
 1030 041c FFE7      		ldi r31,lo8(399999)
 1031 041e 2AE1      		ldi r18,hi8(399999)
 1032 0420 86E0      		ldi r24,hlo8(399999)
 1033 0422 F150      		1: subi r31,1
 1034 0424 2040      		sbci r18,0
 1035 0426 8040      		sbci r24,0
 1036 0428 01F4      		brne 1b
 1037 042a 00C0      		rjmp .
 1038 042c 0000      		nop
 1039               	.LBE46:
 1040               	.LBE45:
 1041               		.stabs	"main.cpp",132,0,0,.Ltext16
 1042               	.Ltext16:
 275:main.cpp      **** 					_delay_ms(250);
 276:main.cpp      **** 					moteur.Avance(120);
 1043               		.stabn	68,0,276,.LM150-.LFBB4
 1044               	.LM150:
 1045 042e 68E7      		ldi r22,lo8(120)
 1046 0430 70E0      		ldi r23,0
 1047 0432 CE01      		movw r24,r28
 1048 0434 0596      		adiw r24,5
 1049 0436 0E94 0000 		call _ZN3Pwm6AvanceEj
 1050               	.L47:
 277:main.cpp      **** 					while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 1051               		.stabn	68,0,277,.LM151-.LFBB4
 1052               	.LM151:
 1053 043a 8091 0000 		lds r24,bit1
 1054 043e 8823      		tst r24
 1055 0440 01F0      		breq .L48
 1056               	.L49:
 278:main.cpp      **** 					{
 279:main.cpp      **** 						lireDirection();
 280:main.cpp      **** 						
 281:main.cpp      **** 					}
 282:main.cpp      **** 					
 283:main.cpp      **** 					//_delay_ms(300);
 284:main.cpp      **** 					//moteur.Tourner_Gauche(150);
 285:main.cpp      **** 					//_delay_ms(200);
 286:main.cpp      **** 				}
 287:main.cpp      **** 				else if (directions[compteur] == 'g')
 288:main.cpp      **** 				{
 289:main.cpp      **** 					moteur.pivotGauche(150);
 290:main.cpp      **** 					_delay_ms(250);
 291:main.cpp      **** 					
 292:main.cpp      **** 					moteur.Avance(120);
 293:main.cpp      **** 					while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 294:main.cpp      **** 					{
GAS LISTING /tmp/ccPqrgEP.s 			page 28


 295:main.cpp      **** 						lireDirection();
 296:main.cpp      **** 						
 297:main.cpp      **** 					}
 298:main.cpp      **** 						
 299:main.cpp      **** 					//_delay_ms(300);
 300:main.cpp      **** 					//moteur.Tourner_Gauche(150);
 301:main.cpp      **** 					//_delay_ms(200);
 302:main.cpp      **** 				}
 303:main.cpp      **** 				
 304:main.cpp      **** 		
 305:main.cpp      **** 				compteur++;
 1057               		.stabn	68,0,305,.LM152-.LFBB4
 1058               	.LM152:
 1059 0442 1F5F      		subi r17,lo8(-(1))
 1060 0444 00C0      		rjmp .L14
 1061               	.L48:
 277:main.cpp      **** 					while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 1062               		.stabn	68,0,277,.LM153-.LFBB4
 1063               	.LM153:
 1064 0446 8091 0000 		lds r24,bit2
 1065 044a 8111      		cpse r24,__zero_reg__
 1066 044c 00C0      		rjmp .L49
 277:main.cpp      **** 					while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 1067               		.stabn	68,0,277,.LM154-.LFBB4
 1068               	.LM154:
 1069 044e 8091 0000 		lds r24,bit3
 1070 0452 8111      		cpse r24,__zero_reg__
 1071 0454 00C0      		rjmp .L49
 277:main.cpp      **** 					while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 1072               		.stabn	68,0,277,.LM155-.LFBB4
 1073               	.LM155:
 1074 0456 8091 0000 		lds r24,bit4
 1075 045a 8111      		cpse r24,__zero_reg__
 1076 045c 00C0      		rjmp .L49
 277:main.cpp      **** 					while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 1077               		.stabn	68,0,277,.LM156-.LFBB4
 1078               	.LM156:
 1079 045e 8091 0000 		lds r24,bit5
 1080 0462 8111      		cpse r24,__zero_reg__
 1081 0464 00C0      		rjmp .L49
 279:main.cpp      **** 						
 1082               		.stabn	68,0,279,.LM157-.LFBB4
 1083               	.LM157:
 1084 0466 0E94 0000 		call _Z13lireDirectionv
 1085 046a 00C0      		rjmp .L47
 1086               	.L201:
 287:main.cpp      **** 				{
 1087               		.stabn	68,0,287,.LM158-.LFBB4
 1088               	.LM158:
 1089 046c 8736      		cpi r24,lo8(103)
 1090 046e 01F4      		brne .L49
 289:main.cpp      **** 					_delay_ms(250);
 1091               		.stabn	68,0,289,.LM159-.LFBB4
 1092               	.LM159:
 1093 0470 66E9      		ldi r22,lo8(-106)
 1094 0472 70E0      		ldi r23,0
 1095 0474 CE01      		movw r24,r28
GAS LISTING /tmp/ccPqrgEP.s 			page 29


 1096 0476 0596      		adiw r24,5
 1097 0478 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 1098               	.LBB47:
 1099               	.LBB48:
 1100               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext17
 1101               	.Ltext17:
 1102               		.stabn	68,0,164,.LM160-.LFBB4
 1103               	.LM160:
 1104 047c 9FE7      		ldi r25,lo8(399999)
 1105 047e EAE1      		ldi r30,hi8(399999)
 1106 0480 F6E0      		ldi r31,hlo8(399999)
 1107 0482 9150      		1: subi r25,1
 1108 0484 E040      		sbci r30,0
 1109 0486 F040      		sbci r31,0
 1110 0488 01F4      		brne 1b
 1111 048a 00C0      		rjmp .
 1112 048c 0000      		nop
 1113               	.LBE48:
 1114               	.LBE47:
 1115               		.stabs	"main.cpp",132,0,0,.Ltext18
 1116               	.Ltext18:
 292:main.cpp      **** 					while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 1117               		.stabn	68,0,292,.LM161-.LFBB4
 1118               	.LM161:
 1119 048e 68E7      		ldi r22,lo8(120)
 1120 0490 70E0      		ldi r23,0
 1121 0492 CE01      		movw r24,r28
 1122 0494 0596      		adiw r24,5
 1123 0496 0E94 0000 		call _ZN3Pwm6AvanceEj
 1124               	.L51:
 293:main.cpp      **** 					{
 1125               		.stabn	68,0,293,.LM162-.LFBB4
 1126               	.LM162:
 1127 049a 8091 0000 		lds r24,bit1
 1128 049e 8111      		cpse r24,__zero_reg__
 1129 04a0 00C0      		rjmp .L49
 293:main.cpp      **** 					{
 1130               		.stabn	68,0,293,.LM163-.LFBB4
 1131               	.LM163:
 1132 04a2 8091 0000 		lds r24,bit2
 1133 04a6 8111      		cpse r24,__zero_reg__
 1134 04a8 00C0      		rjmp .L49
 293:main.cpp      **** 					{
 1135               		.stabn	68,0,293,.LM164-.LFBB4
 1136               	.LM164:
 1137 04aa 8091 0000 		lds r24,bit3
 1138 04ae 8111      		cpse r24,__zero_reg__
 1139 04b0 00C0      		rjmp .L49
 293:main.cpp      **** 					{
 1140               		.stabn	68,0,293,.LM165-.LFBB4
 1141               	.LM165:
 1142 04b2 8091 0000 		lds r24,bit4
 1143 04b6 8111      		cpse r24,__zero_reg__
 1144 04b8 00C0      		rjmp .L49
 293:main.cpp      **** 					{
 1145               		.stabn	68,0,293,.LM166-.LFBB4
 1146               	.LM166:
GAS LISTING /tmp/ccPqrgEP.s 			page 30


 1147 04ba 8091 0000 		lds r24,bit5
 1148 04be 8111      		cpse r24,__zero_reg__
 1149 04c0 00C0      		rjmp .L49
 295:main.cpp      **** 						
 1150               		.stabn	68,0,295,.LM167-.LFBB4
 1151               	.LM167:
 1152 04c2 0E94 0000 		call _Z13lireDirectionv
 1153 04c6 00C0      		rjmp .L51
 1154               	.L204:
 206:main.cpp      ****                 return 0;
 1155               		.stabn	68,0,206,.LM168-.LFBB4
 1156               	.LM168:
 1157 04c8 60E0      		ldi r22,0
 1158 04ca 70E0      		ldi r23,0
 1159 04cc CE01      		movw r24,r28
 1160 04ce 0596      		adiw r24,5
 1161 04d0 0E94 0000 		call _ZN3Pwm6AvanceEj
  71:main.cpp      ****     uint8_t rapport;
 1162               		.stabn	68,0,71,.LM169-.LFBB4
 1163               	.LM169:
 1164 04d4 CE01      		movw r24,r28
 1165 04d6 0496      		adiw r24,4
 1166 04d8 0E94 0000 		call _ZN3canD1Ev
  70:main.cpp      ****     can intensite;
 1167               		.stabn	68,0,70,.LM170-.LFBB4
 1168               	.LM170:
 1169 04dc CE01      		movw r24,r28
 1170 04de 0596      		adiw r24,5
 1171 04e0 0E94 0000 		call _ZN3PwmD1Ev
 306:main.cpp      **** 			}
 307:main.cpp      **** 			
 308:main.cpp      ****         }
 309:main.cpp      **** 		
 310:main.cpp      **** 	
 311:main.cpp      ****         
 312:main.cpp      ****     }
 1172               		.stabn	68,0,312,.LM171-.LFBB4
 1173               	.LM171:
 1174 04e4 CE01      		movw r24,r28
 1175 04e6 0696      		adiw r24,6
 1176 04e8 0E94 0000 		call _ZN3DelD1Ev
 1177               	.LBE30:
 313:main.cpp      ****     
 314:main.cpp      ****     
 315:main.cpp      ****     
 316:main.cpp      **** }
 1178               		.stabn	68,0,316,.LM172-.LFBB4
 1179               	.LM172:
 1180 04ec 80E0      		ldi r24,0
 1181 04ee 90E0      		ldi r25,0
 1182               	/* epilogue start */
 1183 04f0 2696      		adiw r28,6
 1184 04f2 0FB6      		in __tmp_reg__,__SREG__
 1185 04f4 F894      		cli
 1186 04f6 DEBF      		out __SP_H__,r29
 1187 04f8 0FBE      		out __SREG__,__tmp_reg__
 1188 04fa CDBF      		out __SP_L__,r28
GAS LISTING /tmp/ccPqrgEP.s 			page 31


 1189 04fc DF91      		pop r29
 1190 04fe CF91      		pop r28
 1191 0500 1F91      		pop r17
 1192 0502 FF90      		pop r15
 1193 0504 EF90      		pop r14
 1194 0506 0895      		ret
 1195               		.size	main, .-main
 1196               		.stabs	"del:(0,98)",128,0,69,6
 1197               		.stabs	"moteur:(0,123)",128,0,70,5
 1198               		.stabs	"intensite:(0,105)",128,0,71,4
 1199               		.stabs	"directions:(0,127)=ar(0,128)=r(0,128);0;0177777;;0;2;(0,17)",128,0,80,1
 1200               		.stabs	"enfonceDroit:r(0,54)",64,0,82,25
 1201               		.stabs	"enfonceGauche:r(0,54)",64,0,83,18
 1202               		.stabn	192,0,0,.LBB30-.LFBB4
 1203               		.stabn	224,0,0,.LBE30-.LFBB4
 1204               	.Lscope4:
 1205               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 1206               		.stabd	78,0,0
 1207               	.global	bit5
 1208               		.section .bss
 1209               		.type	bit5, @object
 1210               		.size	bit5, 1
 1211               	bit5:
 1212 0000 00        		.zero	1
 1213               	.global	bit4
 1214               		.type	bit4, @object
 1215               		.size	bit4, 1
 1216               	bit4:
 1217 0001 00        		.zero	1
 1218               	.global	bit3
 1219               		.type	bit3, @object
 1220               		.size	bit3, 1
 1221               	bit3:
 1222 0002 00        		.zero	1
 1223               	.global	bit2
 1224               		.type	bit2, @object
 1225               		.size	bit2, 1
 1226               	bit2:
 1227 0003 00        		.zero	1
 1228               	.global	bit1
 1229               		.type	bit1, @object
 1230               		.size	bit1, 1
 1231               	bit1:
 1232 0004 00        		.zero	1
 1233               		.stabs	"bit1:G(0,129)=B(0,54)",32,0,14,0
 1234               		.stabs	"bit2:G(0,129)",32,0,14,0
 1235               		.stabs	"bit3:G(0,129)",32,0,14,0
 1236               		.stabs	"bit4:G(0,129)",32,0,14,0
 1237               		.stabs	"bit5:G(0,129)",32,0,14,0
 1238               		.text
 1239               		.stabs	"",100,0,0,.Letext0
 1240               	.Letext0:
 1241               		.ident	"GCC: (Fedora 4.9.2-1.fc22) 4.9.2"
 1242               	.global __do_clear_bss
GAS LISTING /tmp/ccPqrgEP.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccPqrgEP.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccPqrgEP.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccPqrgEP.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccPqrgEP.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccPqrgEP.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccPqrgEP.s:114    .text:0000000000000000 _Z18initialisationUARTv
     /tmp/ccPqrgEP.s:151    .text:000000000000001e _Z22transmissionUARTVersPch
     /tmp/ccPqrgEP.s:177    .text:000000000000002c _Z13lireDirectionv
     /tmp/ccPqrgEP.s:1231   .bss:0000000000000004 bit1
     /tmp/ccPqrgEP.s:1226   .bss:0000000000000003 bit2
     /tmp/ccPqrgEP.s:1221   .bss:0000000000000002 bit3
     /tmp/ccPqrgEP.s:1216   .bss:0000000000000001 bit4
     /tmp/ccPqrgEP.s:1211   .bss:0000000000000000 bit5
     /tmp/ccPqrgEP.s:226    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
_ZN3DelC1Ev
_ZN3PwmC1Ev
_ZN3canC1Ev
_ZN3can7lectureEh
_ZN3Pwm11pivotGaucheEj
_ZN3Pwm14Tourner_GaucheEj
_ZN3Pwm10pivotDroitEj
_ZN3Pwm14Tourner_DroiteEj
_ZN3Pwm6AvanceEj
_ZN3canD1Ev
_ZN3PwmD1Ev
_ZN3DelD1Ev
__do_clear_bss
