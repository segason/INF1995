GAS LISTING /tmp/cccXD99i.s 			page 1


   1               		.file	"main.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/AltairHandor/Documents/inf1995-4754/projet/",100,0,4,.Ltext0
   8               		.stabs	"main.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"short _Fract:t(0,23)=r(0,9);1;0;",128,0,0,0
  38               		.stabs	"long _Fract:t(0,24)=r(0,9);4;0;",128,0,0,0
  39               		.stabs	"long long _Fract:t(0,25)=r(0,9);8;0;",128,0,0,0
  40               		.stabs	"unsigned short _Fract:t(0,26)=r(0,9);1;0;",128,0,0,0
  41               		.stabs	"unsigned _Fract:t(0,27)=r(0,9);2;0;",128,0,0,0
  42               		.stabs	"unsigned long _Fract:t(0,28)=r(0,9);4;0;",128,0,0,0
  43               		.stabs	"unsigned long long _Fract:t(0,29)=r(0,9);8;0;",128,0,0,0
  44               		.stabs	"_Sat short _Fract:t(0,30)=r(0,9);1;0;",128,0,0,0
  45               		.stabs	"_Sat _Fract:t(0,31)=r(0,9);2;0;",128,0,0,0
  46               		.stabs	"_Sat long _Fract:t(0,32)=r(0,9);4;0;",128,0,0,0
  47               		.stabs	"_Sat long long _Fract:t(0,33)=r(0,9);8;0;",128,0,0,0
  48               		.stabs	"_Sat unsigned short _Fract:t(0,34)=r(0,9);1;0;",128,0,0,0
  49               		.stabs	"_Sat unsigned _Fract:t(0,35)=r(0,9);2;0;",128,0,0,0
  50               		.stabs	"_Sat unsigned long _Fract:t(0,36)=r(0,9);4;0;",128,0,0,0
  51               		.stabs	"_Sat unsigned long long _Fract:t(0,37)=r(0,9);8;0;",128,0,0,0
  52               		.stabs	"short _Accum:t(0,38)=r(0,9);2;0;",128,0,0,0
  53               		.stabs	"long _Accum:t(0,39)=r(0,9);8;0;",128,0,0,0
  54               		.stabs	"long long _Accum:t(0,40)=r(0,9);8;0;",128,0,0,0
  55               		.stabs	"unsigned short _Accum:t(0,41)=r(0,9);2;0;",128,0,0,0
  56               		.stabs	"unsigned _Accum:t(0,42)=r(0,9);4;0;",128,0,0,0
  57               		.stabs	"unsigned long _Accum:t(0,43)=r(0,9);8;0;",128,0,0,0
GAS LISTING /tmp/cccXD99i.s 			page 2


  58               		.stabs	"unsigned long long _Accum:t(0,44)=r(0,9);8;0;",128,0,0,0
  59               		.stabs	"_Sat short _Accum:t(0,45)=r(0,9);2;0;",128,0,0,0
  60               		.stabs	"_Sat _Accum:t(0,46)=r(0,9);4;0;",128,0,0,0
  61               		.stabs	"_Sat long _Accum:t(0,47)=r(0,9);8;0;",128,0,0,0
  62               		.stabs	"_Sat long long _Accum:t(0,48)=r(0,9);8;0;",128,0,0,0
  63               		.stabs	"_Sat unsigned short _Accum:t(0,49)=r(0,9);2;0;",128,0,0,0
  64               		.stabs	"_Sat unsigned _Accum:t(0,50)=r(0,9);4;0;",128,0,0,0
  65               		.stabs	"_Sat unsigned long _Accum:t(0,51)=r(0,9);8;0;",128,0,0,0
  66               		.stabs	"_Sat unsigned long long _Accum:t(0,52)=r(0,9);8;0;",128,0,0,0
  67               		.stabs	"void:t(0,4)",128,0,0,0
  68               		.stabs	"wchar_t:t(0,53)=r(0,53);-32768;32767;",128,0,0,0
  69               		.stabs	"bool:t(0,54)=@s8;-16;",128,0,0,0
  70               		.stabs	"__vtbl_ptr_type:t(0,55)=*(0,56)=f(0,9)",128,0,0,0
  71               		.stabs	"decltype(nullptr):t(0,57)=(0,57)",128,0,0,0
  72               		.stabs	"int8_t:t(0,58)=(0,16)",128,0,121,0
  73               		.stabs	"uint8_t:t(0,59)=(0,13)",128,0,122,0
  74               		.stabs	"int16_t:t(0,60)=(0,9)",128,0,123,0
  75               		.stabs	"uint16_t:t(0,61)=(0,12)",128,0,124,0
  76               		.stabs	"int32_t:t(0,62)=(0,15)",128,0,125,0
  77               		.stabs	"uint32_t:t(0,63)=(0,11)",128,0,126,0
  78               		.stabs	"int64_t:t(0,64)=(0,14)",128,0,128,0
  79               		.stabs	"uint64_t:t(0,65)=(0,10)",128,0,129,0
  80               		.stabs	"intptr_t:t(0,66)=(0,60)",128,0,142,0
  81               		.stabs	"uintptr_t:t(0,67)=(0,61)",128,0,147,0
  82               		.stabs	"int_least8_t:t(0,68)=(0,58)",128,0,159,0
  83               		.stabs	"uint_least8_t:t(0,69)=(0,59)",128,0,164,0
  84               		.stabs	"int_least16_t:t(0,70)=(0,60)",128,0,169,0
  85               		.stabs	"uint_least16_t:t(0,71)=(0,61)",128,0,174,0
  86               		.stabs	"int_least32_t:t(0,72)=(0,62)",128,0,179,0
  87               		.stabs	"uint_least32_t:t(0,73)=(0,63)",128,0,184,0
  88               		.stabs	"int_least64_t:t(0,74)=(0,64)",128,0,192,0
  89               		.stabs	"uint_least64_t:t(0,75)=(0,65)",128,0,199,0
  90               		.stabs	"int_fast8_t:t(0,76)=(0,58)",128,0,213,0
  91               		.stabs	"uint_fast8_t:t(0,77)=(0,59)",128,0,218,0
  92               		.stabs	"int_fast16_t:t(0,78)=(0,60)",128,0,223,0
  93               		.stabs	"uint_fast16_t:t(0,79)=(0,61)",128,0,228,0
  94               		.stabs	"int_fast32_t:t(0,80)=(0,62)",128,0,233,0
  95               		.stabs	"uint_fast32_t:t(0,81)=(0,63)",128,0,238,0
  96               		.stabs	"int_fast64_t:t(0,82)=(0,64)",128,0,246,0
  97               		.stabs	"uint_fast64_t:t(0,83)=(0,65)",128,0,253,0
  98               		.stabs	"intmax_t:t(0,84)=(0,64)",128,0,273,0
  99               		.stabs	"uintmax_t:t(0,85)=(0,65)",128,0,278,0
 100               		.stabs	"int_farptr_t:t(0,86)=(0,62)",128,0,77,0
 101               		.stabs	"uint_farptr_t:t(0,87)=(0,63)",128,0,81,0
 102               		.stabs	"._0:Tt(0,88)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
 103               		.stabs	"__fuse_t:t(0,88)",128,0,244,0
 104               		.stabs	"Memoire24CXXX:Tt(0,89)=s1m_adresse_peripherique:/0(0,59):_ZN13Memoire24CXXX22m_adresse_per
 105               		.stabs	"Del:Tt(0,98)=s1__base_ctor ::(0,99)=#(0,98),(0,4),(0,100)=*(0,98),(0,4);:_ZN3DelC2Ev;2A.;_
 106               		.stabs	"Moteur:Tt(0,102)=s1__base_ctor ::(0,103)=#(0,102),(0,4),(0,104)=*(0,102),(0,4);:_ZN6Moteur
 107               		.stabs	"can:Tt(0,105)=s1__base_ctor ::(0,106)=#(0,105),(0,4),(0,107)=*(0,105),(0,4);:_ZN3canC2Ev;2
 108               		.stabs	"Minuterie:Tt(0,109)=s4minuterieExpiree_:/0(0,110)=B(0,59),0,8;duree_:/0(0,61),8,16;boutonP
 109               		.stabs	"PwmSon:Tt(0,119)=s1__base_ctor ::(0,120)=#(0,119),(0,4),(0,121)=*(0,119),(0,4);:_ZN6PwmSon
 110               		.stabs	"Pwm:Tt(0,123)=s1__base_ctor ::(0,124)=#(0,123),(0,4),(0,125)=*(0,123),(0,4);:_ZN3PwmC2Ev;2
 111               		.stabs	"_Z22transmissionPcVersUartv:F(0,17)",36,0,24,_Z22transmissionPcVersUartv
 112               	.global	_Z22transmissionPcVersUartv
 113               		.type	_Z22transmissionPcVersUartv, @function
 114               	_Z22transmissionPcVersUartv:
GAS LISTING /tmp/cccXD99i.s 			page 3


 115               		.stabd	46,0,0
   1:main.cpp      **** #include "Memoire24CXXX.h"
   2:main.cpp      **** #include "delControl.h" 
   3:main.cpp      **** #include "Moteur.h" 
   4:main.cpp      **** #include "can.h"
   5:main.cpp      **** #include "minuterie.h" 
   6:main.cpp      **** #include "Memoire24CXXX.h" 
   7:main.cpp      **** #include "PwmSon.h"
   8:main.cpp      **** #include "PWM.h"
   9:main.cpp      **** #include <avr/io.h>
  10:main.cpp      **** #include <avr/interrupt.h> 
  11:main.cpp      **** #define F_CPU 8000000
  12:main.cpp      **** #include <util/delay.h>
  13:main.cpp      **** using namespace std;
  14:main.cpp      ****     
  15:main.cpp      **** bool bit1 = false, bit2 = false, bit3 = false, bit4 = false, bit5 = false, enfonceGauche = false, e
  16:main.cpp      **** 
  17:main.cpp      **** uint8_t compteur = 0, petitSkip = 0, rapport = 0, nbCarre =0;
  18:main.cpp      **** char directions[3] = {};
  19:main.cpp      **** Del del;
  20:main.cpp      **** Pwm moteur;
  21:main.cpp      **** can intensite;
  22:main.cpp      **** 
  23:main.cpp      **** 
  24:main.cpp      **** char transmissionPcVersUart ( ) {
 116               		.stabn	68,0,24,.LM0-.LFBB1
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 123               	.L3:
  25:main.cpp      **** 
  26:main.cpp      **** 	while (!( UCSR0A & (1<<RXC0)) && !(PIND & 0x04)) //
 124               		.stabn	68,0,26,.LM1-.LFBB1
 125               	.LM1:
 126 0000 8091 C000 		lds r24,192
 127 0004 87FD      		sbrc r24,7
 128 0006 00C0      		rjmp .L2
 129               		.stabn	68,0,26,.LM2-.LFBB1
 130               	.LM2:
 131 0008 4A9B      		sbis 0x9,2
 132 000a 00C0      		rjmp .L3
 133               	.L2:
  27:main.cpp      **** 	{
  28:main.cpp      **** 	}
  29:main.cpp      ****                
  30:main.cpp      ****     	return UDR0;//Retourne le data recu par lwe buffer
 134               		.stabn	68,0,30,.LM3-.LFBB1
 135               	.LM3:
 136 000c 8091 C600 		lds r24,198
  31:main.cpp      **** 
  32:main.cpp      **** }
 137               		.stabn	68,0,32,.LM4-.LFBB1
 138               	.LM4:
 139 0010 0895      		ret
GAS LISTING /tmp/cccXD99i.s 			page 4


 140               		.size	_Z22transmissionPcVersUartv, .-_Z22transmissionPcVersUartv
 141               	.Lscope1:
 142               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 143               		.stabd	78,0,0
 144               	.global	__floatunsisf
 145               	.global	__divsf3
 146               	.global	__mulsf3
 147               	.global	__fixunssfsi
 148               		.stabs	"_Z8faireSonj:F(0,4)",36,0,35,_Z8faireSonj
 149               		.stabs	"pwm:P(0,12)",64,0,35,24
 150               	.global	_Z8faireSonj
 151               		.type	_Z8faireSonj, @function
 152               	_Z8faireSonj:
 153               		.stabd	46,0,0
  33:main.cpp      **** 
  34:main.cpp      **** 
  35:main.cpp      **** void faireSon(unsigned int pwm)
  36:main.cpp      **** {
 154               		.stabn	68,0,36,.LM5-.LFBB2
 155               	.LM5:
 156               	.LFBB2:
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
  37:main.cpp      ****        if(pwm >= 45)
 161               		.stabn	68,0,37,.LM6-.LFBB2
 162               	.LM6:
 163 0012 8D32      		cpi r24,45
 164 0014 9105      		cpc r25,__zero_reg__
 165 0016 00F0      		brlo .L8
 166 0018 BC01      		movw r22,r24
  38:main.cpp      ****        {
  39:main.cpp      ****         TCCR0A = (1 << WGM01) | (1 << COM0A0);
 167               		.stabn	68,0,39,.LM7-.LFBB2
 168               	.LM7:
 169 001a 82E4      		ldi r24,lo8(66)
 170 001c 84BD      		out 0x24,r24
  40:main.cpp      **** 	
  41:main.cpp      **** 	TCCR0B = 0x04 ;
 171               		.stabn	68,0,41,.LM8-.LFBB2
 172               	.LM8:
 173 001e 84E0      		ldi r24,lo8(4)
 174 0020 85BD      		out 0x25,r24
  42:main.cpp      **** 		
  43:main.cpp      **** 	OCR0A = 15625.0/(110.0 * pow(2, (pwm-45)/12.0));
 175               		.stabn	68,0,43,.LM9-.LFBB2
 176               	.LM9:
 177 0022 6D52      		subi r22,45
 178 0024 7109      		sbc r23,__zero_reg__
 179 0026 80E0      		ldi r24,0
 180 0028 90E0      		ldi r25,0
 181 002a 0E94 0000 		call __floatunsisf
 182 002e 20E0      		ldi r18,0
 183 0030 30E0      		ldi r19,0
 184 0032 40E4      		ldi r20,lo8(64)
 185 0034 51E4      		ldi r21,lo8(65)
GAS LISTING /tmp/cccXD99i.s 			page 5


 186 0036 0E94 0000 		call __divsf3
 187 003a 9B01      		movw r18,r22
 188 003c AC01      		movw r20,r24
 189 003e 60E0      		ldi r22,0
 190 0040 70E0      		ldi r23,0
 191 0042 80E0      		ldi r24,0
 192 0044 90E4      		ldi r25,lo8(64)
 193 0046 0E94 0000 		call pow
 194 004a 20E0      		ldi r18,0
 195 004c 30E0      		ldi r19,0
 196 004e 4CED      		ldi r20,lo8(-36)
 197 0050 52E4      		ldi r21,lo8(66)
 198 0052 0E94 0000 		call __mulsf3
 199 0056 9B01      		movw r18,r22
 200 0058 AC01      		movw r20,r24
 201 005a 60E0      		ldi r22,0
 202 005c 74E2      		ldi r23,lo8(36)
 203 005e 84E7      		ldi r24,lo8(116)
 204 0060 96E4      		ldi r25,lo8(70)
 205 0062 0E94 0000 		call __divsf3
 206 0066 0E94 0000 		call __fixunssfsi
 207 006a 67BD      		out 0x27,r22
 208 006c 0895      		ret
 209               	.L8:
  44:main.cpp      ****        }
  45:main.cpp      ****        else
  46:main.cpp      ****         {
  47:main.cpp      ****             TCCR0A = (1 << WGM01) | (1 << COM0A0);
 210               		.stabn	68,0,47,.LM10-.LFBB2
 211               	.LM10:
 212 006e 82E4      		ldi r24,lo8(66)
 213 0070 84BD      		out 0x24,r24
  48:main.cpp      **** 	
  49:main.cpp      ****             TCCR0B = 0x04 ;
 214               		.stabn	68,0,49,.LM11-.LFBB2
 215               	.LM11:
 216 0072 84E0      		ldi r24,lo8(4)
 217 0074 85BD      		out 0x25,r24
  50:main.cpp      **** 		
  51:main.cpp      ****             OCR0A = 0;
 218               		.stabn	68,0,51,.LM12-.LFBB2
 219               	.LM12:
 220 0076 17BC      		out 0x27,__zero_reg__
 221 0078 0895      		ret
 222               		.size	_Z8faireSonj, .-_Z8faireSonj
 223               	.Lscope2:
 224               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 225               		.stabd	78,0,0
 226               		.stabs	"_Z18initialisationUARTv:F(0,4)",36,0,55,_Z18initialisationUARTv
 227               	.global	_Z18initialisationUARTv
 228               		.type	_Z18initialisationUARTv, @function
 229               	_Z18initialisationUARTv:
 230               		.stabd	46,0,0
  52:main.cpp      ****        }
  53:main.cpp      **** }
  54:main.cpp      **** 
  55:main.cpp      **** void initialisationUART ( void ) {
GAS LISTING /tmp/cccXD99i.s 			page 6


 231               		.stabn	68,0,55,.LM13-.LFBB3
 232               	.LM13:
 233               	.LFBB3:
 234               	/* prologue: function */
 235               	/* frame size = 0 */
 236               	/* stack size = 0 */
 237               	.L__stack_usage = 0
  56:main.cpp      **** 
  57:main.cpp      **** // 2400 bauds. Nous vous donnons la valeur des deux
  58:main.cpp      **** 
  59:main.cpp      **** // premier registres pour vous éviter des complications
  60:main.cpp      **** 
  61:main.cpp      **** UBRR0H = 0;
 238               		.stabn	68,0,61,.LM14-.LFBB3
 239               	.LM14:
 240 007a 1092 C500 		sts 197,__zero_reg__
  62:main.cpp      **** 
  63:main.cpp      **** UBRR0L = 0xCF;
 241               		.stabn	68,0,63,.LM15-.LFBB3
 242               	.LM15:
 243 007e 8FEC      		ldi r24,lo8(-49)
 244 0080 8093 C400 		sts 196,r24
  64:main.cpp      **** 
  65:main.cpp      **** // permettre la reception et la transmission par le UART0
  66:main.cpp      **** 
  67:main.cpp      **** UCSR0A = (1 << TXC0) | (1 << RXC0) ;
 245               		.stabn	68,0,67,.LM16-.LFBB3
 246               	.LM16:
 247 0084 80EC      		ldi r24,lo8(-64)
 248 0086 8093 C000 		sts 192,r24
  68:main.cpp      **** 
  69:main.cpp      **** UCSR0B =  (1 << RXEN0) | (1 << TXEN0) ; // L'émetteur USART est activé en réglant TXEN dans UCSR
 249               		.stabn	68,0,69,.LM17-.LFBB3
 250               	.LM17:
 251 008a 88E1      		ldi r24,lo8(24)
 252 008c 8093 C100 		sts 193,r24
  70:main.cpp      **** 
  71:main.cpp      **** // Format des trames: 8 bits, 1 stop bits, none parity
  72:main.cpp      **** 
  73:main.cpp      **** UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 253               		.stabn	68,0,73,.LM18-.LFBB3
 254               	.LM18:
 255 0090 86E0      		ldi r24,lo8(6)
 256 0092 8093 C200 		sts 194,r24
 257 0096 0895      		ret
 258               		.size	_Z18initialisationUARTv, .-_Z18initialisationUARTv
 259               	.Lscope3:
 260               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 261               		.stabd	78,0,0
 262               		.stabs	"_Z22transmissionUARTVersPch:F(0,4)",36,0,77,_Z22transmissionUARTVersPch
 263               		.stabs	"donnee:P(0,59)",64,0,77,24
 264               	.global	_Z22transmissionUARTVersPch
 265               		.type	_Z22transmissionUARTVersPch, @function
 266               	_Z22transmissionUARTVersPch:
 267               		.stabd	46,0,0
  74:main.cpp      **** 
  75:main.cpp      **** }
GAS LISTING /tmp/cccXD99i.s 			page 7


  76:main.cpp      **** 
  77:main.cpp      **** void transmissionUARTVersPc ( uint8_t donnee ) {
 268               		.stabn	68,0,77,.LM19-.LFBB4
 269               	.LM19:
 270               	.LFBB4:
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
 275               	.L12:
  78:main.cpp      **** 
  79:main.cpp      **** 	while (!( UCSR0A & (1<<UDRE0))) //Attendre que le tampon soient libre. 
 276               		.stabn	68,0,79,.LM20-.LFBB4
 277               	.LM20:
 278 0098 9091 C000 		lds r25,192
 279 009c 95FF      		sbrs r25,5
 280 009e 00C0      		rjmp .L12
  80:main.cpp      **** 	{
  81:main.cpp      **** 	}
  82:main.cpp      ****                
  83:main.cpp      ****     	UDR0 = donnee; 
 281               		.stabn	68,0,83,.LM21-.LFBB4
 282               	.LM21:
 283 00a0 8093 C600 		sts 198,r24
 284 00a4 0895      		ret
 285               		.size	_Z22transmissionUARTVersPch, .-_Z22transmissionUARTVersPch
 286               	.Lscope4:
 287               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 288               		.stabd	78,0,0
 289               		.stabs	"_Z13lireDirectionv:F(0,4)",36,0,86,_Z13lireDirectionv
 290               	.global	_Z13lireDirectionv
 291               		.type	_Z13lireDirectionv, @function
 292               	_Z13lireDirectionv:
 293               		.stabd	46,0,0
  84:main.cpp      **** }
  85:main.cpp      **** 
  86:main.cpp      **** void lireDirection()
  87:main.cpp      **** {
 294               		.stabn	68,0,87,.LM22-.LFBB5
 295               	.LM22:
 296               	.LFBB5:
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 0 */
 300               	.L__stack_usage = 0
  88:main.cpp      ****         bit1 = PINC & 0b00000001; // capteur_gauche
 301               		.stabn	68,0,88,.LM23-.LFBB5
 302               	.LM23:
 303 00a6 86B1      		in r24,0x6
 304 00a8 8170      		andi r24,lo8(1)
 305 00aa 8093 0000 		sts bit1,r24
  89:main.cpp      ****         bit2 = PINC & 0b00000010; // centre centre gauche
 306               		.stabn	68,0,89,.LM24-.LFBB5
 307               	.LM24:
 308 00ae 86B1      		in r24,0x6
 309 00b0 8695      		lsr r24
 310 00b2 8170      		andi r24,1
GAS LISTING /tmp/cccXD99i.s 			page 8


 311 00b4 8093 0000 		sts bit2,r24
  90:main.cpp      ****         bit3 = PINC & 0b00000100; // centre 
 312               		.stabn	68,0,90,.LM25-.LFBB5
 313               	.LM25:
 314 00b8 86B1      		in r24,0x6
 315 00ba 82FB      		bst r24,2
 316 00bc 8827      		clr r24
 317 00be 80F9      		bld r24,0
 318 00c0 8093 0000 		sts bit3,r24
  91:main.cpp      ****         bit4 = PINC & 0b00001000; // centre centre droit 
 319               		.stabn	68,0,91,.LM26-.LFBB5
 320               	.LM26:
 321 00c4 86B1      		in r24,0x6
 322 00c6 83FB      		bst r24,3
 323 00c8 8827      		clr r24
 324 00ca 80F9      		bld r24,0
 325 00cc 8093 0000 		sts bit4,r24
  92:main.cpp      ****         bit5 = PINC & 0b00010000; // capteur_droit
 326               		.stabn	68,0,92,.LM27-.LFBB5
 327               	.LM27:
 328 00d0 86B1      		in r24,0x6
 329 00d2 8295      		swap r24
 330 00d4 8170      		andi r24,1
 331 00d6 8093 0000 		sts bit5,r24
 332 00da 0895      		ret
 333               		.size	_Z13lireDirectionv, .-_Z13lireDirectionv
 334               	.Lscope5:
 335               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 336               		.stabd	78,0,0
 337               		.stabs	"_Z17faireIntersectionv:F(0,4)",36,0,96,_Z17faireIntersectionv
 338               	.global	_Z17faireIntersectionv
 339               		.type	_Z17faireIntersectionv, @function
 340               	_Z17faireIntersectionv:
 341               		.stabd	46,0,0
  93:main.cpp      **** }
  94:main.cpp      **** 
  95:main.cpp      **** 
  96:main.cpp      **** void faireIntersection()
  97:main.cpp      **** {
 342               		.stabn	68,0,97,.LM28-.LFBB6
 343               	.LM28:
 344               	.LFBB6:
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
  98:main.cpp      ****     if (directions[compteur] == 'd')
 349               		.stabn	68,0,98,.LM29-.LFBB6
 350               	.LM29:
 351 00dc E091 0000 		lds r30,compteur
 352 00e0 F0E0      		ldi r31,0
 353 00e2 E050      		subi r30,lo8(-(directions))
 354 00e4 F040      		sbci r31,hi8(-(directions))
 355 00e6 8081      		ld r24,Z
 356 00e8 8436      		cpi r24,lo8(100)
 357 00ea 01F0      		breq .+2
 358 00ec 00C0      		rjmp .L17
GAS LISTING /tmp/cccXD99i.s 			page 9


  99:main.cpp      ****     {
 100:main.cpp      **** 		moteur.pivotDroit(150);
 359               		.stabn	68,0,100,.LM30-.LFBB6
 360               	.LM30:
 361 00ee 66E9      		ldi r22,lo8(-106)
 362 00f0 70E0      		ldi r23,0
 363 00f2 80E0      		ldi r24,lo8(moteur)
 364 00f4 90E0      		ldi r25,hi8(moteur)
 365 00f6 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 366               	.LBB34:
 367               	.LBB35:
 368               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext1
 369               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
GAS LISTING /tmp/cccXD99i.s 			page 10


  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
GAS LISTING /tmp/cccXD99i.s 			page 11


 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/avr/include/util/delay.h **** 
 156:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/avr/include/util/delay.h **** 
GAS LISTING /tmp/cccXD99i.s 			page 12


 159:/usr/avr/include/util/delay.h **** 	#else
 160:/usr/avr/include/util/delay.h **** 		//round up by default
 161:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/avr/include/util/delay.h **** 	#endif
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 370               		.stabn	68,0,164,.LM31-.LFBB6
 371               	.LM31:
 372 00fa 2FEF      		ldi r18,lo8(799999)
 373 00fc 84E3      		ldi r24,hi8(799999)
 374 00fe 9CE0      		ldi r25,hlo8(799999)
 375 0100 2150      		1: subi r18,1
 376 0102 8040      		sbci r24,0
 377 0104 9040      		sbci r25,0
 378 0106 01F4      		brne 1b
 379 0108 00C0      		rjmp .
 380 010a 0000      		nop
 381               	.LBE35:
 382               	.LBE34:
 383               		.stabs	"main.cpp",132,0,0,.Ltext2
 384               	.Ltext2:
 101:main.cpp      **** 		_delay_ms(500);
 102:main.cpp      **** 		moteur.Avance(150);
 385               		.stabn	68,0,102,.LM32-.LFBB6
 386               	.LM32:
 387 010c 66E9      		ldi r22,lo8(-106)
 388 010e 70E0      		ldi r23,0
 389 0110 80E0      		ldi r24,lo8(moteur)
 390 0112 90E0      		ldi r25,hi8(moteur)
 391 0114 0E94 0000 		call _ZN3Pwm6AvanceEj
 392               	.L18:
 103:main.cpp      **** 		while(!(bit1 || bit2 || bit3))
 393               		.stabn	68,0,103,.LM33-.LFBB6
 394               	.LM33:
 395 0118 8091 0000 		lds r24,bit1
 396 011c 8111      		cpse r24,__zero_reg__
 397 011e 00C0      		rjmp .L42
 398               		.stabn	68,0,103,.LM34-.LFBB6
 399               	.LM34:
 400 0120 8091 0000 		lds r24,bit2
 401 0124 8111      		cpse r24,__zero_reg__
 402 0126 00C0      		rjmp .L42
 403               		.stabn	68,0,103,.LM35-.LFBB6
 404               	.LM35:
 405 0128 8091 0000 		lds r24,bit3
 406 012c 8111      		cpse r24,__zero_reg__
 407 012e 00C0      		rjmp .L42
 104:main.cpp      **** 				lireDirection();	
 408               		.stabn	68,0,104,.LM36-.LFBB6
 409               	.LM36:
 410 0130 0E94 0000 		call _Z13lireDirectionv
 411 0134 00C0      		rjmp .L18
 412               	.L27:
 105:main.cpp      ****     
 106:main.cpp      **** 		while(!bit5)
 107:main.cpp      **** 		{
 108:main.cpp      **** 			lireDirection();
GAS LISTING /tmp/cccXD99i.s 			page 13


 413               		.stabn	68,0,108,.LM37-.LFBB6
 414               	.LM37:
 415 0136 0E94 0000 		call _Z13lireDirectionv
 109:main.cpp      **** 			if(!bit1 && bit2 && !bit3)	// 0 1 0 X X
 416               		.stabn	68,0,109,.LM38-.LFBB6
 417               	.LM38:
 418 013a 9091 0000 		lds r25,bit1
 419 013e 8091 0000 		lds r24,bit2
 420 0142 9111      		cpse r25,__zero_reg__
 421 0144 00C0      		rjmp .L21
 422               		.stabn	68,0,109,.LM39-.LFBB6
 423               	.LM39:
 424 0146 8823      		tst r24
 425 0148 01F0      		breq .L22
 426               	.L24:
 110:main.cpp      **** 				moteur.Avance(150);
 427               		.stabn	68,0,110,.LM40-.LFBB6
 428               	.LM40:
 429 014a 66E9      		ldi r22,lo8(-106)
 430 014c 70E0      		ldi r23,0
 431 014e 80E0      		ldi r24,lo8(moteur)
 432 0150 90E0      		ldi r25,hi8(moteur)
 433 0152 0E94 0000 		call _ZN3Pwm6AvanceEj
 434               	.L42:
 106:main.cpp      **** 		{
 435               		.stabn	68,0,106,.LM41-.LFBB6
 436               	.LM41:
 437 0156 8091 0000 		lds r24,bit5
 438 015a 8823      		tst r24
 439 015c 01F0      		breq .L27
 440 015e 00C0      		rjmp .L28
 441               	.L21:
 111:main.cpp      **** 
 112:main.cpp      **** 			else if (bit1 && !bit2 && !bit3) // 1 0 0 X X
 442               		.stabn	68,0,112,.LM42-.LFBB6
 443               	.LM42:
 444 0160 8111      		cpse r24,__zero_reg__
 445 0162 00C0      		rjmp .L24
 446               		.stabn	68,0,112,.LM43-.LFBB6
 447               	.LM43:
 448 0164 8091 0000 		lds r24,bit3
 449 0168 8111      		cpse r24,__zero_reg__
 450 016a 00C0      		rjmp .L24
 113:main.cpp      **** 				moteur.pivotGauche(150);
 451               		.stabn	68,0,113,.LM44-.LFBB6
 452               	.LM44:
 453 016c 66E9      		ldi r22,lo8(-106)
 454 016e 70E0      		ldi r23,0
 455 0170 80E0      		ldi r24,lo8(moteur)
 456 0172 90E0      		ldi r25,hi8(moteur)
 457 0174 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 458 0178 00C0      		rjmp .L42
 459               	.L22:
 114:main.cpp      **** 
 115:main.cpp      **** 			else if (!bit1 && !bit2 && bit3) // 0 0 1 X X
 460               		.stabn	68,0,115,.LM45-.LFBB6
 461               	.LM45:
GAS LISTING /tmp/cccXD99i.s 			page 14


 462 017a 8091 0000 		lds r24,bit3
 463 017e 8823      		tst r24
 464 0180 01F0      		breq .L25
 465               	.L26:
 116:main.cpp      **** 				moteur.Tourner_Droite(150);
 466               		.stabn	68,0,116,.LM46-.LFBB6
 467               	.LM46:
 468 0182 66E9      		ldi r22,lo8(-106)
 469 0184 70E0      		ldi r23,0
 470 0186 80E0      		ldi r24,lo8(moteur)
 471 0188 90E0      		ldi r25,hi8(moteur)
 472 018a 0E94 0000 		call _ZN3Pwm14Tourner_DroiteEj
 473 018e 00C0      		rjmp .L42
 474               	.L25:
 117:main.cpp      **** 
 118:main.cpp      **** 			else if (!bit1 && !bit2 && !bit3 && bit4)
 475               		.stabn	68,0,118,.LM47-.LFBB6
 476               	.LM47:
 477 0190 8091 0000 		lds r24,bit4
 478 0194 8823      		tst r24
 479 0196 01F0      		breq .L24
 480 0198 00C0      		rjmp .L26
 481               	.L17:
 119:main.cpp      **** 				moteur.Tourner_Droite(150);	// 0 0 0 1 X
 120:main.cpp      **** 		
 121:main.cpp      **** 			else
 122:main.cpp      **** 				moteur.Avance(150);
 123:main.cpp      **** 		}          
 124:main.cpp      ****     }
 125:main.cpp      ****     
 126:main.cpp      ****     else if (directions[compteur] == 'g')
 482               		.stabn	68,0,126,.LM48-.LFBB6
 483               	.LM48:
 484 019a 8736      		cpi r24,lo8(103)
 485 019c 01F4      		brne .L28
 127:main.cpp      ****     {
 128:main.cpp      **** 		moteur.pivotGauche(150);
 486               		.stabn	68,0,128,.LM49-.LFBB6
 487               	.LM49:
 488 019e 66E9      		ldi r22,lo8(-106)
 489 01a0 70E0      		ldi r23,0
 490 01a2 80E0      		ldi r24,lo8(moteur)
 491 01a4 90E0      		ldi r25,hi8(moteur)
 492 01a6 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 493               	.LBB36:
 494               	.LBB37:
 495               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext3
 496               	.Ltext3:
 497               		.stabn	68,0,164,.LM50-.LFBB6
 498               	.LM50:
 499 01aa 2FEF      		ldi r18,lo8(959999)
 500 01ac 85EA      		ldi r24,hi8(959999)
 501 01ae 9EE0      		ldi r25,hlo8(959999)
 502 01b0 2150      		1: subi r18,1
 503 01b2 8040      		sbci r24,0
 504 01b4 9040      		sbci r25,0
 505 01b6 01F4      		brne 1b
GAS LISTING /tmp/cccXD99i.s 			page 15


 506 01b8 00C0      		rjmp .
 507 01ba 0000      		nop
 508               	.LBE37:
 509               	.LBE36:
 510               		.stabs	"main.cpp",132,0,0,.Ltext4
 511               	.Ltext4:
 129:main.cpp      **** 		_delay_ms(600);	
 130:main.cpp      **** 		moteur.Avance(150);
 512               		.stabn	68,0,130,.LM51-.LFBB6
 513               	.LM51:
 514 01bc 66E9      		ldi r22,lo8(-106)
 515 01be 70E0      		ldi r23,0
 516 01c0 80E0      		ldi r24,lo8(moteur)
 517 01c2 90E0      		ldi r25,hi8(moteur)
 518 01c4 0E94 0000 		call _ZN3Pwm6AvanceEj
 519               	.L29:
 131:main.cpp      **** 		while(!(bit3 || bit4 || bit5))
 520               		.stabn	68,0,131,.LM52-.LFBB6
 521               	.LM52:
 522 01c8 8091 0000 		lds r24,bit3
 523 01cc 8823      		tst r24
 524 01ce 01F0      		breq .L52
 525               	.L43:
 132:main.cpp      **** 		{
 133:main.cpp      **** 				lireDirection();			
 134:main.cpp      **** 		}	
 135:main.cpp      **** 	
 136:main.cpp      **** 		while(!bit1)
 526               		.stabn	68,0,136,.LM53-.LFBB6
 527               	.LM53:
 528 01d0 8091 0000 		lds r24,bit1
 529 01d4 8823      		tst r24
 530 01d6 01F0      		breq .L49
 531               	.L28:
 137:main.cpp      **** 		{
 138:main.cpp      **** 			lireDirection();
 139:main.cpp      **** 			if(!bit3 && bit4 && !bit5)	// X X 0 1 0
 140:main.cpp      **** 			moteur.Avance(150);
 141:main.cpp      **** 		
 142:main.cpp      ****                     else if (bit3 && !bit4 && !bit5) // X X 1 0 0
 143:main.cpp      **** 			moteur.Avance(150);
 144:main.cpp      **** 		
 145:main.cpp      ****                     else if (!bit3 && !bit4 && bit5) // X X 0 0 1
 146:main.cpp      **** 			moteur.pivotDroit(150);
 147:main.cpp      **** 
 148:main.cpp      ****                     else if (bit2 && !bit3 && !bit4 && !bit5)	// X 1 0 0 0
 149:main.cpp      **** 			moteur.Tourner_Gauche(160);
 150:main.cpp      **** 		
 151:main.cpp      ****                     else
 152:main.cpp      **** 			moteur.Avance(150);
 153:main.cpp      **** 		
 154:main.cpp      **** 		
 155:main.cpp      **** 		}
 156:main.cpp      **** 	
 157:main.cpp      ****                // if(!bit1 && !bit2 && bit3 && bit4 && bit5) //Pour la cloche ronde
 158:main.cpp      ****                //     moteur.Tourner_Gauche(150);
 159:main.cpp      **** 					
GAS LISTING /tmp/cccXD99i.s 			page 16


 160:main.cpp      ****     }
 161:main.cpp      ****     compteur++;
 532               		.stabn	68,0,161,.LM54-.LFBB6
 533               	.LM54:
 534 01d8 8091 0000 		lds r24,compteur
 535 01dc 8F5F      		subi r24,lo8(-(1))
 536 01de 8093 0000 		sts compteur,r24
 537 01e2 0895      		ret
 538               	.L52:
 131:main.cpp      **** 		{
 539               		.stabn	68,0,131,.LM55-.LFBB6
 540               	.LM55:
 541 01e4 8091 0000 		lds r24,bit4
 542 01e8 8111      		cpse r24,__zero_reg__
 543 01ea 00C0      		rjmp .L43
 131:main.cpp      **** 		{
 544               		.stabn	68,0,131,.LM56-.LFBB6
 545               	.LM56:
 546 01ec 8091 0000 		lds r24,bit5
 547 01f0 8111      		cpse r24,__zero_reg__
 548 01f2 00C0      		rjmp .L43
 133:main.cpp      **** 		}	
 549               		.stabn	68,0,133,.LM57-.LFBB6
 550               	.LM57:
 551 01f4 0E94 0000 		call _Z13lireDirectionv
 552 01f8 00C0      		rjmp .L29
 553               	.L49:
 138:main.cpp      **** 			if(!bit3 && bit4 && !bit5)	// X X 0 1 0
 554               		.stabn	68,0,138,.LM58-.LFBB6
 555               	.LM58:
 556 01fa 0E94 0000 		call _Z13lireDirectionv
 139:main.cpp      **** 			moteur.Avance(150);
 557               		.stabn	68,0,139,.LM59-.LFBB6
 558               	.LM59:
 559 01fe 9091 0000 		lds r25,bit3
 560 0202 8091 0000 		lds r24,bit4
 561 0206 9111      		cpse r25,__zero_reg__
 562 0208 00C0      		rjmp .L32
 563 020a 2091 0000 		lds r18,bit5
 139:main.cpp      **** 			moteur.Avance(150);
 564               		.stabn	68,0,139,.LM60-.LFBB6
 565               	.LM60:
 566 020e 8823      		tst r24
 567 0210 01F0      		breq .L33
 568               	.L51:
 139:main.cpp      **** 			moteur.Avance(150);
 569               		.stabn	68,0,139,.LM61-.LFBB6
 570               	.LM61:
 571 0212 2111      		cpse r18,__zero_reg__
 572 0214 00C0      		rjmp .L34
 573               	.L36:
 140:main.cpp      **** 		
 574               		.stabn	68,0,140,.LM62-.LFBB6
 575               	.LM62:
 576 0216 66E9      		ldi r22,lo8(-106)
 577 0218 70E0      		ldi r23,0
 578 021a 80E0      		ldi r24,lo8(moteur)
GAS LISTING /tmp/cccXD99i.s 			page 17


 579 021c 90E0      		ldi r25,hi8(moteur)
 580 021e 0E94 0000 		call _ZN3Pwm6AvanceEj
 581 0222 00C0      		rjmp .L43
 582               	.L32:
 142:main.cpp      **** 			moteur.Avance(150);
 583               		.stabn	68,0,142,.LM63-.LFBB6
 584               	.LM63:
 585 0224 8111      		cpse r24,__zero_reg__
 586 0226 00C0      		rjmp .L34
 142:main.cpp      **** 			moteur.Avance(150);
 587               		.stabn	68,0,142,.LM64-.LFBB6
 588               	.LM64:
 589 0228 2091 0000 		lds r18,bit5
 590 022c 00C0      		rjmp .L51
 591               	.L33:
 145:main.cpp      **** 			moteur.pivotDroit(150);
 592               		.stabn	68,0,145,.LM65-.LFBB6
 593               	.LM65:
 594 022e 2223      		tst r18
 595 0230 01F0      		breq .L34
 146:main.cpp      **** 
 596               		.stabn	68,0,146,.LM66-.LFBB6
 597               	.LM66:
 598 0232 66E9      		ldi r22,lo8(-106)
 599 0234 70E0      		ldi r23,0
 600 0236 80E0      		ldi r24,lo8(moteur)
 601 0238 90E0      		ldi r25,hi8(moteur)
 602 023a 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 603 023e 00C0      		rjmp .L43
 604               	.L34:
 148:main.cpp      **** 			moteur.Tourner_Gauche(160);
 605               		.stabn	68,0,148,.LM67-.LFBB6
 606               	.LM67:
 607 0240 2091 0000 		lds r18,bit2
 608 0244 2223      		tst r18
 609 0246 01F0      		breq .L36
 148:main.cpp      **** 			moteur.Tourner_Gauche(160);
 610               		.stabn	68,0,148,.LM68-.LFBB6
 611               	.LM68:
 612 0248 9111      		cpse r25,__zero_reg__
 613 024a 00C0      		rjmp .L36
 148:main.cpp      **** 			moteur.Tourner_Gauche(160);
 614               		.stabn	68,0,148,.LM69-.LFBB6
 615               	.LM69:
 616 024c 8111      		cpse r24,__zero_reg__
 617 024e 00C0      		rjmp .L36
 148:main.cpp      **** 			moteur.Tourner_Gauche(160);
 618               		.stabn	68,0,148,.LM70-.LFBB6
 619               	.LM70:
 620 0250 8091 0000 		lds r24,bit5
 621 0254 8111      		cpse r24,__zero_reg__
 622 0256 00C0      		rjmp .L36
 149:main.cpp      **** 		
 623               		.stabn	68,0,149,.LM71-.LFBB6
 624               	.LM71:
 625 0258 60EA      		ldi r22,lo8(-96)
 626 025a 70E0      		ldi r23,0
GAS LISTING /tmp/cccXD99i.s 			page 18


 627 025c 80E0      		ldi r24,lo8(moteur)
 628 025e 90E0      		ldi r25,hi8(moteur)
 629 0260 0E94 0000 		call _ZN3Pwm14Tourner_GaucheEj
 630 0264 00C0      		rjmp .L43
 631               		.size	_Z17faireIntersectionv, .-_Z17faireIntersectionv
 632               	.Lscope6:
 633               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 634               		.stabd	78,0,0
 635               		.stabs	"_Z25faireIntersectionTrianglev:F(0,4)",36,0,165,_Z25faireIntersectionTrianglev
 636               	.global	_Z25faireIntersectionTrianglev
 637               		.type	_Z25faireIntersectionTrianglev, @function
 638               	_Z25faireIntersectionTrianglev:
 639               		.stabd	46,0,0
 162:main.cpp      ****     
 163:main.cpp      **** }
 164:main.cpp      **** 
 165:main.cpp      **** void faireIntersectionTriangle()
 166:main.cpp      **** {
 640               		.stabn	68,0,166,.LM72-.LFBB7
 641               	.LM72:
 642               	.LFBB7:
 643               	/* prologue: function */
 644               	/* frame size = 0 */
 645               	/* stack size = 0 */
 646               	.L__stack_usage = 0
 647 0266 0895      		ret
 648               		.size	_Z25faireIntersectionTrianglev, .-_Z25faireIntersectionTrianglev
 649               	.Lscope7:
 650               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 651               		.stabd	78,0,0
 652               		.stabs	"_Z11suivreLignev:F(0,4)",36,0,247,_Z11suivreLignev
 653               	.global	_Z11suivreLignev
 654               		.type	_Z11suivreLignev, @function
 655               	_Z11suivreLignev:
 656               		.stabd	46,0,0
 167:main.cpp      ****     /*
 168:main.cpp      ****     if (directions[compteur] == 'd')
 169:main.cpp      ****     {
 170:main.cpp      ****        moteur.pivotDroit(150);
 171:main.cpp      ****        _delay_ms(500);
 172:main.cpp      ****         lireDirection();
 173:main.cpp      ****         
 174:main.cpp      ****         while(!bit3)
 175:main.cpp      ****         {
 176:main.cpp      ****            lireDirection();
 177:main.cpp      ****            moteur.pivotGauche(150);
 178:main.cpp      ****         }
 179:main.cpp      ****         while(bit1 || bit2 || bit3 || bit4 || bit5)
 180:main.cpp      ****         {
 181:main.cpp      **** 		lireDirection();
 182:main.cpp      **** 		if(!bit3 && bit4 && !bit5)	// X X 0 1 0
 183:main.cpp      ****                     moteur.Avance(150);
 184:main.cpp      **** 		
 185:main.cpp      ****                 else if (bit3 && !bit4 && !bit5) // X X 1 0 0
 186:main.cpp      ****                     moteur.Avance(150);
 187:main.cpp      **** 		
 188:main.cpp      ****                 else if (!bit3 && !bit4 && bit5) // X X 0 0 1
GAS LISTING /tmp/cccXD99i.s 			page 19


 189:main.cpp      ****                     moteur.pivotDroit(150);
 190:main.cpp      **** 
 191:main.cpp      ****                 else if (bit2 && !bit3 && !bit4 && !bit5)	// X 1 0 0 0
 192:main.cpp      ****                     moteur.Tourner_Gauche(160);
 193:main.cpp      **** 		
 194:main.cpp      ****                 else
 195:main.cpp      ****                     moteur.Avance(150);
 196:main.cpp      ****         }
 197:main.cpp      ****         while(!bit1)
 198:main.cpp      ****         {
 199:main.cpp      ****             lireDirection();
 200:main.cpp      ****             moteur.Tourner_Gauche(150);
 201:main.cpp      ****         }
 202:main.cpp      ****         
 203:main.cpp      ****         
 204:main.cpp      ****                                             
 205:main.cpp      ****     }
 206:main.cpp      ****     else if (directions[compteur] == 'g')
 207:main.cpp      ****     {
 208:main.cpp      ****         moteur.pivotGAUCHE(150);
 209:main.cpp      ****        _delay_ms(500);
 210:main.cpp      ****         lireDirection();
 211:main.cpp      ****         
 212:main.cpp      ****                    
 213:main.cpp      ****         while(!bit3)
 214:main.cpp      ****         {
 215:main.cpp      ****            lireDirection();
 216:main.cpp      ****             moteur.Tourner_Droite(170);
 217:main.cpp      ****         }
 218:main.cpp      ****         while(bit1 || bit2 || bit3 || bit4 || bit5)
 219:main.cpp      **** 	{
 220:main.cpp      **** 		lireDirection();
 221:main.cpp      **** 		if(!bit1 && bit2 && !bit3)	// 0 1 0 X X
 222:main.cpp      **** 			moteur.Avance(150);
 223:main.cpp      **** 
 224:main.cpp      **** 		else if (bit1 && !bit2 && !bit3) // 1 0 0 X X
 225:main.cpp      **** 			moteur.pivotGauche(150);
 226:main.cpp      **** 
 227:main.cpp      **** 		else if (!bit1 && !bit2 && bit3) // 0 0 1 X X
 228:main.cpp      **** 			moteur.Tourner_Droite(150);
 229:main.cpp      **** 
 230:main.cpp      **** 		else if (!bit1 && !bit2 && !bit3 && bit4)
 231:main.cpp      **** 			moteur.Tourner_Droite(150);	// 0 0 0 1 X
 232:main.cpp      **** 		
 233:main.cpp      **** 		else
 234:main.cpp      **** 			moteur.Avance(150);
 235:main.cpp      **** 	}
 236:main.cpp      **** 	while(!bit5)
 237:main.cpp      ****         {
 238:main.cpp      ****             lireDirection();
 239:main.cpp      ****             moteur.Tourner_Droite(150);
 240:main.cpp      ****         }
 241:main.cpp      ****    
 242:main.cpp      ****     }               
 243:main.cpp      ****     compteur++;
 244:main.cpp      ****     */
 245:main.cpp      **** }
GAS LISTING /tmp/cccXD99i.s 			page 20


 246:main.cpp      **** 
 247:main.cpp      **** void suivreLigne()
 248:main.cpp      **** {
 657               		.stabn	68,0,248,.LM73-.LFBB8
 658               	.LM73:
 659               	.LFBB8:
 660               	/* prologue: function */
 661               	/* frame size = 0 */
 662               	/* stack size = 0 */
 663               	.L__stack_usage = 0
 249:main.cpp      ****     if(bit1 && bit2 && bit3 && bit4 && bit5) // 1 1 1 1 1
 664               		.stabn	68,0,249,.LM74-.LFBB8
 665               	.LM74:
 666 0268 2091 0000 		lds r18,bit1
 667 026c 9091 0000 		lds r25,bit2
 668 0270 8091 0000 		lds r24,bit3
 669 0274 2223      		tst r18
 670 0276 01F0      		breq .L55
 671               		.stabn	68,0,249,.LM75-.LFBB8
 672               	.LM75:
 673 0278 9923      		tst r25
 674 027a 01F4      		brne .+2
 675 027c 00C0      		rjmp .L56
 676               		.stabn	68,0,249,.LM76-.LFBB8
 677               	.LM76:
 678 027e 8823      		tst r24
 679 0280 01F4      		brne .+2
 680 0282 00C0      		rjmp .L122
 681               		.stabn	68,0,249,.LM77-.LFBB8
 682               	.LM77:
 683 0284 9091 0000 		lds r25,bit4
 684 0288 9923      		tst r25
 685 028a 01F4      		brne .+2
 686 028c 00C0      		rjmp .L57
 687               		.stabn	68,0,249,.LM78-.LFBB8
 688               	.LM78:
 689 028e 9091 0000 		lds r25,bit5
 690 0292 9923      		tst r25
 691 0294 01F4      		brne .+2
 692 0296 00C0      		rjmp .L57
 693               	.L124:
 250:main.cpp      ****     {
 251:main.cpp      **** 		while(bit1 && bit5)
 694               		.stabn	68,0,251,.LM79-.LFBB8
 695               	.LM79:
 696 0298 8091 0000 		lds r24,bit1
 697 029c 8823      		tst r24
 698 029e 01F0      		breq .L59
 699               		.stabn	68,0,251,.LM80-.LFBB8
 700               	.LM80:
 701 02a0 8091 0000 		lds r24,bit5
 702 02a4 8823      		tst r24
 703 02a6 01F0      		breq .L63
 252:main.cpp      **** 		{
 253:main.cpp      **** 			lireDirection();
 704               		.stabn	68,0,253,.LM81-.LFBB8
 705               	.LM81:
GAS LISTING /tmp/cccXD99i.s 			page 21


 706 02a8 0E94 0000 		call _Z13lireDirectionv
 254:main.cpp      **** 			moteur.Avance(150);
 707               		.stabn	68,0,254,.LM82-.LFBB8
 708               	.LM82:
 709 02ac 66E9      		ldi r22,lo8(-106)
 710 02ae 70E0      		ldi r23,0
 711 02b0 80E0      		ldi r24,lo8(moteur)
 712 02b2 90E0      		ldi r25,hi8(moteur)
 713 02b4 0E94 0000 		call _ZN3Pwm6AvanceEj
 714 02b8 00C0      		rjmp .L124
 715               	.L59:
 255:main.cpp      **** 		}
 256:main.cpp      **** 		
 257:main.cpp      **** 		if(!bit1 && !bit2 && !bit3 && !bit4 && !bit5)
 716               		.stabn	68,0,257,.LM83-.LFBB8
 717               	.LM83:
 718 02ba 8091 0000 		lds r24,bit2
 719 02be 8111      		cpse r24,__zero_reg__
 720 02c0 00C0      		rjmp .L63
 721               		.stabn	68,0,257,.LM84-.LFBB8
 722               	.LM84:
 723 02c2 8091 0000 		lds r24,bit3
 724 02c6 8823      		tst r24
 725 02c8 01F4      		brne .+2
 726 02ca 00C0      		rjmp .L152
 727               	.L63:
 258:main.cpp      **** 		{
 259:main.cpp      **** 			while(!bit3)
 260:main.cpp      **** 			{
 261:main.cpp      **** 				lireDirection();
 262:main.cpp      **** 				moteur.pivotDroit(150);
 263:main.cpp      **** 			}
 264:main.cpp      **** 		}
 265:main.cpp      **** 			
 266:main.cpp      **** 		if(compteur >= 3)
 728               		.stabn	68,0,266,.LM85-.LFBB8
 729               	.LM85:
 730 02cc 8091 0000 		lds r24,compteur
 731 02d0 8330      		cpi r24,lo8(3)
 732 02d2 00F0      		brlo .L62
 267:main.cpp      ****                 {
 268:main.cpp      **** 			moteur.Avance(0);
 733               		.stabn	68,0,268,.LM86-.LFBB8
 734               	.LM86:
 735 02d4 60E0      		ldi r22,0
 736 02d6 70E0      		ldi r23,0
 737 02d8 80E0      		ldi r24,lo8(moteur)
 738 02da 90E0      		ldi r25,hi8(moteur)
 739 02dc 0E94 0000 		call _ZN3Pwm6AvanceEj
 740               	.L66:
 266:main.cpp      ****                 {
 741               		.stabn	68,0,266,.LM87-.LFBB8
 742               	.LM87:
 743 02e0 00C0      		rjmp .L66
 744               	.L55:
 269:main.cpp      ****                         while(true)
 270:main.cpp      **** 			{}
GAS LISTING /tmp/cccXD99i.s 			page 22


 271:main.cpp      ****                 }
 272:main.cpp      ****                 else
 273:main.cpp      ****                     moteur.Avance(150);
 274:main.cpp      ****     }
 275:main.cpp      ****     else if(bit1 && bit2 && !bit3 && !bit4 && !bit5) // 1 1 0 0 0
 276:main.cpp      ****         {
 277:main.cpp      ****             moteur.Tourner_Gauche(150);
 278:main.cpp      ****         }
 279:main.cpp      ****         else if(bit1 && !bit2 && !bit3 && !bit4 && !bit5) //1 0 0 0 0
 280:main.cpp      ****         {
 281:main.cpp      ****             moteur.pivotGauche(150);
 282:main.cpp      ****         }
 283:main.cpp      ****         else if(!bit1 && bit2 && !bit3 && !bit4 && !bit5) // 0 1 0 0 0
 745               		.stabn	68,0,283,.LM88-.LFBB8
 746               	.LM88:
 747 02e2 9111      		cpse r25,__zero_reg__
 748 02e4 00C0      		rjmp .L153
 749               	.L69:
 284:main.cpp      ****         {
 285:main.cpp      ****             moteur.Tourner_Gauche(150);
 286:main.cpp      ****         }
 287:main.cpp      ****         else if((!(bit1) && !(bit2) && bit3 && bit4 && bit5) || ( !bit1 && bit2 && bit3 && bit4 && 
 750               		.stabn	68,0,287,.LM89-.LFBB8
 751               	.LM89:
 752 02e6 8823      		tst r24
 753 02e8 01F4      		brne .+2
 754 02ea 00C0      		rjmp .L71
 755               		.stabn	68,0,287,.LM90-.LFBB8
 756               	.LM90:
 757 02ec 2091 0000 		lds r18,bit4
 758 02f0 2111      		cpse r18,__zero_reg__
 759 02f2 00C0      		rjmp .L154
 760               	.L72:
 288:main.cpp      ****         {
 289:main.cpp      ****            moteur.Avance(150);
 290:main.cpp      ****            _delay_ms(700);
 291:main.cpp      ****            lireDirection();
 292:main.cpp      ****            
 293:main.cpp      ****            if (bit1 || bit2 || bit3 || bit4 || bit5)	//Si tu vois la ligne, continue
 294:main.cpp      ****            {
 295:main.cpp      **** 		nbCarre++;
 296:main.cpp      **** 		if(nbCarre == 3)
 297:main.cpp      **** 		{
 298:main.cpp      **** 			moteur.pivotDroit(150);
 299:main.cpp      **** 			_delay_ms(1000);
 300:main.cpp      **** 			while(!bit3)
 301:main.cpp      ****                         {
 302:main.cpp      ****                             moteur.pivotDroit(150);
 303:main.cpp      ****                             lireDirection();
 304:main.cpp      ****                         }
 305:main.cpp      **** 		}
 306:main.cpp      **** 				
 307:main.cpp      ****             }
 308:main.cpp      ****             else 		//Si tu vois rien, tourne le coin
 309:main.cpp      ****             {
 310:main.cpp      ****                
 311:main.cpp      ****                 while(!bit3)
GAS LISTING /tmp/cccXD99i.s 			page 23


 312:main.cpp      ****                 {
 313:main.cpp      ****                     moteur.pivotDroit(150);
 314:main.cpp      ****                     lireDirection();
 315:main.cpp      ****                 }
 316:main.cpp      ****             }
 317:main.cpp      ****         }
 318:main.cpp      ****         else if(bit1 && bit2 && bit3 && !(bit4) && !(bit5)) // 1 1 1 0 0
 319:main.cpp      ****         {
 320:main.cpp      ****             moteur.pivotGauche(150);
 321:main.cpp      ****            _delay_ms(100);
 322:main.cpp      ****         }
 323:main.cpp      ****         else if (!bit1 && !bit2 && !bit3 && !bit4 && bit5) //0 0 0 0 1
 761               		.stabn	68,0,323,.LM91-.LFBB8
 762               	.LM91:
 763 02f4 9111      		cpse r25,__zero_reg__
 764 02f6 00C0      		rjmp .L89
 324:main.cpp      ****         {
 325:main.cpp      ****             moteur.pivotDroit(150);
 326:main.cpp      ****         }
 327:main.cpp      ****         else if (!bit1 && !bit2 && !bit3 && bit4 && bit5) //0 0 0 1 1
 328:main.cpp      ****         {
 329:main.cpp      ****             moteur.Tourner_Droite(150);
 330:main.cpp      ****         }
 331:main.cpp      ****         else if (!bit1 && !bit2 && !bit3 && bit4 && !(bit5)) // 0 0 0 1 0
 332:main.cpp      ****         {
 333:main.cpp      ****             moteur.Tourner_Droite(150);
 334:main.cpp      ****         }
 335:main.cpp      ****         
 336:main.cpp      **** 	else if (!(bit1) && !(bit2) && bit3 && !bit4 && !bit5) // 0 0 1 0 0
 765               		.stabn	68,0,336,.LM92-.LFBB8
 766               	.LM92:
 767 02f8 8091 0000 		lds r24,bit5
 768 02fc 2111      		cpse r18,__zero_reg__
 769 02fe 00C0      		rjmp .L142
 770               		.stabn	68,0,336,.LM93-.LFBB8
 771               	.LM93:
 772 0300 8111      		cpse r24,__zero_reg__
 773 0302 00C0      		rjmp .L68
 774               	.L62:
 273:main.cpp      ****     }
 775               		.stabn	68,0,273,.LM94-.LFBB8
 776               	.LM94:
 777 0304 66E9      		ldi r22,lo8(-106)
 778 0306 70E0      		ldi r23,0
 779 0308 80E0      		ldi r24,lo8(moteur)
 780 030a 90E0      		ldi r25,hi8(moteur)
 781 030c 0C94 0000 		jmp _ZN3Pwm6AvanceEj
 782               	.L57:
 275:main.cpp      ****         {
 783               		.stabn	68,0,275,.LM95-.LFBB8
 784               	.LM95:
 785 0310 8111      		cpse r24,__zero_reg__
 786 0312 00C0      		rjmp .L140
 787               	.L122:
 275:main.cpp      ****         {
 788               		.stabn	68,0,275,.LM96-.LFBB8
 789               	.LM96:
GAS LISTING /tmp/cccXD99i.s 			page 24


 790 0314 8091 0000 		lds r24,bit4
 791 0318 8111      		cpse r24,__zero_reg__
 792 031a 00C0      		rjmp .L68
 793               	.L151:
 275:main.cpp      ****         {
 794               		.stabn	68,0,275,.LM97-.LFBB8
 795               	.LM97:
 796 031c 8091 0000 		lds r24,bit5
 797 0320 8111      		cpse r24,__zero_reg__
 798 0322 00C0      		rjmp .L68
 799               	.L70:
 277:main.cpp      ****         }
 800               		.stabn	68,0,277,.LM98-.LFBB8
 801               	.LM98:
 802 0324 66E9      		ldi r22,lo8(-106)
 803 0326 70E0      		ldi r23,0
 804 0328 80E0      		ldi r24,lo8(moteur)
 805 032a 90E0      		ldi r25,hi8(moteur)
 806 032c 0C94 0000 		jmp _ZN3Pwm14Tourner_GaucheEj
 807               	.L56:
 279:main.cpp      ****         {
 808               		.stabn	68,0,279,.LM99-.LFBB8
 809               	.LM99:
 810 0330 8111      		cpse r24,__zero_reg__
 811 0332 00C0      		rjmp .L68
 279:main.cpp      ****         {
 812               		.stabn	68,0,279,.LM100-.LFBB8
 813               	.LM100:
 814 0334 8091 0000 		lds r24,bit4
 815 0338 8111      		cpse r24,__zero_reg__
 816 033a 00C0      		rjmp .L68
 279:main.cpp      ****         {
 817               		.stabn	68,0,279,.LM101-.LFBB8
 818               	.LM101:
 819 033c 8091 0000 		lds r24,bit5
 820 0340 8111      		cpse r24,__zero_reg__
 821 0342 00C0      		rjmp .L68
 281:main.cpp      ****         }
 822               		.stabn	68,0,281,.LM102-.LFBB8
 823               	.LM102:
 824 0344 66E9      		ldi r22,lo8(-106)
 825 0346 70E0      		ldi r23,0
 826 0348 80E0      		ldi r24,lo8(moteur)
 827 034a 90E0      		ldi r25,hi8(moteur)
 828 034c 0C94 0000 		jmp _ZN3Pwm11pivotGaucheEj
 829               	.L153:
 283:main.cpp      ****         {
 830               		.stabn	68,0,283,.LM103-.LFBB8
 831               	.LM103:
 832 0350 8111      		cpse r24,__zero_reg__
 833 0352 00C0      		rjmp .L69
 283:main.cpp      ****         {
 834               		.stabn	68,0,283,.LM104-.LFBB8
 835               	.LM104:
 836 0354 8091 0000 		lds r24,bit4
 837 0358 8111      		cpse r24,__zero_reg__
 838 035a 00C0      		rjmp .L71
GAS LISTING /tmp/cccXD99i.s 			page 25


 283:main.cpp      ****         {
 839               		.stabn	68,0,283,.LM105-.LFBB8
 840               	.LM105:
 841 035c 8091 0000 		lds r24,bit5
 842 0360 8111      		cpse r24,__zero_reg__
 843 0362 00C0      		rjmp .L71
 844 0364 00C0      		rjmp .L70
 845               	.L154:
 287:main.cpp      ****         {
 846               		.stabn	68,0,287,.LM106-.LFBB8
 847               	.LM106:
 848 0366 3091 0000 		lds r19,bit5
 849 036a 3323      		tst r19
 850 036c 01F4      		brne .+2
 851 036e 00C0      		rjmp .L72
 289:main.cpp      ****            _delay_ms(700);
 852               		.stabn	68,0,289,.LM107-.LFBB8
 853               	.LM107:
 854 0370 66E9      		ldi r22,lo8(-106)
 855 0372 70E0      		ldi r23,0
 856 0374 80E0      		ldi r24,lo8(moteur)
 857 0376 90E0      		ldi r25,hi8(moteur)
 858 0378 0E94 0000 		call _ZN3Pwm6AvanceEj
 859               	.LBB38:
 860               	.LBB39:
 861               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext5
 862               	.Ltext5:
 863               		.stabn	68,0,164,.LM108-.LFBB8
 864               	.LM108:
 865 037c 2FEF      		ldi r18,lo8(1119999)
 866 037e 86E1      		ldi r24,hi8(1119999)
 867 0380 91E1      		ldi r25,hlo8(1119999)
 868 0382 2150      		1: subi r18,1
 869 0384 8040      		sbci r24,0
 870 0386 9040      		sbci r25,0
 871 0388 01F4      		brne 1b
 872 038a 00C0      		rjmp .
 873 038c 0000      		nop
 874               	.LBE39:
 875               	.LBE38:
 876               		.stabs	"main.cpp",132,0,0,.Ltext6
 877               	.Ltext6:
 291:main.cpp      ****            
 878               		.stabn	68,0,291,.LM109-.LFBB8
 879               	.LM109:
 880 038e 0E94 0000 		call _Z13lireDirectionv
 293:main.cpp      ****            {
 881               		.stabn	68,0,293,.LM110-.LFBB8
 882               	.LM110:
 883 0392 8091 0000 		lds r24,bit1
 884 0396 8111      		cpse r24,__zero_reg__
 885 0398 00C0      		rjmp .L73
 293:main.cpp      ****            {
 886               		.stabn	68,0,293,.LM111-.LFBB8
 887               	.LM111:
 888 039a 8091 0000 		lds r24,bit2
 889 039e 8111      		cpse r24,__zero_reg__
GAS LISTING /tmp/cccXD99i.s 			page 26


 890 03a0 00C0      		rjmp .L73
 293:main.cpp      ****            {
 891               		.stabn	68,0,293,.LM112-.LFBB8
 892               	.LM112:
 893 03a2 8091 0000 		lds r24,bit3
 894 03a6 8111      		cpse r24,__zero_reg__
 895 03a8 00C0      		rjmp .L73
 293:main.cpp      ****            {
 896               		.stabn	68,0,293,.LM113-.LFBB8
 897               	.LM113:
 898 03aa 8091 0000 		lds r24,bit4
 899 03ae 8111      		cpse r24,__zero_reg__
 900 03b0 00C0      		rjmp .L73
 293:main.cpp      ****            {
 901               		.stabn	68,0,293,.LM114-.LFBB8
 902               	.LM114:
 903 03b2 8091 0000 		lds r24,bit5
 904 03b6 8823      		tst r24
 905 03b8 01F0      		breq .L74
 906               	.L73:
 295:main.cpp      **** 		if(nbCarre == 3)
 907               		.stabn	68,0,295,.LM115-.LFBB8
 908               	.LM115:
 909 03ba 8091 0000 		lds r24,nbCarre
 910 03be 8F5F      		subi r24,lo8(-(1))
 911 03c0 8093 0000 		sts nbCarre,r24
 296:main.cpp      **** 		{
 912               		.stabn	68,0,296,.LM116-.LFBB8
 913               	.LM116:
 914 03c4 8330      		cpi r24,lo8(3)
 915 03c6 01F0      		breq .+2
 916 03c8 00C0      		rjmp .L54
 298:main.cpp      **** 			_delay_ms(1000);
 917               		.stabn	68,0,298,.LM117-.LFBB8
 918               	.LM117:
 919 03ca 66E9      		ldi r22,lo8(-106)
 920 03cc 70E0      		ldi r23,0
 921 03ce 80E0      		ldi r24,lo8(moteur)
 922 03d0 90E0      		ldi r25,hi8(moteur)
 923 03d2 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 924               	.LBB40:
 925               	.LBB41:
 926               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext7
 927               	.Ltext7:
 928               		.stabn	68,0,164,.LM118-.LFBB8
 929               	.LM118:
 930 03d6 2FEF      		ldi r18,lo8(1599999)
 931 03d8 89E6      		ldi r24,hi8(1599999)
 932 03da 98E1      		ldi r25,hlo8(1599999)
 933 03dc 2150      		1: subi r18,1
 934 03de 8040      		sbci r24,0
 935 03e0 9040      		sbci r25,0
 936 03e2 01F4      		brne 1b
 937 03e4 00C0      		rjmp .
 938 03e6 0000      		nop
 939               	.L77:
 940               	.LBE41:
GAS LISTING /tmp/cccXD99i.s 			page 27


 941               	.LBE40:
 942               		.stabs	"main.cpp",132,0,0,.Ltext8
 943               	.Ltext8:
 300:main.cpp      ****                         {
 944               		.stabn	68,0,300,.LM119-.LFBB8
 945               	.LM119:
 946 03e8 8091 0000 		lds r24,bit3
 947 03ec 8111      		cpse r24,__zero_reg__
 948 03ee 00C0      		rjmp .L155
 302:main.cpp      ****                             lireDirection();
 949               		.stabn	68,0,302,.LM120-.LFBB8
 950               	.LM120:
 951 03f0 66E9      		ldi r22,lo8(-106)
 952 03f2 70E0      		ldi r23,0
 953 03f4 80E0      		ldi r24,lo8(moteur)
 954 03f6 90E0      		ldi r25,hi8(moteur)
 955 03f8 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 303:main.cpp      ****                         }
 956               		.stabn	68,0,303,.LM121-.LFBB8
 957               	.LM121:
 958 03fc 0E94 0000 		call _Z13lireDirectionv
 959 0400 00C0      		rjmp .L77
 960               	.L155:
 961 0402 0895      		ret
 962               	.L74:
 311:main.cpp      ****                 {
 963               		.stabn	68,0,311,.LM122-.LFBB8
 964               	.LM122:
 965 0404 8091 0000 		lds r24,bit3
 966 0408 8111      		cpse r24,__zero_reg__
 967 040a 00C0      		rjmp .L156
 313:main.cpp      ****                     lireDirection();
 968               		.stabn	68,0,313,.LM123-.LFBB8
 969               	.LM123:
 970 040c 66E9      		ldi r22,lo8(-106)
 971 040e 70E0      		ldi r23,0
 972 0410 80E0      		ldi r24,lo8(moteur)
 973 0412 90E0      		ldi r25,hi8(moteur)
 974 0414 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 314:main.cpp      ****                 }
 975               		.stabn	68,0,314,.LM124-.LFBB8
 976               	.LM124:
 977 0418 0E94 0000 		call _Z13lireDirectionv
 978 041c 00C0      		rjmp .L74
 979               	.L156:
 980 041e 0895      		ret
 981               	.L140:
 318:main.cpp      ****         {
 982               		.stabn	68,0,318,.LM125-.LFBB8
 983               	.LM125:
 984 0420 8091 0000 		lds r24,bit4
 985 0424 8111      		cpse r24,__zero_reg__
 986 0426 00C0      		rjmp .L68
 318:main.cpp      ****         {
 987               		.stabn	68,0,318,.LM126-.LFBB8
 988               	.LM126:
 989 0428 8091 0000 		lds r24,bit5
GAS LISTING /tmp/cccXD99i.s 			page 28


 990 042c 8111      		cpse r24,__zero_reg__
 991 042e 00C0      		rjmp .L68
 320:main.cpp      ****            _delay_ms(100);
 992               		.stabn	68,0,320,.LM127-.LFBB8
 993               	.LM127:
 994 0430 66E9      		ldi r22,lo8(-106)
 995 0432 70E0      		ldi r23,0
 996 0434 80E0      		ldi r24,lo8(moteur)
 997 0436 90E0      		ldi r25,hi8(moteur)
 998 0438 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 999               	.LBB42:
 1000               	.LBB43:
 1001               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext9
 1002               	.Ltext9:
 1003               		.stabn	68,0,164,.LM128-.LFBB8
 1004               	.LM128:
 1005 043c 2FEF      		ldi r18,lo8(159999)
 1006 043e 80E7      		ldi r24,hi8(159999)
 1007 0440 92E0      		ldi r25,hlo8(159999)
 1008 0442 2150      		1: subi r18,1
 1009 0444 8040      		sbci r24,0
 1010 0446 9040      		sbci r25,0
 1011 0448 01F4      		brne 1b
 1012 044a 00C0      		rjmp .
 1013 044c 0000      		nop
 1014 044e 0895      		ret
 1015               	.L89:
 1016               	.LBE43:
 1017               	.LBE42:
 1018               		.stabs	"main.cpp",132,0,0,.Ltext10
 1019               	.Ltext10:
 337:main.cpp      **** 	{
 338:main.cpp      **** 		moteur.Avance(150);
 339:main.cpp      **** 	}
 340:main.cpp      **** 	else if (!bit1 && bit2 && bit3 && !bit4 && !bit5) //0 1 1 0 0
 1020               		.stabn	68,0,340,.LM129-.LFBB8
 1021               	.LM129:
 1022 0450 8111      		cpse r24,__zero_reg__
 1023 0452 00C0      		rjmp .L157
 1024               	.L68:
 341:main.cpp      **** 	{
 342:main.cpp      **** 		moteur.Tourner_Gauche(150);
 343:main.cpp      **** 	}
 344:main.cpp      **** 	else if (!bit1 && !bit2 && bit3 && bit4 && !bit5) // 0 0 1 1 0
 345:main.cpp      **** 	{
 346:main.cpp      **** 		moteur.Tourner_Droite(150);
 347:main.cpp      **** 	}   
 348:main.cpp      ****         else if (!bit1 && !bit2 && !bit3 && !bit4 && !bit5)	// 0 0 0 0 0
 349:main.cpp      **** 	{
 350:main.cpp      **** 			moteur.Avance(150);
 351:main.cpp      **** 			_delay_ms(1000); // Peut-être à augmenter
 352:main.cpp      **** 			lireDirection();
 353:main.cpp      ****                         
 354:main.cpp      **** 			if (!bit1 && !bit2 && !bit3 && !bit4 && !bit5) // INTERSECTION
 355:main.cpp      **** 			{
 356:main.cpp      ****                             faireIntersection();
 357:main.cpp      **** 			}
GAS LISTING /tmp/cccXD99i.s 			page 29


 358:main.cpp      **** 			/*else // POINTILLÉS
 359:main.cpp      ****                         {
 360:main.cpp      ****                          
 361:main.cpp      **** 				if(petitSkip >= 2 && petitSkip < 7)
 362:main.cpp      ****                                 {
 363:main.cpp      **** 					faireSon(100); 
 364:main.cpp      ****                                 }
 365:main.cpp      ****                                 petitSkip++;  
 366:main.cpp      ****                             
 367:main.cpp      ****                         }*/
 368:main.cpp      **** 			
 369:main.cpp      ****         }
 370:main.cpp      ****         else if(!bit1 && bit2 && bit3 && bit4 && !bit5) // Essai pour gerer l'intersection en trian
 371:main.cpp      ****         {
 372:main.cpp      ****                 faireIntersectionTriangle();
 373:main.cpp      ****         }
 374:main.cpp      ****         
 375:main.cpp      ****         //////////TRY DEEZ SHIETS//////////////
 376:main.cpp      ****        /* else if(bit1 && bit2 && bit3 && bit4 && !bit5) // 1 1 1 1 0
 377:main.cpp      ****         {
 378:main.cpp      ****             moteur.pivotGauche(150);
 379:main.cpp      ****             _delay_ms(100);
 380:main.cpp      ****         }
 381:main.cpp      ****         else if(!bit1 && bit2 && bit3 && bit4 && bit5) // 0 1 1 1 1
 382:main.cpp      ****         {
 383:main.cpp      ****             moteur.pivotDroit(150);
 384:main.cpp      ****             _delay_ms(100);
 385:main.cpp      ****         }*/
 386:main.cpp      ****         else
 387:main.cpp      ****         {
 388:main.cpp      ****             del.allumerRouge(0);
 1025               		.stabn	68,0,388,.LM130-.LFBB8
 1026               	.LM130:
 1027 0454 60E0      		ldi r22,0
 1028 0456 80E0      		ldi r24,lo8(del)
 1029 0458 90E0      		ldi r25,hi8(del)
 1030 045a 0C94 0000 		jmp _ZN3Del12allumerRougeEh
 1031               	.L152:
 257:main.cpp      **** 		{
 1032               		.stabn	68,0,257,.LM131-.LFBB8
 1033               	.LM131:
 1034 045e 8091 0000 		lds r24,bit4
 1035 0462 8111      		cpse r24,__zero_reg__
 1036 0464 00C0      		rjmp .L63
 257:main.cpp      **** 		{
 1037               		.stabn	68,0,257,.LM132-.LFBB8
 1038               	.LM132:
 1039 0466 8091 0000 		lds r24,bit5
 1040 046a 8111      		cpse r24,__zero_reg__
 1041 046c 00C0      		rjmp .L63
 1042               	.L64:
 259:main.cpp      **** 			{
 1043               		.stabn	68,0,259,.LM133-.LFBB8
 1044               	.LM133:
 1045 046e 8091 0000 		lds r24,bit3
 1046 0472 8111      		cpse r24,__zero_reg__
 1047 0474 00C0      		rjmp .L63
GAS LISTING /tmp/cccXD99i.s 			page 30


 261:main.cpp      **** 				moteur.pivotDroit(150);
 1048               		.stabn	68,0,261,.LM134-.LFBB8
 1049               	.LM134:
 1050 0476 0E94 0000 		call _Z13lireDirectionv
 262:main.cpp      **** 			}
 1051               		.stabn	68,0,262,.LM135-.LFBB8
 1052               	.LM135:
 1053 047a 66E9      		ldi r22,lo8(-106)
 1054 047c 70E0      		ldi r23,0
 1055 047e 80E0      		ldi r24,lo8(moteur)
 1056 0480 90E0      		ldi r25,hi8(moteur)
 1057 0482 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 1058 0486 00C0      		rjmp .L64
 1059               	.L71:
 323:main.cpp      ****         {
 1060               		.stabn	68,0,323,.LM136-.LFBB8
 1061               	.LM136:
 1062 0488 9111      		cpse r25,__zero_reg__
 1063 048a 00C0      		rjmp .L68
 323:main.cpp      ****         {
 1064               		.stabn	68,0,323,.LM137-.LFBB8
 1065               	.LM137:
 1066 048c 8091 0000 		lds r24,bit4
 1067 0490 8111      		cpse r24,__zero_reg__
 1068 0492 00C0      		rjmp .L84
 323:main.cpp      ****         {
 1069               		.stabn	68,0,323,.LM138-.LFBB8
 1070               	.LM138:
 1071 0494 8091 0000 		lds r24,bit5
 1072 0498 8823      		tst r24
 1073 049a 01F0      		breq .L123
 325:main.cpp      ****         }
 1074               		.stabn	68,0,325,.LM139-.LFBB8
 1075               	.LM139:
 1076 049c 66E9      		ldi r22,lo8(-106)
 1077 049e 70E0      		ldi r23,0
 1078 04a0 80E0      		ldi r24,lo8(moteur)
 1079 04a2 90E0      		ldi r25,hi8(moteur)
 1080 04a4 0C94 0000 		jmp _ZN3Pwm10pivotDroitEj
 1081               	.L142:
 344:main.cpp      **** 	{
 1082               		.stabn	68,0,344,.LM140-.LFBB8
 1083               	.LM140:
 1084 04a8 8111      		cpse r24,__zero_reg__
 1085 04aa 00C0      		rjmp .L68
 1086               	.L84:
 329:main.cpp      ****         }
 1087               		.stabn	68,0,329,.LM141-.LFBB8
 1088               	.LM141:
 1089 04ac 66E9      		ldi r22,lo8(-106)
 1090 04ae 70E0      		ldi r23,0
 1091 04b0 80E0      		ldi r24,lo8(moteur)
 1092 04b2 90E0      		ldi r25,hi8(moteur)
 1093 04b4 0C94 0000 		jmp _ZN3Pwm14Tourner_DroiteEj
 1094               	.L123:
 348:main.cpp      **** 	{
 1095               		.stabn	68,0,348,.LM142-.LFBB8
GAS LISTING /tmp/cccXD99i.s 			page 31


 1096               	.LM142:
 1097 04b8 8091 0000 		lds r24,bit5
 1098 04bc 8111      		cpse r24,__zero_reg__
 1099 04be 00C0      		rjmp .L68
 350:main.cpp      **** 			_delay_ms(1000); // Peut-être à augmenter
 1100               		.stabn	68,0,350,.LM143-.LFBB8
 1101               	.LM143:
 1102 04c0 66E9      		ldi r22,lo8(-106)
 1103 04c2 70E0      		ldi r23,0
 1104 04c4 80E0      		ldi r24,lo8(moteur)
 1105 04c6 90E0      		ldi r25,hi8(moteur)
 1106 04c8 0E94 0000 		call _ZN3Pwm6AvanceEj
 1107               	.LBB44:
 1108               	.LBB45:
 1109               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext11
 1110               	.Ltext11:
 1111               		.stabn	68,0,164,.LM144-.LFBB8
 1112               	.LM144:
 1113 04cc 2FEF      		ldi r18,lo8(1599999)
 1114 04ce 89E6      		ldi r24,hi8(1599999)
 1115 04d0 98E1      		ldi r25,hlo8(1599999)
 1116 04d2 2150      		1: subi r18,1
 1117 04d4 8040      		sbci r24,0
 1118 04d6 9040      		sbci r25,0
 1119 04d8 01F4      		brne 1b
 1120 04da 00C0      		rjmp .
 1121 04dc 0000      		nop
 1122               	.LBE45:
 1123               	.LBE44:
 1124               		.stabs	"main.cpp",132,0,0,.Ltext12
 1125               	.Ltext12:
 352:main.cpp      ****                         
 1126               		.stabn	68,0,352,.LM145-.LFBB8
 1127               	.LM145:
 1128 04de 0E94 0000 		call _Z13lireDirectionv
 354:main.cpp      **** 			{
 1129               		.stabn	68,0,354,.LM146-.LFBB8
 1130               	.LM146:
 1131 04e2 8091 0000 		lds r24,bit1
 1132 04e6 8111      		cpse r24,__zero_reg__
 1133 04e8 00C0      		rjmp .L54
 354:main.cpp      **** 			{
 1134               		.stabn	68,0,354,.LM147-.LFBB8
 1135               	.LM147:
 1136 04ea 8091 0000 		lds r24,bit2
 1137 04ee 8111      		cpse r24,__zero_reg__
 1138 04f0 00C0      		rjmp .L54
 354:main.cpp      **** 			{
 1139               		.stabn	68,0,354,.LM148-.LFBB8
 1140               	.LM148:
 1141 04f2 8091 0000 		lds r24,bit3
 1142 04f6 8111      		cpse r24,__zero_reg__
 1143 04f8 00C0      		rjmp .L54
 354:main.cpp      **** 			{
 1144               		.stabn	68,0,354,.LM149-.LFBB8
 1145               	.LM149:
 1146 04fa 8091 0000 		lds r24,bit4
GAS LISTING /tmp/cccXD99i.s 			page 32


 1147 04fe 8111      		cpse r24,__zero_reg__
 1148 0500 00C0      		rjmp .L54
 354:main.cpp      **** 			{
 1149               		.stabn	68,0,354,.LM150-.LFBB8
 1150               	.LM150:
 1151 0502 8091 0000 		lds r24,bit5
 1152 0506 8111      		cpse r24,__zero_reg__
 1153 0508 00C0      		rjmp .L54
 356:main.cpp      **** 			}
 1154               		.stabn	68,0,356,.LM151-.LFBB8
 1155               	.LM151:
 1156 050a 0C94 0000 		jmp _Z17faireIntersectionv
 1157               	.L157:
 340:main.cpp      **** 	{
 1158               		.stabn	68,0,340,.LM152-.LFBB8
 1159               	.LM152:
 1160 050e 2223      		tst r18
 1161 0510 01F4      		brne .+2
 1162 0512 00C0      		rjmp .L151
 370:main.cpp      ****         {
 1163               		.stabn	68,0,370,.LM153-.LFBB8
 1164               	.LM153:
 1165 0514 8091 0000 		lds r24,bit5
 1166 0518 8111      		cpse r24,__zero_reg__
 1167 051a 00C0      		rjmp .L68
 1168               	.L54:
 1169 051c 0895      		ret
 1170               		.size	_Z11suivreLignev, .-_Z11suivreLignev
 1171               	.Lscope8:
 1172               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 1173               		.stabd	78,0,0
 1174               		.stabs	"_Z18verifierLuminositev:F(0,4)",36,0,392,_Z18verifierLuminositev
 1175               	.global	_Z18verifierLuminositev
 1176               		.type	_Z18verifierLuminositev, @function
 1177               	_Z18verifierLuminositev:
 1178               		.stabd	46,0,0
 389:main.cpp      ****         }
 390:main.cpp      **** }
 391:main.cpp      **** 
 392:main.cpp      **** void verifierLuminosite()
 393:main.cpp      **** {
 1179               		.stabn	68,0,393,.LM154-.LFBB9
 1180               	.LM154:
 1181               	.LFBB9:
 1182               	/* prologue: function */
 1183               	/* frame size = 0 */
 1184               	/* stack size = 0 */
 1185               	.L__stack_usage = 0
 394:main.cpp      ****     rapport = intensite.lecture(6) >> 2; 
 1186               		.stabn	68,0,394,.LM155-.LFBB9
 1187               	.LM155:
 1188 051e 66E0      		ldi r22,lo8(6)
 1189 0520 80E0      		ldi r24,lo8(intensite)
 1190 0522 90E0      		ldi r25,hi8(intensite)
 1191 0524 0E94 0000 		call _ZN3can7lectureEh
 1192 0528 9695      		lsr r25
 1193 052a 8795      		ror r24
GAS LISTING /tmp/cccXD99i.s 			page 33


 1194 052c 9695      		lsr r25
 1195 052e 8795      		ror r24
 1196 0530 8093 0000 		sts rapport,r24
 395:main.cpp      ****     if(rapport < 80 )/*&& !estSortiDuTunel*/
 1197               		.stabn	68,0,395,.LM156-.LFBB9
 1198               	.LM156:
 1199 0534 8035      		cpi r24,lo8(80)
 1200 0536 00F4      		brsh .L159
 396:main.cpp      ****     {
 397:main.cpp      ****         PORTA = 0b1100;
 1201               		.stabn	68,0,397,.LM157-.LFBB9
 1202               	.LM157:
 1203 0538 8CE0      		ldi r24,lo8(12)
 1204 053a 82B9      		out 0x2,r24
 1205 053c 0895      		ret
 1206               	.L159:
 398:main.cpp      ****     }
 399:main.cpp      ****     else/*&& passeDansLeTunel*/
 400:main.cpp      ****     {
 401:main.cpp      ****       PORTA = 0x00;
 1207               		.stabn	68,0,401,.LM158-.LFBB9
 1208               	.LM158:
 1209 053e 12B8      		out 0x2,__zero_reg__
 1210 0540 0895      		ret
 1211               		.size	_Z18verifierLuminositev, .-_Z18verifierLuminositev
 1212               	.Lscope9:
 1213               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 1214               		.stabd	78,0,0
 1215               		.section	.text.startup,"ax",@progbits
 1216               		.stabs	"main:F(0,9)",36,0,405,main
 1217               	.global	main
 1218               		.type	main, @function
 1219               	main:
 1220               		.stabd	46,0,0
 402:main.cpp      ****     }
 403:main.cpp      **** }
 404:main.cpp      **** 
 405:main.cpp      **** int main()
 406:main.cpp      **** {
 1221               		.stabn	68,0,406,.LM159-.LFBB10
 1222               	.LM159:
 1223               	.LFBB10:
 1224               	/* prologue: function */
 1225               	/* frame size = 0 */
 1226               	/* stack size = 0 */
 1227               	.L__stack_usage = 0
 407:main.cpp      ****     DDRB = 0b11111100;
 1228               		.stabn	68,0,407,.LM160-.LFBB10
 1229               	.LM160:
 1230 0000 8CEF      		ldi r24,lo8(-4)
 1231 0002 84B9      		out 0x4,r24
 408:main.cpp      ****     DDRD = 0b11110000;
 1232               		.stabn	68,0,408,.LM161-.LFBB10
 1233               	.LM161:
 1234 0004 80EF      		ldi r24,lo8(-16)
 1235 0006 8AB9      		out 0xa,r24
 409:main.cpp      ****     DDRC = 0x00;
GAS LISTING /tmp/cccXD99i.s 			page 34


 1236               		.stabn	68,0,409,.LM162-.LFBB10
 1237               	.LM162:
 1238 0008 17B8      		out 0x7,__zero_reg__
 410:main.cpp      ****     DDRA = 0x0F;
 1239               		.stabn	68,0,410,.LM163-.LFBB10
 1240               	.LM163:
 1241 000a 8FE0      		ldi r24,lo8(15)
 1242 000c 81B9      		out 0x1,r24
 411:main.cpp      **** 
 412:main.cpp      ****     
 413:main.cpp      **** ///////////// BOUTONS DE DIRECTION ///////////////
 414:main.cpp      ****   
 415:main.cpp      ****     
 416:main.cpp      ****     
 417:main.cpp      **** 	while (compteur<3) 
 418:main.cpp      ****         {
 419:main.cpp      **** 			if (!(PINB & 0x01)) { 	//bouton droit
 420:main.cpp      **** 				_delay_ms(10);
 421:main.cpp      **** 				if(!(PINB & 0x01)){
 422:main.cpp      **** 					enfonceDroit = true;
 423:main.cpp      ****                                         PORTA = 0b1000;
 424:main.cpp      **** 					_delay_ms(10);
 425:main.cpp      **** 				}
 426:main.cpp      **** 			}
 427:main.cpp      **** 			else if (!(PINB & 0x02)) 
 428:main.cpp      ****                         { 		//bouton gauche
 429:main.cpp      **** 				_delay_ms(10);
 430:main.cpp      **** 				if(!(PINB & 0x02))
 431:main.cpp      ****                                 {
 432:main.cpp      **** 					enfonceGauche = true;
 433:main.cpp      ****                                          PORTA = 0b0100;
 434:main.cpp      **** 					_delay_ms(10);
 435:main.cpp      **** 				}
 436:main.cpp      **** 			}
 437:main.cpp      **** 			else if(enfonceDroit)
 438:main.cpp      ****                         {
 439:main.cpp      ****                             enfonceDroit = false;
 440:main.cpp      ****                             PORTA = 0x00;
 441:main.cpp      ****                             directions[compteur] = 'g';
 442:main.cpp      ****                             compteur++;
 443:main.cpp      ****                         }
 444:main.cpp      **** 			else if(enfonceGauche)
 445:main.cpp      ****                         {
 446:main.cpp      ****                             enfonceGauche = false;
 447:main.cpp      ****                             PORTA = 0x00;
 448:main.cpp      ****                             directions[compteur] = 'd';
 1243               		.stabn	68,0,448,.LM164-.LFBB10
 1244               	.LM164:
 1245 000e 24E6      		ldi r18,lo8(100)
 441:main.cpp      ****                             compteur++;
 1246               		.stabn	68,0,441,.LM165-.LFBB10
 1247               	.LM165:
 1248 0010 37E6      		ldi r19,lo8(103)
 432:main.cpp      ****                                          PORTA = 0b0100;
 1249               		.stabn	68,0,432,.LM166-.LFBB10
 1250               	.LM166:
 1251 0012 91E0      		ldi r25,lo8(1)
GAS LISTING /tmp/cccXD99i.s 			page 35


 433:main.cpp      **** 					_delay_ms(10);
 1252               		.stabn	68,0,433,.LM167-.LFBB10
 1253               	.LM167:
 1254 0014 44E0      		ldi r20,lo8(4)
 423:main.cpp      **** 					_delay_ms(10);
 1255               		.stabn	68,0,423,.LM168-.LFBB10
 1256               	.LM168:
 1257 0016 58E0      		ldi r21,lo8(8)
 1258               	.L162:
 417:main.cpp      ****         {
 1259               		.stabn	68,0,417,.LM169-.LFBB10
 1260               	.LM169:
 1261 0018 8091 0000 		lds r24,compteur
 1262 001c 8330      		cpi r24,lo8(3)
 1263 001e 00F0      		brlo .+2
 1264 0020 00C0      		rjmp .L176
 419:main.cpp      **** 				_delay_ms(10);
 1265               		.stabn	68,0,419,.LM170-.LFBB10
 1266               	.LM170:
 1267 0022 1899      		sbic 0x3,0
 1268 0024 00C0      		rjmp .L163
 1269               	.LBB46:
 1270               	.LBB47:
 1271               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext13
 1272               	.Ltext13:
 1273               		.stabn	68,0,164,.LM171-.LFBB10
 1274               	.LM171:
 1275 0026 EFE1      		ldi r30,lo8(19999)
 1276 0028 FEE4      		ldi r31,hi8(19999)
 1277 002a 3197      		1: sbiw r30,1
 1278 002c 01F4      		brne 1b
 1279 002e 00C0      		rjmp .
 1280 0030 0000      		nop
 1281               	.LBE47:
 1282               	.LBE46:
 1283               		.stabs	"main.cpp",132,0,0,.Ltext14
 1284               	.Ltext14:
 421:main.cpp      **** 					enfonceDroit = true;
 1285               		.stabn	68,0,421,.LM172-.LFBB10
 1286               	.LM172:
 1287 0032 1899      		sbic 0x3,0
 1288 0034 00C0      		rjmp .L162
 422:main.cpp      ****                                         PORTA = 0b1000;
 1289               		.stabn	68,0,422,.LM173-.LFBB10
 1290               	.LM173:
 1291 0036 9093 0000 		sts enfonceDroit,r25
 423:main.cpp      **** 					_delay_ms(10);
 1292               		.stabn	68,0,423,.LM174-.LFBB10
 1293               	.LM174:
 1294 003a 52B9      		out 0x2,r21
 1295 003c 00C0      		rjmp .L174
 1296               	.L163:
 427:main.cpp      ****                         { 		//bouton gauche
 1297               		.stabn	68,0,427,.LM175-.LFBB10
 1298               	.LM175:
 1299 003e 1999      		sbic 0x3,1
 1300 0040 00C0      		rjmp .L166
GAS LISTING /tmp/cccXD99i.s 			page 36


 1301               	.LBB48:
 1302               	.LBB49:
 1303               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext15
 1304               	.Ltext15:
 1305               		.stabn	68,0,164,.LM176-.LFBB10
 1306               	.LM176:
 1307 0042 EFE1      		ldi r30,lo8(19999)
 1308 0044 FEE4      		ldi r31,hi8(19999)
 1309 0046 3197      		1: sbiw r30,1
 1310 0048 01F4      		brne 1b
 1311 004a 00C0      		rjmp .
 1312 004c 0000      		nop
 1313               	.LBE49:
 1314               	.LBE48:
 1315               		.stabs	"main.cpp",132,0,0,.Ltext16
 1316               	.Ltext16:
 430:main.cpp      ****                                 {
 1317               		.stabn	68,0,430,.LM177-.LFBB10
 1318               	.LM177:
 1319 004e 1999      		sbic 0x3,1
 1320 0050 00C0      		rjmp .L162
 432:main.cpp      ****                                          PORTA = 0b0100;
 1321               		.stabn	68,0,432,.LM178-.LFBB10
 1322               	.LM178:
 1323 0052 9093 0000 		sts enfonceGauche,r25
 433:main.cpp      **** 					_delay_ms(10);
 1324               		.stabn	68,0,433,.LM179-.LFBB10
 1325               	.LM179:
 1326 0056 42B9      		out 0x2,r20
 1327               	.L174:
 1328               	.LBB50:
 1329               	.LBB51:
 1330               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext17
 1331               	.Ltext17:
 1332               		.stabn	68,0,164,.LM180-.LFBB10
 1333               	.LM180:
 1334 0058 EFE1      		ldi r30,lo8(19999)
 1335 005a FEE4      		ldi r31,hi8(19999)
 1336 005c 3197      		1: sbiw r30,1
 1337 005e 01F4      		brne 1b
 1338 0060 00C0      		rjmp .
 1339 0062 0000      		nop
 1340 0064 00C0      		rjmp .L162
 1341               	.L166:
 1342               	.LBE51:
 1343               	.LBE50:
 1344               		.stabs	"main.cpp",132,0,0,.Ltext18
 1345               	.Ltext18:
 437:main.cpp      ****                         {
 1346               		.stabn	68,0,437,.LM181-.LFBB10
 1347               	.LM181:
 1348 0066 8091 0000 		lds r24,enfonceDroit
 1349 006a 8823      		tst r24
 1350 006c 01F0      		breq .L168
 439:main.cpp      ****                             PORTA = 0x00;
 1351               		.stabn	68,0,439,.LM182-.LFBB10
 1352               	.LM182:
GAS LISTING /tmp/cccXD99i.s 			page 37


 1353 006e 1092 0000 		sts enfonceDroit,__zero_reg__
 440:main.cpp      ****                             directions[compteur] = 'g';
 1354               		.stabn	68,0,440,.LM183-.LFBB10
 1355               	.LM183:
 1356 0072 12B8      		out 0x2,__zero_reg__
 441:main.cpp      ****                             compteur++;
 1357               		.stabn	68,0,441,.LM184-.LFBB10
 1358               	.LM184:
 1359 0074 8091 0000 		lds r24,compteur
 1360 0078 E82F      		mov r30,r24
 1361 007a F0E0      		ldi r31,0
 1362 007c E050      		subi r30,lo8(-(directions))
 1363 007e F040      		sbci r31,hi8(-(directions))
 1364 0080 3083      		st Z,r19
 1365 0082 00C0      		rjmp .L175
 1366               	.L168:
 444:main.cpp      ****                         {
 1367               		.stabn	68,0,444,.LM185-.LFBB10
 1368               	.LM185:
 1369 0084 8091 0000 		lds r24,enfonceGauche
 1370 0088 8823      		tst r24
 1371 008a 01F0      		breq .L162
 446:main.cpp      ****                             PORTA = 0x00;
 1372               		.stabn	68,0,446,.LM186-.LFBB10
 1373               	.LM186:
 1374 008c 1092 0000 		sts enfonceGauche,__zero_reg__
 447:main.cpp      ****                             directions[compteur] = 'd';
 1375               		.stabn	68,0,447,.LM187-.LFBB10
 1376               	.LM187:
 1377 0090 12B8      		out 0x2,__zero_reg__
 1378               		.stabn	68,0,448,.LM188-.LFBB10
 1379               	.LM188:
 1380 0092 8091 0000 		lds r24,compteur
 1381 0096 E82F      		mov r30,r24
 1382 0098 F0E0      		ldi r31,0
 1383 009a E050      		subi r30,lo8(-(directions))
 1384 009c F040      		sbci r31,hi8(-(directions))
 1385 009e 2083      		st Z,r18
 1386               	.L175:
 449:main.cpp      ****                             compteur++;
 1387               		.stabn	68,0,449,.LM189-.LFBB10
 1388               	.LM189:
 1389 00a0 8F5F      		subi r24,lo8(-(1))
 1390 00a2 8093 0000 		sts compteur,r24
 1391 00a6 00C0      		rjmp .L162
 1392               	.L176:
 450:main.cpp      ****                         }
 451:main.cpp      **** 				
 452:main.cpp      ****         }
 453:main.cpp      **** 
 454:main.cpp      **** 	
 455:main.cpp      **** 		
 456:main.cpp      **** 	
 457:main.cpp      **** ////////////// FIN DE DETECTION DE BOUTONS /////////////////////
 458:main.cpp      ****  
 459:main.cpp      ****  
 460:main.cpp      ****  
GAS LISTING /tmp/cccXD99i.s 			page 38


 461:main.cpp      ****     compteur = 0;
 1393               		.stabn	68,0,461,.LM190-.LFBB10
 1394               	.LM190:
 1395 00a8 1092 0000 		sts compteur,__zero_reg__
 1396               	.L170:
 462:main.cpp      ****     while (true)
 463:main.cpp      ****     {
 464:main.cpp      ****         verifierLuminosite();
 1397               		.stabn	68,0,464,.LM191-.LFBB10
 1398               	.LM191:
 1399 00ac 0E94 0000 		call _Z18verifierLuminositev
 465:main.cpp      ****         lireDirection();
 1400               		.stabn	68,0,465,.LM192-.LFBB10
 1401               	.LM192:
 1402 00b0 0E94 0000 		call _Z13lireDirectionv
 466:main.cpp      ****         suivreLigne();
 1403               		.stabn	68,0,466,.LM193-.LFBB10
 1404               	.LM193:
 1405 00b4 0E94 0000 		call _Z11suivreLignev
 405:main.cpp      **** {
 1406               		.stabn	68,0,405,.LM194-.LFBB10
 1407               	.LM194:
 1408 00b8 00C0      		rjmp .L170
 1409               		.size	main, .-main
 1410               	.Lscope10:
 1411               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 1412               		.stabd	78,0,0
 1413               		.stabs	"_GLOBAL__sub_I_bit1:f(0,4)",36,0,469,_GLOBAL__sub_I_bit1
 1414               		.type	_GLOBAL__sub_I_bit1, @function
 1415               	_GLOBAL__sub_I_bit1:
 1416               		.stabd	46,0,0
 467:main.cpp      ****     }
 468:main.cpp      ****  
 469:main.cpp      **** }
 1417               		.stabn	68,0,469,.LM195-.LFBB11
 1418               	.LM195:
 1419               	.LFBB11:
 1420               	/* prologue: function */
 1421               	/* frame size = 0 */
 1422               	/* stack size = 0 */
 1423               	.L__stack_usage = 0
 1424               	.LBB54:
 1425               	.LBB55:
  19:main.cpp      **** Pwm moteur;
 1426               		.stabn	68,0,19,.LM196-.LFBB11
 1427               	.LM196:
 1428 00ba 80E0      		ldi r24,lo8(del)
 1429 00bc 90E0      		ldi r25,hi8(del)
 1430 00be 0E94 0000 		call _ZN3DelC1Ev
  20:main.cpp      **** can intensite;
 1431               		.stabn	68,0,20,.LM197-.LFBB11
 1432               	.LM197:
 1433 00c2 80E0      		ldi r24,lo8(moteur)
 1434 00c4 90E0      		ldi r25,hi8(moteur)
 1435 00c6 0E94 0000 		call _ZN3PwmC1Ev
  21:main.cpp      **** 
 1436               		.stabn	68,0,21,.LM198-.LFBB11
GAS LISTING /tmp/cccXD99i.s 			page 39


 1437               	.LM198:
 1438 00ca 80E0      		ldi r24,lo8(intensite)
 1439 00cc 90E0      		ldi r25,hi8(intensite)
 1440 00ce 0C94 0000 		jmp _ZN3canC1Ev
 1441               	.LBE55:
 1442               	.LBE54:
 1443               		.size	_GLOBAL__sub_I_bit1, .-_GLOBAL__sub_I_bit1
 1444               	.Lscope11:
 1445               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 1446               		.stabd	78,0,0
 1447               		.global __do_global_ctors
 1448               		.section .ctors,"a",@progbits
 1449               		.p2align	1
 1450 0000 0000      		.word	gs(_GLOBAL__sub_I_bit1)
 1451               		.section	.text.exit,"ax",@progbits
 1452               		.stabs	"_GLOBAL__sub_D_bit1:f(0,4)",36,0,469,_GLOBAL__sub_D_bit1
 1453               		.type	_GLOBAL__sub_D_bit1, @function
 1454               	_GLOBAL__sub_D_bit1:
 1455               		.stabd	46,0,0
 1456               		.stabn	68,0,469,.LM199-.LFBB12
 1457               	.LM199:
 1458               	.LFBB12:
 1459               	/* prologue: function */
 1460               	/* frame size = 0 */
 1461               	/* stack size = 0 */
 1462               	.L__stack_usage = 0
 1463               	.LBB60:
 1464               	.LBB61:
 1465               	.LBB62:
  21:main.cpp      **** 
 1466               		.stabn	68,0,21,.LM200-.LFBB12
 1467               	.LM200:
 1468 0000 80E0      		ldi r24,lo8(intensite)
 1469 0002 90E0      		ldi r25,hi8(intensite)
 1470 0004 0E94 0000 		call _ZN3canD1Ev
  20:main.cpp      **** can intensite;
 1471               		.stabn	68,0,20,.LM201-.LFBB12
 1472               	.LM201:
 1473 0008 80E0      		ldi r24,lo8(moteur)
 1474 000a 90E0      		ldi r25,hi8(moteur)
 1475 000c 0E94 0000 		call _ZN3PwmD1Ev
  19:main.cpp      **** Pwm moteur;
 1476               		.stabn	68,0,19,.LM202-.LFBB12
 1477               	.LM202:
 1478 0010 80E0      		ldi r24,lo8(del)
 1479 0012 90E0      		ldi r25,hi8(del)
 1480 0014 0C94 0000 		jmp _ZN3DelD1Ev
 1481               	.LBE62:
 1482               	.LBE61:
 1483               	.LBE60:
 1484               		.size	_GLOBAL__sub_D_bit1, .-_GLOBAL__sub_D_bit1
 1485               	.Lscope12:
 1486               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 1487               		.stabd	78,0,0
 1488               		.global __do_global_dtors
 1489               		.section .dtors,"a",@progbits
 1490               		.p2align	1
GAS LISTING /tmp/cccXD99i.s 			page 40


 1491 0000 0000      		.word	gs(_GLOBAL__sub_D_bit1)
 1492               	.global	intensite
 1493               		.section .bss
 1494               		.type	intensite, @object
 1495               		.size	intensite, 1
 1496               	intensite:
 1497 0000 00        		.zero	1
 1498               	.global	moteur
 1499               		.type	moteur, @object
 1500               		.size	moteur, 1
 1501               	moteur:
 1502 0001 00        		.zero	1
 1503               	.global	del
 1504               		.type	del, @object
 1505               		.size	del, 1
 1506               	del:
 1507 0002 00        		.zero	1
 1508               	.global	directions
 1509               		.type	directions, @object
 1510               		.size	directions, 3
 1511               	directions:
 1512 0003 0000 00   		.zero	3
 1513               	.global	nbCarre
 1514               		.type	nbCarre, @object
 1515               		.size	nbCarre, 1
 1516               	nbCarre:
 1517 0006 00        		.zero	1
 1518               	.global	rapport
 1519               		.type	rapport, @object
 1520               		.size	rapport, 1
 1521               	rapport:
 1522 0007 00        		.zero	1
 1523               	.global	petitSkip
 1524               		.type	petitSkip, @object
 1525               		.size	petitSkip, 1
 1526               	petitSkip:
 1527 0008 00        		.zero	1
 1528               	.global	compteur
 1529               		.type	compteur, @object
 1530               		.size	compteur, 1
 1531               	compteur:
 1532 0009 00        		.zero	1
 1533               	.global	enfonceDroit
 1534               		.type	enfonceDroit, @object
 1535               		.size	enfonceDroit, 1
 1536               	enfonceDroit:
 1537 000a 00        		.zero	1
 1538               	.global	enfonceGauche
 1539               		.type	enfonceGauche, @object
 1540               		.size	enfonceGauche, 1
 1541               	enfonceGauche:
 1542 000b 00        		.zero	1
 1543               	.global	bit5
 1544               		.type	bit5, @object
 1545               		.size	bit5, 1
 1546               	bit5:
 1547 000c 00        		.zero	1
GAS LISTING /tmp/cccXD99i.s 			page 41


 1548               	.global	bit4
 1549               		.type	bit4, @object
 1550               		.size	bit4, 1
 1551               	bit4:
 1552 000d 00        		.zero	1
 1553               	.global	bit3
 1554               		.type	bit3, @object
 1555               		.size	bit3, 1
 1556               	bit3:
 1557 000e 00        		.zero	1
 1558               	.global	bit2
 1559               		.type	bit2, @object
 1560               		.size	bit2, 1
 1561               	bit2:
 1562 000f 00        		.zero	1
 1563               	.global	bit1
 1564               		.type	bit1, @object
 1565               		.size	bit1, 1
 1566               	bit1:
 1567 0010 00        		.zero	1
 1568               		.stabs	"bit1:G(0,54)",32,0,15,0
 1569               		.stabs	"bit2:G(0,54)",32,0,15,0
 1570               		.stabs	"bit3:G(0,54)",32,0,15,0
 1571               		.stabs	"bit4:G(0,54)",32,0,15,0
 1572               		.stabs	"bit5:G(0,54)",32,0,15,0
 1573               		.stabs	"enfonceGauche:G(0,54)",32,0,15,0
 1574               		.stabs	"enfonceDroit:G(0,54)",32,0,15,0
 1575               		.stabs	"compteur:G(0,59)",32,0,17,0
 1576               		.stabs	"petitSkip:G(0,59)",32,0,17,0
 1577               		.stabs	"rapport:G(0,59)",32,0,17,0
 1578               		.stabs	"nbCarre:G(0,59)",32,0,17,0
 1579               		.stabs	"directions:G(0,128)=ar(0,129)=r(0,129);0;0177777;;0;2;(0,17)",32,0,18,0
 1580               		.stabs	"del:G(0,98)",32,0,19,0
 1581               		.stabs	"moteur:G(0,123)",32,0,20,0
 1582               		.stabs	"intensite:G(0,105)",32,0,21,0
 1583               		.text
 1584               		.stabs	"",100,0,0,.Letext0
 1585               	.Letext0:
 1586               		.ident	"GCC: (Fedora 4.9.3-1.fc23) 4.9.3"
 1587               	.global __do_clear_bss
GAS LISTING /tmp/cccXD99i.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/cccXD99i.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cccXD99i.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cccXD99i.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cccXD99i.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cccXD99i.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cccXD99i.s:114    .text:0000000000000000 _Z22transmissionPcVersUartv
     /tmp/cccXD99i.s:152    .text:0000000000000012 _Z8faireSonj
     /tmp/cccXD99i.s:229    .text:000000000000007a _Z18initialisationUARTv
     /tmp/cccXD99i.s:266    .text:0000000000000098 _Z22transmissionUARTVersPch
     /tmp/cccXD99i.s:292    .text:00000000000000a6 _Z13lireDirectionv
     /tmp/cccXD99i.s:1566   .bss:0000000000000010 bit1
     /tmp/cccXD99i.s:1561   .bss:000000000000000f bit2
     /tmp/cccXD99i.s:1556   .bss:000000000000000e bit3
     /tmp/cccXD99i.s:1551   .bss:000000000000000d bit4
     /tmp/cccXD99i.s:1546   .bss:000000000000000c bit5
     /tmp/cccXD99i.s:340    .text:00000000000000dc _Z17faireIntersectionv
     /tmp/cccXD99i.s:1531   .bss:0000000000000009 compteur
     /tmp/cccXD99i.s:1511   .bss:0000000000000003 directions
     /tmp/cccXD99i.s:1501   .bss:0000000000000001 moteur
     /tmp/cccXD99i.s:638    .text:0000000000000266 _Z25faireIntersectionTrianglev
     /tmp/cccXD99i.s:655    .text:0000000000000268 _Z11suivreLignev
     /tmp/cccXD99i.s:1516   .bss:0000000000000006 nbCarre
     /tmp/cccXD99i.s:1506   .bss:0000000000000002 del
     /tmp/cccXD99i.s:1177   .text:000000000000051e _Z18verifierLuminositev
     /tmp/cccXD99i.s:1496   .bss:0000000000000000 intensite
     /tmp/cccXD99i.s:1521   .bss:0000000000000007 rapport
     /tmp/cccXD99i.s:1219   .text.startup:0000000000000000 main
     /tmp/cccXD99i.s:1536   .bss:000000000000000a enfonceDroit
     /tmp/cccXD99i.s:1541   .bss:000000000000000b enfonceGauche
     /tmp/cccXD99i.s:1415   .text.startup:00000000000000ba _GLOBAL__sub_I_bit1
     /tmp/cccXD99i.s:1454   .text.exit:0000000000000000 _GLOBAL__sub_D_bit1
     /tmp/cccXD99i.s:1526   .bss:0000000000000008 petitSkip

UNDEFINED SYMBOLS
__floatunsisf
__divsf3
__mulsf3
__fixunssfsi
pow
_ZN3Pwm10pivotDroitEj
_ZN3Pwm6AvanceEj
_ZN3Pwm11pivotGaucheEj
_ZN3Pwm14Tourner_DroiteEj
_ZN3Pwm14Tourner_GaucheEj
_ZN3Del12allumerRougeEh
_ZN3can7lectureEh
_ZN3DelC1Ev
_ZN3PwmC1Ev
_ZN3canC1Ev
__do_global_ctors
_ZN3canD1Ev
_ZN3PwmD1Ev
_ZN3DelD1Ev
__do_global_dtors
__do_clear_bss
GAS LISTING /tmp/cccXD99i.s 			page 43


