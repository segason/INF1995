GAS LISTING /tmp/ccmZqj4k.s 			page 1


   1               		.file	"main.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/olstob/Documents/inf1995-4754/projet/",100,0,4,.Ltext0
   8               		.stabs	"main.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"short _Fract:t(0,23)=r(0,9);1;0;",128,0,0,0
  38               		.stabs	"long _Fract:t(0,24)=r(0,9);4;0;",128,0,0,0
  39               		.stabs	"long long _Fract:t(0,25)=r(0,9);8;0;",128,0,0,0
  40               		.stabs	"unsigned short _Fract:t(0,26)=r(0,9);1;0;",128,0,0,0
  41               		.stabs	"unsigned _Fract:t(0,27)=r(0,9);2;0;",128,0,0,0
  42               		.stabs	"unsigned long _Fract:t(0,28)=r(0,9);4;0;",128,0,0,0
  43               		.stabs	"unsigned long long _Fract:t(0,29)=r(0,9);8;0;",128,0,0,0
  44               		.stabs	"_Sat short _Fract:t(0,30)=r(0,9);1;0;",128,0,0,0
  45               		.stabs	"_Sat _Fract:t(0,31)=r(0,9);2;0;",128,0,0,0
  46               		.stabs	"_Sat long _Fract:t(0,32)=r(0,9);4;0;",128,0,0,0
  47               		.stabs	"_Sat long long _Fract:t(0,33)=r(0,9);8;0;",128,0,0,0
  48               		.stabs	"_Sat unsigned short _Fract:t(0,34)=r(0,9);1;0;",128,0,0,0
  49               		.stabs	"_Sat unsigned _Fract:t(0,35)=r(0,9);2;0;",128,0,0,0
  50               		.stabs	"_Sat unsigned long _Fract:t(0,36)=r(0,9);4;0;",128,0,0,0
  51               		.stabs	"_Sat unsigned long long _Fract:t(0,37)=r(0,9);8;0;",128,0,0,0
  52               		.stabs	"short _Accum:t(0,38)=r(0,9);2;0;",128,0,0,0
  53               		.stabs	"long _Accum:t(0,39)=r(0,9);8;0;",128,0,0,0
  54               		.stabs	"long long _Accum:t(0,40)=r(0,9);8;0;",128,0,0,0
  55               		.stabs	"unsigned short _Accum:t(0,41)=r(0,9);2;0;",128,0,0,0
  56               		.stabs	"unsigned _Accum:t(0,42)=r(0,9);4;0;",128,0,0,0
  57               		.stabs	"unsigned long _Accum:t(0,43)=r(0,9);8;0;",128,0,0,0
GAS LISTING /tmp/ccmZqj4k.s 			page 2


  58               		.stabs	"unsigned long long _Accum:t(0,44)=r(0,9);8;0;",128,0,0,0
  59               		.stabs	"_Sat short _Accum:t(0,45)=r(0,9);2;0;",128,0,0,0
  60               		.stabs	"_Sat _Accum:t(0,46)=r(0,9);4;0;",128,0,0,0
  61               		.stabs	"_Sat long _Accum:t(0,47)=r(0,9);8;0;",128,0,0,0
  62               		.stabs	"_Sat long long _Accum:t(0,48)=r(0,9);8;0;",128,0,0,0
  63               		.stabs	"_Sat unsigned short _Accum:t(0,49)=r(0,9);2;0;",128,0,0,0
  64               		.stabs	"_Sat unsigned _Accum:t(0,50)=r(0,9);4;0;",128,0,0,0
  65               		.stabs	"_Sat unsigned long _Accum:t(0,51)=r(0,9);8;0;",128,0,0,0
  66               		.stabs	"_Sat unsigned long long _Accum:t(0,52)=r(0,9);8;0;",128,0,0,0
  67               		.stabs	"void:t(0,4)",128,0,0,0
  68               		.stabs	"wchar_t:t(0,53)=r(0,53);-32768;32767;",128,0,0,0
  69               		.stabs	"bool:t(0,54)=@s8;-16;",128,0,0,0
  70               		.stabs	"__vtbl_ptr_type:t(0,55)=*(0,56)=f(0,9)",128,0,0,0
  71               		.stabs	"decltype(nullptr):t(0,57)=(0,57)",128,0,0,0
  72               		.stabs	"int8_t:t(0,58)=(0,16)",128,0,121,0
  73               		.stabs	"uint8_t:t(0,59)=(0,13)",128,0,122,0
  74               		.stabs	"int16_t:t(0,60)=(0,9)",128,0,123,0
  75               		.stabs	"uint16_t:t(0,61)=(0,12)",128,0,124,0
  76               		.stabs	"int32_t:t(0,62)=(0,15)",128,0,125,0
  77               		.stabs	"uint32_t:t(0,63)=(0,11)",128,0,126,0
  78               		.stabs	"int64_t:t(0,64)=(0,14)",128,0,128,0
  79               		.stabs	"uint64_t:t(0,65)=(0,10)",128,0,129,0
  80               		.stabs	"intptr_t:t(0,66)=(0,60)",128,0,142,0
  81               		.stabs	"uintptr_t:t(0,67)=(0,61)",128,0,147,0
  82               		.stabs	"int_least8_t:t(0,68)=(0,58)",128,0,159,0
  83               		.stabs	"uint_least8_t:t(0,69)=(0,59)",128,0,164,0
  84               		.stabs	"int_least16_t:t(0,70)=(0,60)",128,0,169,0
  85               		.stabs	"uint_least16_t:t(0,71)=(0,61)",128,0,174,0
  86               		.stabs	"int_least32_t:t(0,72)=(0,62)",128,0,179,0
  87               		.stabs	"uint_least32_t:t(0,73)=(0,63)",128,0,184,0
  88               		.stabs	"int_least64_t:t(0,74)=(0,64)",128,0,192,0
  89               		.stabs	"uint_least64_t:t(0,75)=(0,65)",128,0,199,0
  90               		.stabs	"int_fast8_t:t(0,76)=(0,58)",128,0,213,0
  91               		.stabs	"uint_fast8_t:t(0,77)=(0,59)",128,0,218,0
  92               		.stabs	"int_fast16_t:t(0,78)=(0,60)",128,0,223,0
  93               		.stabs	"uint_fast16_t:t(0,79)=(0,61)",128,0,228,0
  94               		.stabs	"int_fast32_t:t(0,80)=(0,62)",128,0,233,0
  95               		.stabs	"uint_fast32_t:t(0,81)=(0,63)",128,0,238,0
  96               		.stabs	"int_fast64_t:t(0,82)=(0,64)",128,0,246,0
  97               		.stabs	"uint_fast64_t:t(0,83)=(0,65)",128,0,253,0
  98               		.stabs	"intmax_t:t(0,84)=(0,64)",128,0,273,0
  99               		.stabs	"uintmax_t:t(0,85)=(0,65)",128,0,278,0
 100               		.stabs	"int_farptr_t:t(0,86)=(0,62)",128,0,77,0
 101               		.stabs	"uint_farptr_t:t(0,87)=(0,63)",128,0,81,0
 102               		.stabs	"._0:Tt(0,88)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
 103               		.stabs	"__fuse_t:t(0,88)",128,0,244,0
 104               		.stabs	"Memoire24CXXX:Tt(0,89)=s1m_adresse_peripherique:/0(0,59):_ZN13Memoire24CXXX22m_adresse_per
 105               		.stabs	"Del:Tt(0,98)=s1__base_ctor ::(0,99)=#(0,98),(0,4),(0,100)=*(0,98),(0,4);:_ZN3DelC2Ev;2A.;_
 106               		.stabs	"Moteur:Tt(0,102)=s1__base_ctor ::(0,103)=#(0,102),(0,4),(0,104)=*(0,102),(0,4);:_ZN6Moteur
 107               		.stabs	"can:Tt(0,105)=s1__base_ctor ::(0,106)=#(0,105),(0,4),(0,107)=*(0,105),(0,4);:_ZN3canC2Ev;2
 108               		.stabs	"Minuterie:Tt(0,109)=s4minuterieExpiree_:/0(0,110)=B(0,59),0,8;duree_:/0(0,61),8,16;boutonP
 109               		.stabs	"PwmSon:Tt(0,119)=s1__base_ctor ::(0,120)=#(0,119),(0,4),(0,121)=*(0,119),(0,4);:_ZN6PwmSon
 110               		.stabs	"Pwm:Tt(0,123)=s1__base_ctor ::(0,124)=#(0,123),(0,4),(0,125)=*(0,123),(0,4);:_ZN3PwmC2Ev;2
 111               		.stabs	"_Z22transmissionPcVersUartv:F(0,17)",36,0,23,_Z22transmissionPcVersUartv
 112               	.global	_Z22transmissionPcVersUartv
 113               		.type	_Z22transmissionPcVersUartv, @function
 114               	_Z22transmissionPcVersUartv:
GAS LISTING /tmp/ccmZqj4k.s 			page 3


 115               		.stabd	46,0,0
   1:main.cpp      **** #include "Memoire24CXXX.h"
   2:main.cpp      **** #include "delControl.h" 
   3:main.cpp      **** #include "Moteur.h" 
   4:main.cpp      **** #include "can.h"
   5:main.cpp      **** #include "minuterie.h" 
   6:main.cpp      **** #include "Memoire24CXXX.h" 
   7:main.cpp      **** #include "PwmSon.h"
   8:main.cpp      **** #include "PWM.h"
   9:main.cpp      **** #include <avr/io.h>
  10:main.cpp      **** #include <avr/interrupt.h> 
  11:main.cpp      **** #define F_CPU 8000000
  12:main.cpp      **** #include <util/delay.h>
  13:main.cpp      **** using namespace std;
  14:main.cpp      ****     
  15:main.cpp      **** bool bit1 = false, bit2 = false, bit3 = false, bit4 = false, bit5 = false, enfonceGauche = false, e
  16:main.cpp      **** uint8_t compteur = 0, petitSkip = 0, rapport = 0;
  17:main.cpp      **** char directions[3] = {};
  18:main.cpp      **** Del del;
  19:main.cpp      **** Pwm moteur;
  20:main.cpp      **** can intensite;
  21:main.cpp      **** 
  22:main.cpp      **** 
  23:main.cpp      **** char transmissionPcVersUart ( ) {
 116               		.stabn	68,0,23,.LM0-.LFBB1
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 123               	.L3:
  24:main.cpp      **** 
  25:main.cpp      **** 	while (!( UCSR0A & (1<<RXC0)) && !(PIND & 0x04)) //
 124               		.stabn	68,0,25,.LM1-.LFBB1
 125               	.LM1:
 126 0000 8091 C000 		lds r24,192
 127 0004 87FD      		sbrc r24,7
 128 0006 00C0      		rjmp .L2
 129               		.stabn	68,0,25,.LM2-.LFBB1
 130               	.LM2:
 131 0008 4A9B      		sbis 0x9,2
 132 000a 00C0      		rjmp .L3
 133               	.L2:
  26:main.cpp      **** 	{
  27:main.cpp      **** 	}
  28:main.cpp      ****                
  29:main.cpp      ****     	return UDR0;//Retourne le data recu par lwe buffer
 134               		.stabn	68,0,29,.LM3-.LFBB1
 135               	.LM3:
 136 000c 8091 C600 		lds r24,198
  30:main.cpp      **** 
  31:main.cpp      **** }
 137               		.stabn	68,0,31,.LM4-.LFBB1
 138               	.LM4:
 139 0010 0895      		ret
 140               		.size	_Z22transmissionPcVersUartv, .-_Z22transmissionPcVersUartv
GAS LISTING /tmp/ccmZqj4k.s 			page 4


 141               	.Lscope1:
 142               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 143               		.stabd	78,0,0
 144               	.global	__floatunsisf
 145               	.global	__divsf3
 146               	.global	__mulsf3
 147               	.global	__fixunssfsi
 148               		.stabs	"_Z8faireSonj:F(0,4)",36,0,34,_Z8faireSonj
 149               		.stabs	"pwm:P(0,12)",64,0,34,24
 150               	.global	_Z8faireSonj
 151               		.type	_Z8faireSonj, @function
 152               	_Z8faireSonj:
 153               		.stabd	46,0,0
  32:main.cpp      **** 
  33:main.cpp      **** 
  34:main.cpp      **** void faireSon(unsigned int pwm)
  35:main.cpp      **** {
 154               		.stabn	68,0,35,.LM5-.LFBB2
 155               	.LM5:
 156               	.LFBB2:
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
  36:main.cpp      ****        if(pwm >= 45)
 161               		.stabn	68,0,36,.LM6-.LFBB2
 162               	.LM6:
 163 0012 8D32      		cpi r24,45
 164 0014 9105      		cpc r25,__zero_reg__
 165 0016 00F0      		brlo .L8
 166 0018 BC01      		movw r22,r24
  37:main.cpp      ****        {
  38:main.cpp      ****         TCCR0A = (1 << WGM01) | (1 << COM0A0);
 167               		.stabn	68,0,38,.LM7-.LFBB2
 168               	.LM7:
 169 001a 82E4      		ldi r24,lo8(66)
 170 001c 84BD      		out 0x24,r24
  39:main.cpp      **** 	
  40:main.cpp      **** 	TCCR0B = 0x04 ;
 171               		.stabn	68,0,40,.LM8-.LFBB2
 172               	.LM8:
 173 001e 84E0      		ldi r24,lo8(4)
 174 0020 85BD      		out 0x25,r24
  41:main.cpp      **** 		
  42:main.cpp      **** 	OCR0A = 15625.0/(110.0 * pow(2, (pwm-45)/12.0));
 175               		.stabn	68,0,42,.LM9-.LFBB2
 176               	.LM9:
 177 0022 6D52      		subi r22,45
 178 0024 7109      		sbc r23,__zero_reg__
 179 0026 80E0      		ldi r24,0
 180 0028 90E0      		ldi r25,0
 181 002a 0E94 0000 		call __floatunsisf
 182 002e 20E0      		ldi r18,0
 183 0030 30E0      		ldi r19,0
 184 0032 40E4      		ldi r20,lo8(64)
 185 0034 51E4      		ldi r21,lo8(65)
 186 0036 0E94 0000 		call __divsf3
GAS LISTING /tmp/ccmZqj4k.s 			page 5


 187 003a 9B01      		movw r18,r22
 188 003c AC01      		movw r20,r24
 189 003e 60E0      		ldi r22,0
 190 0040 70E0      		ldi r23,0
 191 0042 80E0      		ldi r24,0
 192 0044 90E4      		ldi r25,lo8(64)
 193 0046 0E94 0000 		call pow
 194 004a 20E0      		ldi r18,0
 195 004c 30E0      		ldi r19,0
 196 004e 4CED      		ldi r20,lo8(-36)
 197 0050 52E4      		ldi r21,lo8(66)
 198 0052 0E94 0000 		call __mulsf3
 199 0056 9B01      		movw r18,r22
 200 0058 AC01      		movw r20,r24
 201 005a 60E0      		ldi r22,0
 202 005c 74E2      		ldi r23,lo8(36)
 203 005e 84E7      		ldi r24,lo8(116)
 204 0060 96E4      		ldi r25,lo8(70)
 205 0062 0E94 0000 		call __divsf3
 206 0066 0E94 0000 		call __fixunssfsi
 207 006a 67BD      		out 0x27,r22
 208 006c 0895      		ret
 209               	.L8:
  43:main.cpp      ****        }
  44:main.cpp      ****        else
  45:main.cpp      ****         {
  46:main.cpp      ****             TCCR0A = (1 << WGM01) | (1 << COM0A0);
 210               		.stabn	68,0,46,.LM10-.LFBB2
 211               	.LM10:
 212 006e 82E4      		ldi r24,lo8(66)
 213 0070 84BD      		out 0x24,r24
  47:main.cpp      **** 	
  48:main.cpp      ****             TCCR0B = 0x04 ;
 214               		.stabn	68,0,48,.LM11-.LFBB2
 215               	.LM11:
 216 0072 84E0      		ldi r24,lo8(4)
 217 0074 85BD      		out 0x25,r24
  49:main.cpp      **** 		
  50:main.cpp      ****             OCR0A = 0;
 218               		.stabn	68,0,50,.LM12-.LFBB2
 219               	.LM12:
 220 0076 17BC      		out 0x27,__zero_reg__
 221 0078 0895      		ret
 222               		.size	_Z8faireSonj, .-_Z8faireSonj
 223               	.Lscope2:
 224               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 225               		.stabd	78,0,0
 226               		.stabs	"_Z18initialisationUARTv:F(0,4)",36,0,54,_Z18initialisationUARTv
 227               	.global	_Z18initialisationUARTv
 228               		.type	_Z18initialisationUARTv, @function
 229               	_Z18initialisationUARTv:
 230               		.stabd	46,0,0
  51:main.cpp      ****        }
  52:main.cpp      **** }
  53:main.cpp      **** 
  54:main.cpp      **** void initialisationUART ( void ) {
 231               		.stabn	68,0,54,.LM13-.LFBB3
GAS LISTING /tmp/ccmZqj4k.s 			page 6


 232               	.LM13:
 233               	.LFBB3:
 234               	/* prologue: function */
 235               	/* frame size = 0 */
 236               	/* stack size = 0 */
 237               	.L__stack_usage = 0
  55:main.cpp      **** 
  56:main.cpp      **** // 2400 bauds. Nous vous donnons la valeur des deux
  57:main.cpp      **** 
  58:main.cpp      **** // premier registres pour vous éviter des complications
  59:main.cpp      **** 
  60:main.cpp      **** UBRR0H = 0;
 238               		.stabn	68,0,60,.LM14-.LFBB3
 239               	.LM14:
 240 007a 1092 C500 		sts 197,__zero_reg__
  61:main.cpp      **** 
  62:main.cpp      **** UBRR0L = 0xCF;
 241               		.stabn	68,0,62,.LM15-.LFBB3
 242               	.LM15:
 243 007e 8FEC      		ldi r24,lo8(-49)
 244 0080 8093 C400 		sts 196,r24
  63:main.cpp      **** 
  64:main.cpp      **** // permettre la reception et la transmission par le UART0
  65:main.cpp      **** 
  66:main.cpp      **** UCSR0A = (1 << TXC0) | (1 << RXC0) ;
 245               		.stabn	68,0,66,.LM16-.LFBB3
 246               	.LM16:
 247 0084 80EC      		ldi r24,lo8(-64)
 248 0086 8093 C000 		sts 192,r24
  67:main.cpp      **** 
  68:main.cpp      **** UCSR0B =  (1 << RXEN0) | (1 << TXEN0) ; // L'émetteur USART est activé en réglant TXEN dans UCSR
 249               		.stabn	68,0,68,.LM17-.LFBB3
 250               	.LM17:
 251 008a 88E1      		ldi r24,lo8(24)
 252 008c 8093 C100 		sts 193,r24
  69:main.cpp      **** 
  70:main.cpp      **** // Format des trames: 8 bits, 1 stop bits, none parity
  71:main.cpp      **** 
  72:main.cpp      **** UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 253               		.stabn	68,0,72,.LM18-.LFBB3
 254               	.LM18:
 255 0090 86E0      		ldi r24,lo8(6)
 256 0092 8093 C200 		sts 194,r24
 257 0096 0895      		ret
 258               		.size	_Z18initialisationUARTv, .-_Z18initialisationUARTv
 259               	.Lscope3:
 260               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 261               		.stabd	78,0,0
 262               		.stabs	"_Z22transmissionUARTVersPch:F(0,4)",36,0,76,_Z22transmissionUARTVersPch
 263               		.stabs	"donnee:P(0,59)",64,0,76,24
 264               	.global	_Z22transmissionUARTVersPch
 265               		.type	_Z22transmissionUARTVersPch, @function
 266               	_Z22transmissionUARTVersPch:
 267               		.stabd	46,0,0
  73:main.cpp      **** 
  74:main.cpp      **** }
  75:main.cpp      **** 
GAS LISTING /tmp/ccmZqj4k.s 			page 7


  76:main.cpp      **** void transmissionUARTVersPc ( uint8_t donnee ) {
 268               		.stabn	68,0,76,.LM19-.LFBB4
 269               	.LM19:
 270               	.LFBB4:
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
 275               	.L12:
  77:main.cpp      **** 
  78:main.cpp      **** 	while (!( UCSR0A & (1<<UDRE0))) //Attendre que le tampon soient libre. 
 276               		.stabn	68,0,78,.LM20-.LFBB4
 277               	.LM20:
 278 0098 9091 C000 		lds r25,192
 279 009c 95FF      		sbrs r25,5
 280 009e 00C0      		rjmp .L12
  79:main.cpp      **** 	{
  80:main.cpp      **** 	}
  81:main.cpp      ****                
  82:main.cpp      ****     	UDR0 = donnee; 
 281               		.stabn	68,0,82,.LM21-.LFBB4
 282               	.LM21:
 283 00a0 8093 C600 		sts 198,r24
 284 00a4 0895      		ret
 285               		.size	_Z22transmissionUARTVersPch, .-_Z22transmissionUARTVersPch
 286               	.Lscope4:
 287               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 288               		.stabd	78,0,0
 289               		.stabs	"_Z13lireDirectionv:F(0,4)",36,0,84,_Z13lireDirectionv
 290               	.global	_Z13lireDirectionv
 291               		.type	_Z13lireDirectionv, @function
 292               	_Z13lireDirectionv:
 293               		.stabd	46,0,0
  83:main.cpp      **** }
  84:main.cpp      **** void lireDirection()
  85:main.cpp      **** {
 294               		.stabn	68,0,85,.LM22-.LFBB5
 295               	.LM22:
 296               	.LFBB5:
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 0 */
 300               	.L__stack_usage = 0
  86:main.cpp      ****         bit1 = PINC & 0b00000001; //   capteur_gauche
 301               		.stabn	68,0,86,.LM23-.LFBB5
 302               	.LM23:
 303 00a6 86B1      		in r24,0x6
 304 00a8 8170      		andi r24,lo8(1)
 305 00aa 8093 0000 		sts bit1,r24
  87:main.cpp      ****         bit2 = PINC & 0b00000010; // centre centre gauche
 306               		.stabn	68,0,87,.LM24-.LFBB5
 307               	.LM24:
 308 00ae 86B1      		in r24,0x6
 309 00b0 8695      		lsr r24
 310 00b2 8170      		andi r24,1
 311 00b4 8093 0000 		sts bit2,r24
  88:main.cpp      ****         bit3 = PINC & 0b00000100; // centre 
GAS LISTING /tmp/ccmZqj4k.s 			page 8


 312               		.stabn	68,0,88,.LM25-.LFBB5
 313               	.LM25:
 314 00b8 86B1      		in r24,0x6
 315 00ba 82FB      		bst r24,2
 316 00bc 8827      		clr r24
 317 00be 80F9      		bld r24,0
 318 00c0 8093 0000 		sts bit3,r24
  89:main.cpp      ****         bit4 = PINC & 0b00001000; // centre centre droit 
 319               		.stabn	68,0,89,.LM26-.LFBB5
 320               	.LM26:
 321 00c4 86B1      		in r24,0x6
 322 00c6 83FB      		bst r24,3
 323 00c8 8827      		clr r24
 324 00ca 80F9      		bld r24,0
 325 00cc 8093 0000 		sts bit4,r24
  90:main.cpp      ****         bit5 = PINC & 0b00010000; // capteur_droit
 326               		.stabn	68,0,90,.LM27-.LFBB5
 327               	.LM27:
 328 00d0 86B1      		in r24,0x6
 329 00d2 8295      		swap r24
 330 00d4 8170      		andi r24,1
 331 00d6 8093 0000 		sts bit5,r24
 332 00da 0895      		ret
 333               		.size	_Z13lireDirectionv, .-_Z13lireDirectionv
 334               	.Lscope5:
 335               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 336               		.stabd	78,0,0
 337               		.stabs	"_Z17faireIntersectionv:F(0,4)",36,0,93,_Z17faireIntersectionv
 338               	.global	_Z17faireIntersectionv
 339               		.type	_Z17faireIntersectionv, @function
 340               	_Z17faireIntersectionv:
 341               		.stabd	46,0,0
  91:main.cpp      **** }
  92:main.cpp      **** 
  93:main.cpp      **** void faireIntersection()
  94:main.cpp      **** {
 342               		.stabn	68,0,94,.LM28-.LFBB6
 343               	.LM28:
 344               	.LFBB6:
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
  95:main.cpp      ****     if (directions[compteur] == 'd')
 349               		.stabn	68,0,95,.LM29-.LFBB6
 350               	.LM29:
 351 00dc E091 0000 		lds r30,compteur
 352 00e0 F0E0      		ldi r31,0
 353 00e2 E050      		subi r30,lo8(-(directions))
 354 00e4 F040      		sbci r31,hi8(-(directions))
 355 00e6 8081      		ld r24,Z
 356 00e8 8436      		cpi r24,lo8(100)
 357 00ea 01F0      		breq .+2
 358 00ec 00C0      		rjmp .L17
  96:main.cpp      ****     {
  97:main.cpp      **** 	moteur.pivotDroit(150);
 359               		.stabn	68,0,97,.LM30-.LFBB6
GAS LISTING /tmp/ccmZqj4k.s 			page 9


 360               	.LM30:
 361 00ee 66E9      		ldi r22,lo8(-106)
 362 00f0 70E0      		ldi r23,0
 363 00f2 80E0      		ldi r24,lo8(moteur)
 364 00f4 90E0      		ldi r25,hi8(moteur)
 365 00f6 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 366               	.LBB31:
 367               	.LBB32:
 368               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext1
 369               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
GAS LISTING /tmp/ccmZqj4k.s 			page 10


  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
GAS LISTING /tmp/ccmZqj4k.s 			page 11


 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/avr/include/util/delay.h **** 
 156:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/avr/include/util/delay.h **** 
 159:/usr/avr/include/util/delay.h **** 	#else
 160:/usr/avr/include/util/delay.h **** 		//round up by default
 161:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
GAS LISTING /tmp/ccmZqj4k.s 			page 12


 162:/usr/avr/include/util/delay.h **** 	#endif
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 370               		.stabn	68,0,164,.LM31-.LFBB6
 371               	.LM31:
 372 00fa 2FEF      		ldi r18,lo8(799999)
 373 00fc 84E3      		ldi r24,hi8(799999)
 374 00fe 9CE0      		ldi r25,hlo8(799999)
 375 0100 2150      		1: subi r18,1
 376 0102 8040      		sbci r24,0
 377 0104 9040      		sbci r25,0
 378 0106 01F4      		brne 1b
 379 0108 00C0      		rjmp .
 380 010a 0000      		nop
 381               	.LBE32:
 382               	.LBE31:
 383               		.stabs	"main.cpp",132,0,0,.Ltext2
 384               	.Ltext2:
  98:main.cpp      **** 	_delay_ms(500);
  99:main.cpp      **** 	moteur.Avance(150);
 385               		.stabn	68,0,99,.LM32-.LFBB6
 386               	.LM32:
 387 010c 66E9      		ldi r22,lo8(-106)
 388 010e 70E0      		ldi r23,0
 389 0110 80E0      		ldi r24,lo8(moteur)
 390 0112 90E0      		ldi r25,hi8(moteur)
 391 0114 0E94 0000 		call _ZN3Pwm6AvanceEj
 392               	.L18:
 100:main.cpp      **** 	while(!(bit1 || bit2 || bit3))
 393               		.stabn	68,0,100,.LM33-.LFBB6
 394               	.LM33:
 395 0118 8091 0000 		lds r24,bit1
 396 011c 8111      		cpse r24,__zero_reg__
 397 011e 00C0      		rjmp .L42
 398               		.stabn	68,0,100,.LM34-.LFBB6
 399               	.LM34:
 400 0120 8091 0000 		lds r24,bit2
 401 0124 8111      		cpse r24,__zero_reg__
 402 0126 00C0      		rjmp .L42
 403               		.stabn	68,0,100,.LM35-.LFBB6
 404               	.LM35:
 405 0128 8091 0000 		lds r24,bit3
 406 012c 8111      		cpse r24,__zero_reg__
 407 012e 00C0      		rjmp .L42
 101:main.cpp      **** 	{
 102:main.cpp      ****             lireDirection();	
 408               		.stabn	68,0,102,.LM36-.LFBB6
 409               	.LM36:
 410 0130 0E94 0000 		call _Z13lireDirectionv
 411 0134 00C0      		rjmp .L18
 412               	.L27:
 103:main.cpp      ****     }
 104:main.cpp      ****     
 105:main.cpp      ****     while(!bit5)
 106:main.cpp      ****     {
 107:main.cpp      **** 		lireDirection();
 413               		.stabn	68,0,107,.LM37-.LFBB6
GAS LISTING /tmp/ccmZqj4k.s 			page 13


 414               	.LM37:
 415 0136 0E94 0000 		call _Z13lireDirectionv
 108:main.cpp      **** 		if(!bit1 && bit2 && !bit3)	// 0 1 0 X X
 416               		.stabn	68,0,108,.LM38-.LFBB6
 417               	.LM38:
 418 013a 9091 0000 		lds r25,bit1
 419 013e 8091 0000 		lds r24,bit2
 420 0142 9111      		cpse r25,__zero_reg__
 421 0144 00C0      		rjmp .L21
 422               		.stabn	68,0,108,.LM39-.LFBB6
 423               	.LM39:
 424 0146 8823      		tst r24
 425 0148 01F0      		breq .L22
 426               	.L24:
 109:main.cpp      **** 		{
 110:main.cpp      **** 			moteur.Avance(150);
 427               		.stabn	68,0,110,.LM40-.LFBB6
 428               	.LM40:
 429 014a 66E9      		ldi r22,lo8(-106)
 430 014c 70E0      		ldi r23,0
 431 014e 80E0      		ldi r24,lo8(moteur)
 432 0150 90E0      		ldi r25,hi8(moteur)
 433 0152 0E94 0000 		call _ZN3Pwm6AvanceEj
 434               	.L42:
 105:main.cpp      ****     {
 435               		.stabn	68,0,105,.LM41-.LFBB6
 436               	.LM41:
 437 0156 8091 0000 		lds r24,bit5
 438 015a 8823      		tst r24
 439 015c 01F0      		breq .L27
 440 015e 00C0      		rjmp .L28
 441               	.L21:
 111:main.cpp      **** 		}
 112:main.cpp      **** 		else if (bit1 && !bit2 && !bit3) // 1 0 0 X X
 442               		.stabn	68,0,112,.LM42-.LFBB6
 443               	.LM42:
 444 0160 8111      		cpse r24,__zero_reg__
 445 0162 00C0      		rjmp .L24
 446               		.stabn	68,0,112,.LM43-.LFBB6
 447               	.LM43:
 448 0164 8091 0000 		lds r24,bit3
 449 0168 8111      		cpse r24,__zero_reg__
 450 016a 00C0      		rjmp .L24
 113:main.cpp      **** 		{
 114:main.cpp      **** 			moteur.pivotGauche(150);
 451               		.stabn	68,0,114,.LM44-.LFBB6
 452               	.LM44:
 453 016c 66E9      		ldi r22,lo8(-106)
 454 016e 70E0      		ldi r23,0
 455 0170 80E0      		ldi r24,lo8(moteur)
 456 0172 90E0      		ldi r25,hi8(moteur)
 457 0174 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 458 0178 00C0      		rjmp .L42
 459               	.L22:
 115:main.cpp      **** 			//moteur.Tourner_Gauche(150);
 116:main.cpp      **** 		}
 117:main.cpp      **** 		else if (!bit1 && !bit2 && bit3) // 0 0 1 X X
GAS LISTING /tmp/ccmZqj4k.s 			page 14


 460               		.stabn	68,0,117,.LM45-.LFBB6
 461               	.LM45:
 462 017a 8091 0000 		lds r24,bit3
 463 017e 8823      		tst r24
 464 0180 01F0      		breq .L25
 465               	.L26:
 118:main.cpp      **** 		{
 119:main.cpp      **** 			moteur.Tourner_Droite(150);
 466               		.stabn	68,0,119,.LM46-.LFBB6
 467               	.LM46:
 468 0182 66E9      		ldi r22,lo8(-106)
 469 0184 70E0      		ldi r23,0
 470 0186 80E0      		ldi r24,lo8(moteur)
 471 0188 90E0      		ldi r25,hi8(moteur)
 472 018a 0E94 0000 		call _ZN3Pwm14Tourner_DroiteEj
 473 018e 00C0      		rjmp .L42
 474               	.L25:
 120:main.cpp      **** 		}
 121:main.cpp      **** 		else if (!bit1 && !bit2 && !bit3 && bit4)
 475               		.stabn	68,0,121,.LM47-.LFBB6
 476               	.LM47:
 477 0190 8091 0000 		lds r24,bit4
 478 0194 8823      		tst r24
 479 0196 01F0      		breq .L24
 480 0198 00C0      		rjmp .L26
 481               	.L17:
 122:main.cpp      **** 		{
 123:main.cpp      **** 			moteur.Tourner_Droite(150);	// 0 0 0 1 X
 124:main.cpp      **** 		}
 125:main.cpp      **** 		
 126:main.cpp      **** 		else
 127:main.cpp      **** 			moteur.Avance(150);
 128:main.cpp      **** 		
 129:main.cpp      **** 		
 130:main.cpp      **** 	}
 131:main.cpp      ****         
 132:main.cpp      ****                   
 133:main.cpp      ****     }
 134:main.cpp      ****     else if (directions[compteur] == 'g')
 482               		.stabn	68,0,134,.LM48-.LFBB6
 483               	.LM48:
 484 019a 8736      		cpi r24,lo8(103)
 485 019c 01F4      		brne .L28
 135:main.cpp      ****     {
 136:main.cpp      **** 	moteur.pivotGauche(150);
 486               		.stabn	68,0,136,.LM49-.LFBB6
 487               	.LM49:
 488 019e 66E9      		ldi r22,lo8(-106)
 489 01a0 70E0      		ldi r23,0
 490 01a2 80E0      		ldi r24,lo8(moteur)
 491 01a4 90E0      		ldi r25,hi8(moteur)
 492 01a6 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 493               	.LBB33:
 494               	.LBB34:
 495               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext3
 496               	.Ltext3:
 497               		.stabn	68,0,164,.LM50-.LFBB6
GAS LISTING /tmp/ccmZqj4k.s 			page 15


 498               	.LM50:
 499 01aa 2FE7      		ldi r18,lo8(399999)
 500 01ac 8AE1      		ldi r24,hi8(399999)
 501 01ae 96E0      		ldi r25,hlo8(399999)
 502 01b0 2150      		1: subi r18,1
 503 01b2 8040      		sbci r24,0
 504 01b4 9040      		sbci r25,0
 505 01b6 01F4      		brne 1b
 506 01b8 00C0      		rjmp .
 507 01ba 0000      		nop
 508               	.LBE34:
 509               	.LBE33:
 510               		.stabs	"main.cpp",132,0,0,.Ltext4
 511               	.Ltext4:
 137:main.cpp      **** 	_delay_ms(250);	
 138:main.cpp      **** 	moteur.Avance(150);
 512               		.stabn	68,0,138,.LM51-.LFBB6
 513               	.LM51:
 514 01bc 66E9      		ldi r22,lo8(-106)
 515 01be 70E0      		ldi r23,0
 516 01c0 80E0      		ldi r24,lo8(moteur)
 517 01c2 90E0      		ldi r25,hi8(moteur)
 518 01c4 0E94 0000 		call _ZN3Pwm6AvanceEj
 519               	.L29:
 139:main.cpp      **** 	while(!(bit3 || bit4 || bit5))
 520               		.stabn	68,0,139,.LM52-.LFBB6
 521               	.LM52:
 522 01c8 8091 0000 		lds r24,bit3
 523 01cc 8823      		tst r24
 524 01ce 01F0      		breq .L52
 525               	.L43:
 140:main.cpp      **** 	{
 141:main.cpp      ****             lireDirection();			
 142:main.cpp      **** 	}
 143:main.cpp      **** 	
 144:main.cpp      **** 	while(!bit1)
 526               		.stabn	68,0,144,.LM53-.LFBB6
 527               	.LM53:
 528 01d0 8091 0000 		lds r24,bit1
 529 01d4 8823      		tst r24
 530 01d6 01F0      		breq .L49
 531               	.L28:
 145:main.cpp      ****     {
 146:main.cpp      **** 		lireDirection();
 147:main.cpp      **** 		if(!bit3 && bit4 && !bit5)	// X X 0 1 0
 148:main.cpp      **** 		{
 149:main.cpp      **** 			moteur.Avance(150);
 150:main.cpp      **** 		}
 151:main.cpp      **** 		else if (bit3 && !bit4 && !bit5) // X X 1 0 0
 152:main.cpp      **** 		{
 153:main.cpp      **** 			moteur.Avance(150);
 154:main.cpp      **** 		}
 155:main.cpp      **** 		else if (!bit3 && !bit4 && bit5) // X X 0 0 1
 156:main.cpp      **** 		{
 157:main.cpp      **** 			moteur.pivotDroit(150);
 158:main.cpp      **** 		}
 159:main.cpp      **** 		else if (bit2 && !bit3 && !bit4 && !bit5)	// X 1 0 0 0
GAS LISTING /tmp/ccmZqj4k.s 			page 16


 160:main.cpp      **** 		{
 161:main.cpp      **** 			moteur.Tourner_Gauche(160);
 162:main.cpp      **** 		}
 163:main.cpp      **** 		
 164:main.cpp      **** 		else
 165:main.cpp      **** 			moteur.Avance(150);
 166:main.cpp      **** 		
 167:main.cpp      **** 		
 168:main.cpp      **** 	}
 169:main.cpp      **** 	
 170:main.cpp      **** 	if(!bit1 && !bit2 && bit3 && bit4 && bit5) //Pour la cloche ronde
 171:main.cpp      ****             moteur.Tourner_Gauche(150);
 172:main.cpp      **** 					
 173:main.cpp      ****     }
 174:main.cpp      ****     compteur++;
 532               		.stabn	68,0,174,.LM54-.LFBB6
 533               	.LM54:
 534 01d8 8091 0000 		lds r24,compteur
 535 01dc 8F5F      		subi r24,lo8(-(1))
 536 01de 8093 0000 		sts compteur,r24
 537 01e2 0895      		ret
 538               	.L52:
 139:main.cpp      **** 	{
 539               		.stabn	68,0,139,.LM55-.LFBB6
 540               	.LM55:
 541 01e4 8091 0000 		lds r24,bit4
 542 01e8 8111      		cpse r24,__zero_reg__
 543 01ea 00C0      		rjmp .L43
 139:main.cpp      **** 	{
 544               		.stabn	68,0,139,.LM56-.LFBB6
 545               	.LM56:
 546 01ec 8091 0000 		lds r24,bit5
 547 01f0 8111      		cpse r24,__zero_reg__
 548 01f2 00C0      		rjmp .L43
 141:main.cpp      **** 	}
 549               		.stabn	68,0,141,.LM57-.LFBB6
 550               	.LM57:
 551 01f4 0E94 0000 		call _Z13lireDirectionv
 552 01f8 00C0      		rjmp .L29
 553               	.L49:
 146:main.cpp      **** 		if(!bit3 && bit4 && !bit5)	// X X 0 1 0
 554               		.stabn	68,0,146,.LM58-.LFBB6
 555               	.LM58:
 556 01fa 0E94 0000 		call _Z13lireDirectionv
 147:main.cpp      **** 		{
 557               		.stabn	68,0,147,.LM59-.LFBB6
 558               	.LM59:
 559 01fe 9091 0000 		lds r25,bit3
 560 0202 8091 0000 		lds r24,bit4
 561 0206 9111      		cpse r25,__zero_reg__
 562 0208 00C0      		rjmp .L32
 563 020a 2091 0000 		lds r18,bit5
 147:main.cpp      **** 		{
 564               		.stabn	68,0,147,.LM60-.LFBB6
 565               	.LM60:
 566 020e 8823      		tst r24
 567 0210 01F0      		breq .L33
GAS LISTING /tmp/ccmZqj4k.s 			page 17


 568               	.L51:
 147:main.cpp      **** 		{
 569               		.stabn	68,0,147,.LM61-.LFBB6
 570               	.LM61:
 571 0212 2111      		cpse r18,__zero_reg__
 572 0214 00C0      		rjmp .L34
 573               	.L36:
 149:main.cpp      **** 		}
 574               		.stabn	68,0,149,.LM62-.LFBB6
 575               	.LM62:
 576 0216 66E9      		ldi r22,lo8(-106)
 577 0218 70E0      		ldi r23,0
 578 021a 80E0      		ldi r24,lo8(moteur)
 579 021c 90E0      		ldi r25,hi8(moteur)
 580 021e 0E94 0000 		call _ZN3Pwm6AvanceEj
 581 0222 00C0      		rjmp .L43
 582               	.L32:
 151:main.cpp      **** 		{
 583               		.stabn	68,0,151,.LM63-.LFBB6
 584               	.LM63:
 585 0224 8111      		cpse r24,__zero_reg__
 586 0226 00C0      		rjmp .L34
 151:main.cpp      **** 		{
 587               		.stabn	68,0,151,.LM64-.LFBB6
 588               	.LM64:
 589 0228 2091 0000 		lds r18,bit5
 590 022c 00C0      		rjmp .L51
 591               	.L33:
 155:main.cpp      **** 		{
 592               		.stabn	68,0,155,.LM65-.LFBB6
 593               	.LM65:
 594 022e 2223      		tst r18
 595 0230 01F0      		breq .L34
 157:main.cpp      **** 		}
 596               		.stabn	68,0,157,.LM66-.LFBB6
 597               	.LM66:
 598 0232 66E9      		ldi r22,lo8(-106)
 599 0234 70E0      		ldi r23,0
 600 0236 80E0      		ldi r24,lo8(moteur)
 601 0238 90E0      		ldi r25,hi8(moteur)
 602 023a 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 603 023e 00C0      		rjmp .L43
 604               	.L34:
 159:main.cpp      **** 		{
 605               		.stabn	68,0,159,.LM67-.LFBB6
 606               	.LM67:
 607 0240 2091 0000 		lds r18,bit2
 608 0244 2223      		tst r18
 609 0246 01F0      		breq .L36
 159:main.cpp      **** 		{
 610               		.stabn	68,0,159,.LM68-.LFBB6
 611               	.LM68:
 612 0248 9111      		cpse r25,__zero_reg__
 613 024a 00C0      		rjmp .L36
 159:main.cpp      **** 		{
 614               		.stabn	68,0,159,.LM69-.LFBB6
 615               	.LM69:
GAS LISTING /tmp/ccmZqj4k.s 			page 18


 616 024c 8111      		cpse r24,__zero_reg__
 617 024e 00C0      		rjmp .L36
 159:main.cpp      **** 		{
 618               		.stabn	68,0,159,.LM70-.LFBB6
 619               	.LM70:
 620 0250 8091 0000 		lds r24,bit5
 621 0254 8111      		cpse r24,__zero_reg__
 622 0256 00C0      		rjmp .L36
 161:main.cpp      **** 		}
 623               		.stabn	68,0,161,.LM71-.LFBB6
 624               	.LM71:
 625 0258 60EA      		ldi r22,lo8(-96)
 626 025a 70E0      		ldi r23,0
 627 025c 80E0      		ldi r24,lo8(moteur)
 628 025e 90E0      		ldi r25,hi8(moteur)
 629 0260 0E94 0000 		call _ZN3Pwm14Tourner_GaucheEj
 630 0264 00C0      		rjmp .L43
 631               		.size	_Z17faireIntersectionv, .-_Z17faireIntersectionv
 632               	.Lscope6:
 633               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 634               		.stabd	78,0,0
 635               		.stabs	"_Z25faireIntersectionTrianglev:F(0,4)",36,0,178,_Z25faireIntersectionTrianglev
 636               	.global	_Z25faireIntersectionTrianglev
 637               		.type	_Z25faireIntersectionTrianglev, @function
 638               	_Z25faireIntersectionTrianglev:
 639               		.stabd	46,0,0
 175:main.cpp      ****     
 176:main.cpp      **** }
 177:main.cpp      **** 
 178:main.cpp      **** void faireIntersectionTriangle()
 179:main.cpp      **** {
 640               		.stabn	68,0,179,.LM72-.LFBB7
 641               	.LM72:
 642               	.LFBB7:
 643               	/* prologue: function */
 644               	/* frame size = 0 */
 645               	/* stack size = 0 */
 646               	.L__stack_usage = 0
 647 0266 0895      		ret
 648               		.size	_Z25faireIntersectionTrianglev, .-_Z25faireIntersectionTrianglev
 649               	.Lscope7:
 650               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 651               		.stabd	78,0,0
 652               		.stabs	"_Z11suivreLignev:F(0,4)",36,0,211,_Z11suivreLignev
 653               	.global	_Z11suivreLignev
 654               		.type	_Z11suivreLignev, @function
 655               	_Z11suivreLignev:
 656               		.stabd	46,0,0
 180:main.cpp      ****     /*
 181:main.cpp      ****     if (directions[compteur] == 'd')
 182:main.cpp      ****     {
 183:main.cpp      ****        moteur.pivotDroit(150);
 184:main.cpp      ****        _delay_ms(250);
 185:main.cpp      ****               
 186:main.cpp      ****         while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 187:main.cpp      ****         {
 188:main.cpp      ****            lireDirection();
GAS LISTING /tmp/ccmZqj4k.s 			page 19


 189:main.cpp      ****            moteur.Tourner_Gauche(170);
 190:main.cpp      ****         }
 191:main.cpp      ****                                             
 192:main.cpp      ****     }
 193:main.cpp      ****     else if (directions[compteur] == 'g')
 194:main.cpp      ****     {
 195:main.cpp      ****         moteur.pivotGauche(150);
 196:main.cpp      ****         _delay_ms(250);
 197:main.cpp      ****                    
 198:main.cpp      ****         while(!(bit1 || bit2 || bit3 || bit4 || bit5))
 199:main.cpp      ****         {
 200:main.cpp      ****            lireDirection();
 201:main.cpp      ****             moteur.Tourner_Droite(170);
 202:main.cpp      ****         }		
 203:main.cpp      ****    
 204:main.cpp      ****     }
 205:main.cpp      ****                                     
 206:main.cpp      ****                     
 207:main.cpp      ****     compteur++;
 208:main.cpp      ****     */
 209:main.cpp      **** }
 210:main.cpp      **** 
 211:main.cpp      **** void suivreLigne()
 212:main.cpp      **** {
 657               		.stabn	68,0,212,.LM73-.LFBB8
 658               	.LM73:
 659               	.LFBB8:
 660               	/* prologue: function */
 661               	/* frame size = 0 */
 662               	/* stack size = 0 */
 663               	.L__stack_usage = 0
 213:main.cpp      ****     if(bit1 && bit2 && bit3 && bit4 && bit5) // 1 1 1 1 1
 664               		.stabn	68,0,213,.LM74-.LFBB8
 665               	.LM74:
 666 0268 2091 0000 		lds r18,bit1
 667 026c 9091 0000 		lds r25,bit2
 668 0270 8091 0000 		lds r24,bit3
 669 0274 2223      		tst r18
 670 0276 01F0      		breq .L55
 671               		.stabn	68,0,213,.LM75-.LFBB8
 672               	.LM75:
 673 0278 9923      		tst r25
 674 027a 01F0      		breq .L56
 675               		.stabn	68,0,213,.LM76-.LFBB8
 676               	.LM76:
 677 027c 8823      		tst r24
 678 027e 01F4      		brne .+2
 679 0280 00C0      		rjmp .L60
 680               		.stabn	68,0,213,.LM77-.LFBB8
 681               	.LM77:
 682 0282 9091 0000 		lds r25,bit4
 683 0286 9923      		tst r25
 684 0288 01F4      		brne .+2
 685 028a 00C0      		rjmp .L57
 686               		.stabn	68,0,213,.LM78-.LFBB8
 687               	.LM78:
 688 028c 9091 0000 		lds r25,bit5
GAS LISTING /tmp/ccmZqj4k.s 			page 20


 689 0290 9923      		tst r25
 690 0292 01F4      		brne .+2
 691 0294 00C0      		rjmp .L57
 214:main.cpp      ****         {
 215:main.cpp      ****             if(compteur >= 3)
 692               		.stabn	68,0,215,.LM79-.LFBB8
 693               	.LM79:
 694 0296 8091 0000 		lds r24,compteur
 695 029a 8330      		cpi r24,lo8(3)
 696 029c 00F0      		brlo .L58
 216:main.cpp      ****             {
 217:main.cpp      ****                 moteur.Avance(0);
 697               		.stabn	68,0,217,.LM80-.LFBB8
 698               	.LM80:
 699 029e 60E0      		ldi r22,0
 700 02a0 70E0      		ldi r23,0
 701 02a2 80E0      		ldi r24,lo8(moteur)
 702 02a4 90E0      		ldi r25,hi8(moteur)
 703 02a6 0E94 0000 		call _ZN3Pwm6AvanceEj
 704               	.L59:
 215:main.cpp      ****             {
 705               		.stabn	68,0,215,.LM81-.LFBB8
 706               	.LM81:
 707 02aa 00C0      		rjmp .L59
 708               	.L55:
 218:main.cpp      ****                 while(true)
 219:main.cpp      ****                 {}
 220:main.cpp      ****             }
 221:main.cpp      ****             else
 222:main.cpp      ****                 moteur.Avance(150);
 223:main.cpp      ****         }
 224:main.cpp      ****     /*else if(bit1 && bit2 && !bit3 && !bit4 && !bit5) // 1 1 0 0 0
 225:main.cpp      ****         {
 226:main.cpp      ****             moteur.Tourner_Gauche(150);
 227:main.cpp      ****         }*/
 228:main.cpp      ****         else if(bit1 && !bit2 && !bit3) //1 0 0 X X
 229:main.cpp      ****         {
 230:main.cpp      ****             moteur.pivotGauche(150);
 231:main.cpp      ****         }
 232:main.cpp      ****         else if(!bit1 && bit2 && !bit3) // 0 1 0 X X
 709               		.stabn	68,0,232,.LM82-.LFBB8
 710               	.LM82:
 711 02ac 9923      		tst r25
 712 02ae 01F0      		breq .L61
 713               		.stabn	68,0,232,.LM83-.LFBB8
 714               	.LM83:
 715 02b0 8111      		cpse r24,__zero_reg__
 716 02b2 00C0      		rjmp .L62
 717               	.L58:
 222:main.cpp      ****         }
 718               		.stabn	68,0,222,.LM84-.LFBB8
 719               	.LM84:
 720 02b4 66E9      		ldi r22,lo8(-106)
 721 02b6 70E0      		ldi r23,0
 722 02b8 80E0      		ldi r24,lo8(moteur)
 723 02ba 90E0      		ldi r25,hi8(moteur)
 724 02bc 0C94 0000 		jmp _ZN3Pwm6AvanceEj
GAS LISTING /tmp/ccmZqj4k.s 			page 21


 725               	.L56:
 228:main.cpp      ****         {
 726               		.stabn	68,0,228,.LM85-.LFBB8
 727               	.LM85:
 728 02c0 8111      		cpse r24,__zero_reg__
 729 02c2 00C0      		rjmp .L60
 230:main.cpp      ****         }
 730               		.stabn	68,0,230,.LM86-.LFBB8
 731               	.LM86:
 732 02c4 66E9      		ldi r22,lo8(-106)
 733 02c6 70E0      		ldi r23,0
 734 02c8 80E0      		ldi r24,lo8(moteur)
 735 02ca 90E0      		ldi r25,hi8(moteur)
 736 02cc 0C94 0000 		jmp _ZN3Pwm11pivotGaucheEj
 737               	.L61:
 233:main.cpp      ****         {
 234:main.cpp      ****             moteur.Avance(150);
 235:main.cpp      ****         }
 236:main.cpp      ****         /*else if(!(bit1) && !(bit2) && bit3 && bit4 && bit5) // 0 0 1 1 1
 237:main.cpp      ****         {
 238:main.cpp      ****             moteur.pivotDroit(150);
 239:main.cpp      ****            _delay_ms(100);
 240:main.cpp      ****         }*/
 241:main.cpp      **** 		/*8else if(bit1 && bit2 && bit3 && !(bit4) && !(bit5)) // 1 1 1 0 0
 242:main.cpp      ****         {
 243:main.cpp      ****             moteur.pivotGauche(150);
 244:main.cpp      ****            _delay_ms(100);
 245:main.cpp      ****         }*/
 246:main.cpp      ****         /*else if (!bit1 && !bit2 && !bit3 && !bit4 && bit5) //0 0 0 0 1
 247:main.cpp      ****         {
 248:main.cpp      ****             moteur.pivotDroit(150);
 249:main.cpp      ****         }*/
 250:main.cpp      ****         /*else if (!bit1 && !bit2 && !bit3 && bit4 && bit5) //0 0 0 1 1
 251:main.cpp      ****         {
 252:main.cpp      ****             moteur.Tourner_Droite(150);
 253:main.cpp      ****         }*/
 254:main.cpp      ****         /*else if (!bit1 && !bit2 && !bit3 && bit4 && !(bit5)) // 0 0 0 1 0
 255:main.cpp      ****         {
 256:main.cpp      ****             moteur.Tourner_Droite(150);
 257:main.cpp      ****         }*/
 258:main.cpp      ****         
 259:main.cpp      **** 	else if (!bit1 && !bit2 && bit3) // 0 0 1 X X
 738               		.stabn	68,0,259,.LM87-.LFBB8
 739               	.LM87:
 740 02d0 8823      		tst r24
 741 02d2 01F0      		breq .L63
 260:main.cpp      **** 	{
 261:main.cpp      **** 		moteur.pivotDroit(150);
 742               		.stabn	68,0,261,.LM88-.LFBB8
 743               	.LM88:
 744 02d4 66E9      		ldi r22,lo8(-106)
 745 02d6 70E0      		ldi r23,0
 746 02d8 80E0      		ldi r24,lo8(moteur)
 747 02da 90E0      		ldi r25,hi8(moteur)
 748 02dc 0C94 0000 		jmp _ZN3Pwm10pivotDroitEj
 749               	.L63:
 262:main.cpp      **** 	}
GAS LISTING /tmp/ccmZqj4k.s 			page 22


 263:main.cpp      **** 	/*else if (!bit1 && bit2 && bit3 && !bit4 && !bit5) //0 1 1 0 0
 264:main.cpp      **** 	{
 265:main.cpp      **** 		moteur.Tourner_Gauche(150);
 266:main.cpp      **** 	}*/
 267:main.cpp      **** 	/*else if (!bit1 && !bit2 && bit3 && bit4 && !bit5) // 0 0 1 1 0
 268:main.cpp      **** 	{
 269:main.cpp      **** 		moteur.Tourner_Droite(150);
 270:main.cpp      **** 	}*/   
 271:main.cpp      ****     else if (!bit1 && !bit2 && !bit3 && !bit4 && !bit5)	// 0 0 0 0 0
 750               		.stabn	68,0,271,.LM89-.LFBB8
 751               	.LM89:
 752 02e0 8091 0000 		lds r24,bit4
 753 02e4 8111      		cpse r24,__zero_reg__
 754 02e6 00C0      		rjmp .L60
 755               		.stabn	68,0,271,.LM90-.LFBB8
 756               	.LM90:
 757 02e8 8091 0000 		lds r24,bit5
 758 02ec 8111      		cpse r24,__zero_reg__
 759 02ee 00C0      		rjmp .L60
 272:main.cpp      **** 	{
 273:main.cpp      **** 			moteur.Avance(150);
 760               		.stabn	68,0,273,.LM91-.LFBB8
 761               	.LM91:
 762 02f0 66E9      		ldi r22,lo8(-106)
 763 02f2 70E0      		ldi r23,0
 764 02f4 80E0      		ldi r24,lo8(moteur)
 765 02f6 90E0      		ldi r25,hi8(moteur)
 766 02f8 0E94 0000 		call _ZN3Pwm6AvanceEj
 767               	.LBB35:
 768               	.LBB36:
 769               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext5
 770               	.Ltext5:
 771               		.stabn	68,0,164,.LM92-.LFBB8
 772               	.LM92:
 773 02fc 2FEF      		ldi r18,lo8(799999)
 774 02fe 84E3      		ldi r24,hi8(799999)
 775 0300 9CE0      		ldi r25,hlo8(799999)
 776 0302 2150      		1: subi r18,1
 777 0304 8040      		sbci r24,0
 778 0306 9040      		sbci r25,0
 779 0308 01F4      		brne 1b
 780 030a 00C0      		rjmp .
 781 030c 0000      		nop
 782               	.LBE36:
 783               	.LBE35:
 784               		.stabs	"main.cpp",132,0,0,.Ltext6
 785               	.Ltext6:
 274:main.cpp      **** 			_delay_ms(500); // Peut-être à augmenter
 275:main.cpp      **** 			lireDirection();
 786               		.stabn	68,0,275,.LM93-.LFBB8
 787               	.LM93:
 788 030e 0E94 0000 		call _Z13lireDirectionv
 276:main.cpp      ****                         
 277:main.cpp      **** 			if (!bit1 && !bit2 && !bit3 && !bit4 && !bit5) // INTERSECTION
 789               		.stabn	68,0,277,.LM94-.LFBB8
 790               	.LM94:
 791 0312 8091 0000 		lds r24,bit1
GAS LISTING /tmp/ccmZqj4k.s 			page 23


 792 0316 8111      		cpse r24,__zero_reg__
 793 0318 00C0      		rjmp .L54
 794               		.stabn	68,0,277,.LM95-.LFBB8
 795               	.LM95:
 796 031a 8091 0000 		lds r24,bit2
 797 031e 8111      		cpse r24,__zero_reg__
 798 0320 00C0      		rjmp .L54
 799               		.stabn	68,0,277,.LM96-.LFBB8
 800               	.LM96:
 801 0322 8091 0000 		lds r24,bit3
 802 0326 8111      		cpse r24,__zero_reg__
 803 0328 00C0      		rjmp .L54
 804               		.stabn	68,0,277,.LM97-.LFBB8
 805               	.LM97:
 806 032a 8091 0000 		lds r24,bit4
 807 032e 8111      		cpse r24,__zero_reg__
 808 0330 00C0      		rjmp .L54
 809               		.stabn	68,0,277,.LM98-.LFBB8
 810               	.LM98:
 811 0332 8091 0000 		lds r24,bit5
 812 0336 8111      		cpse r24,__zero_reg__
 813 0338 00C0      		rjmp .L54
 278:main.cpp      **** 			{
 279:main.cpp      ****                             faireIntersection();
 814               		.stabn	68,0,279,.LM99-.LFBB8
 815               	.LM99:
 816 033a 0C94 0000 		jmp _Z17faireIntersectionv
 817               	.L62:
 280:main.cpp      **** 			}
 281:main.cpp      **** 			/*else // POINTILLÉS
 282:main.cpp      ****                         {
 283:main.cpp      ****                             if(petitSkip < 2)
 284:main.cpp      ****                                 petitSkip++;
 285:main.cpp      ****                             else
 286:main.cpp      ****                             {
 287:main.cpp      ****                                 faireSon(100); 
 288:main.cpp      ****                                 petitSkip++;// Faudra vérifier la valeur... Aussi est-ce 
 289:main.cpp      ****         }         //qu'on est oubligé de faire une montée? Si oui 
 290:main.cpp      ****                                                 //peut-être écrire les notes dans la mémoire...
 291:main.cpp      ****                         }*/
 292:main.cpp      **** 			
 293:main.cpp      ****         }
 294:main.cpp      ****         else if(!bit1 && bit2 && bit3 && bit4 && !bit5) // Essai pour gerer l'intersection en trian
 818               		.stabn	68,0,294,.LM100-.LFBB8
 819               	.LM100:
 820 033e 9091 0000 		lds r25,bit4
 821 0342 9923      		tst r25
 822 0344 01F0      		breq .L67
 823               		.stabn	68,0,294,.LM101-.LFBB8
 824               	.LM101:
 825 0346 2091 0000 		lds r18,bit5
 826 034a 2111      		cpse r18,__zero_reg__
 827 034c 00C0      		rjmp .L67
 828 034e 0895      		ret
 829               	.L57:
 295:main.cpp      ****         {
 296:main.cpp      ****                 faireIntersectionTriangle();
GAS LISTING /tmp/ccmZqj4k.s 			page 24


 297:main.cpp      ****         }
 298:main.cpp      ****         
 299:main.cpp      ****         //////////TRY DEEZ SHIETS//////////////
 300:main.cpp      ****         else if(bit1 && bit2 && bit3 && bit4 && !bit5) // 1 1 1 1 0
 830               		.stabn	68,0,300,.LM102-.LFBB8
 831               	.LM102:
 832 0350 8823      		tst r24
 833 0352 01F0      		breq .L60
 834               		.stabn	68,0,300,.LM103-.LFBB8
 835               	.LM103:
 836 0354 8091 0000 		lds r24,bit4
 837 0358 8823      		tst r24
 838 035a 01F0      		breq .L60
 839               		.stabn	68,0,300,.LM104-.LFBB8
 840               	.LM104:
 841 035c 8091 0000 		lds r24,bit5
 842 0360 8111      		cpse r24,__zero_reg__
 843 0362 00C0      		rjmp .L60
 301:main.cpp      ****         {
 302:main.cpp      ****             moteur.pivotGauche(150);
 844               		.stabn	68,0,302,.LM105-.LFBB8
 845               	.LM105:
 846 0364 66E9      		ldi r22,lo8(-106)
 847 0366 70E0      		ldi r23,0
 848 0368 80E0      		ldi r24,lo8(moteur)
 849 036a 90E0      		ldi r25,hi8(moteur)
 850 036c 0E94 0000 		call _ZN3Pwm11pivotGaucheEj
 851 0370 00C0      		rjmp .L95
 852               	.L67:
 303:main.cpp      ****             _delay_ms(100);
 304:main.cpp      ****         }
 305:main.cpp      ****         else if(!bit1 && bit2 && bit3 && bit4 && bit5) // 0 1 1 1 1
 853               		.stabn	68,0,305,.LM106-.LFBB8
 854               	.LM106:
 855 0372 8823      		tst r24
 856 0374 01F0      		breq .L60
 857               		.stabn	68,0,305,.LM107-.LFBB8
 858               	.LM107:
 859 0376 9923      		tst r25
 860 0378 01F0      		breq .L60
 861               		.stabn	68,0,305,.LM108-.LFBB8
 862               	.LM108:
 863 037a 8091 0000 		lds r24,bit5
 864 037e 8823      		tst r24
 865 0380 01F0      		breq .L60
 306:main.cpp      ****         {
 307:main.cpp      ****             moteur.pivotDroit(150);
 866               		.stabn	68,0,307,.LM109-.LFBB8
 867               	.LM109:
 868 0382 66E9      		ldi r22,lo8(-106)
 869 0384 70E0      		ldi r23,0
 870 0386 80E0      		ldi r24,lo8(moteur)
 871 0388 90E0      		ldi r25,hi8(moteur)
 872 038a 0E94 0000 		call _ZN3Pwm10pivotDroitEj
 873               	.L95:
 874               	.LBB37:
 875               	.LBB38:
GAS LISTING /tmp/ccmZqj4k.s 			page 25


 876               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext7
 877               	.Ltext7:
 878               		.stabn	68,0,164,.LM110-.LFBB8
 879               	.LM110:
 880 038e 2FEF      		ldi r18,lo8(159999)
 881 0390 80E7      		ldi r24,hi8(159999)
 882 0392 92E0      		ldi r25,hlo8(159999)
 883 0394 2150      		1: subi r18,1
 884 0396 8040      		sbci r24,0
 885 0398 9040      		sbci r25,0
 886 039a 01F4      		brne 1b
 887 039c 00C0      		rjmp .
 888 039e 0000      		nop
 889 03a0 0895      		ret
 890               	.L60:
 891               	.LBE38:
 892               	.LBE37:
 893               		.stabs	"main.cpp",132,0,0,.Ltext8
 894               	.Ltext8:
 308:main.cpp      ****             _delay_ms(100);
 309:main.cpp      ****         }
 310:main.cpp      ****         else
 311:main.cpp      ****         {
 312:main.cpp      ****             del.allumerRouge(0);
 895               		.stabn	68,0,312,.LM111-.LFBB8
 896               	.LM111:
 897 03a2 60E0      		ldi r22,0
 898 03a4 80E0      		ldi r24,lo8(del)
 899 03a6 90E0      		ldi r25,hi8(del)
 900 03a8 0C94 0000 		jmp _ZN3Del12allumerRougeEh
 901               	.L54:
 902 03ac 0895      		ret
 903               		.size	_Z11suivreLignev, .-_Z11suivreLignev
 904               	.Lscope8:
 905               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 906               		.stabd	78,0,0
 907               		.stabs	"_Z18verifierLuminositev:F(0,4)",36,0,316,_Z18verifierLuminositev
 908               	.global	_Z18verifierLuminositev
 909               		.type	_Z18verifierLuminositev, @function
 910               	_Z18verifierLuminositev:
 911               		.stabd	46,0,0
 313:main.cpp      ****         }
 314:main.cpp      **** }
 315:main.cpp      **** 
 316:main.cpp      **** void verifierLuminosite()
 317:main.cpp      **** {
 912               		.stabn	68,0,317,.LM112-.LFBB9
 913               	.LM112:
 914               	.LFBB9:
 915               	/* prologue: function */
 916               	/* frame size = 0 */
 917               	/* stack size = 0 */
 918               	.L__stack_usage = 0
 318:main.cpp      ****     rapport = intensite.lecture(6) >> 2; 
 919               		.stabn	68,0,318,.LM113-.LFBB9
 920               	.LM113:
 921 03ae 66E0      		ldi r22,lo8(6)
GAS LISTING /tmp/ccmZqj4k.s 			page 26


 922 03b0 80E0      		ldi r24,lo8(intensite)
 923 03b2 90E0      		ldi r25,hi8(intensite)
 924 03b4 0E94 0000 		call _ZN3can7lectureEh
 925 03b8 9695      		lsr r25
 926 03ba 8795      		ror r24
 927 03bc 9695      		lsr r25
 928 03be 8795      		ror r24
 929 03c0 8093 0000 		sts rapport,r24
 319:main.cpp      ****     if(rapport < 80 )/*&& !estSortiDuTunel*/
 930               		.stabn	68,0,319,.LM114-.LFBB9
 931               	.LM114:
 932 03c4 8035      		cpi r24,lo8(80)
 933 03c6 00F4      		brsh .L97
 320:main.cpp      ****     {
 321:main.cpp      ****         PORTA = 0b1100;
 934               		.stabn	68,0,321,.LM115-.LFBB9
 935               	.LM115:
 936 03c8 8CE0      		ldi r24,lo8(12)
 937 03ca 82B9      		out 0x2,r24
 938 03cc 0895      		ret
 939               	.L97:
 322:main.cpp      ****     }
 323:main.cpp      ****     else/*&& passeDansLeTunel*/
 324:main.cpp      ****     {
 325:main.cpp      ****       PORTA = 0x00;
 940               		.stabn	68,0,325,.LM116-.LFBB9
 941               	.LM116:
 942 03ce 12B8      		out 0x2,__zero_reg__
 943 03d0 0895      		ret
 944               		.size	_Z18verifierLuminositev, .-_Z18verifierLuminositev
 945               	.Lscope9:
 946               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 947               		.stabd	78,0,0
 948               		.section	.text.startup,"ax",@progbits
 949               		.stabs	"main:F(0,9)",36,0,329,main
 950               	.global	main
 951               		.type	main, @function
 952               	main:
 953               		.stabd	46,0,0
 326:main.cpp      ****     }
 327:main.cpp      **** }
 328:main.cpp      **** 
 329:main.cpp      **** int main()
 330:main.cpp      **** {
 954               		.stabn	68,0,330,.LM117-.LFBB10
 955               	.LM117:
 956               	.LFBB10:
 957               	/* prologue: function */
 958               	/* frame size = 0 */
 959               	/* stack size = 0 */
 960               	.L__stack_usage = 0
 331:main.cpp      ****     DDRB = 0b11111100;
 961               		.stabn	68,0,331,.LM118-.LFBB10
 962               	.LM118:
 963 0000 8CEF      		ldi r24,lo8(-4)
 964 0002 84B9      		out 0x4,r24
 332:main.cpp      ****     DDRD = 0b11110000;
GAS LISTING /tmp/ccmZqj4k.s 			page 27


 965               		.stabn	68,0,332,.LM119-.LFBB10
 966               	.LM119:
 967 0004 80EF      		ldi r24,lo8(-16)
 968 0006 8AB9      		out 0xa,r24
 333:main.cpp      ****     DDRC = 0x00;
 969               		.stabn	68,0,333,.LM120-.LFBB10
 970               	.LM120:
 971 0008 17B8      		out 0x7,__zero_reg__
 334:main.cpp      ****     DDRA = 0x0F;
 972               		.stabn	68,0,334,.LM121-.LFBB10
 973               	.LM121:
 974 000a 8FE0      		ldi r24,lo8(15)
 975 000c 81B9      		out 0x1,r24
 335:main.cpp      **** 
 336:main.cpp      ****     
 337:main.cpp      **** ///////////// BOUTONS DE DIRECTION ///////////////
 338:main.cpp      ****   
 339:main.cpp      ****     
 340:main.cpp      ****     
 341:main.cpp      **** 	while (compteur<3) 
 342:main.cpp      ****         {
 343:main.cpp      **** 			if (!(PINB & 0x01)) { 	//bouton droit
 344:main.cpp      **** 				_delay_ms(10);
 345:main.cpp      **** 				if(!(PINB & 0x01)){
 346:main.cpp      **** 					enfonceDroit = true;
 347:main.cpp      ****                                         PORTA = 0b1000;
 348:main.cpp      **** 					_delay_ms(10);
 349:main.cpp      **** 				}
 350:main.cpp      **** 			}
 351:main.cpp      **** 			else if (!(PINB & 0x02)) 
 352:main.cpp      ****                         { 		//bouton gauche
 353:main.cpp      **** 				_delay_ms(10);
 354:main.cpp      **** 				if(!(PINB & 0x02))
 355:main.cpp      ****                                 {
 356:main.cpp      **** 					enfonceGauche = true;
 357:main.cpp      ****                                          PORTA = 0b0100;
 358:main.cpp      **** 					_delay_ms(10);
 359:main.cpp      **** 				}
 360:main.cpp      **** 			}
 361:main.cpp      **** 			else if(enfonceDroit)
 362:main.cpp      ****                         {
 363:main.cpp      ****                             enfonceDroit = false;
 364:main.cpp      ****                             PORTA = 0x00;
 365:main.cpp      ****                             directions[compteur] = 'g';
 366:main.cpp      ****                             compteur++;
 367:main.cpp      ****                         }
 368:main.cpp      **** 			else if(enfonceGauche)
 369:main.cpp      ****                         {
 370:main.cpp      ****                             enfonceGauche = false;
 371:main.cpp      ****                             PORTA = 0x00;
 372:main.cpp      ****                             directions[compteur] = 'd';
 976               		.stabn	68,0,372,.LM122-.LFBB10
 977               	.LM122:
 978 000e 24E6      		ldi r18,lo8(100)
 365:main.cpp      ****                             compteur++;
 979               		.stabn	68,0,365,.LM123-.LFBB10
 980               	.LM123:
GAS LISTING /tmp/ccmZqj4k.s 			page 28


 981 0010 37E6      		ldi r19,lo8(103)
 356:main.cpp      ****                                          PORTA = 0b0100;
 982               		.stabn	68,0,356,.LM124-.LFBB10
 983               	.LM124:
 984 0012 91E0      		ldi r25,lo8(1)
 357:main.cpp      **** 					_delay_ms(10);
 985               		.stabn	68,0,357,.LM125-.LFBB10
 986               	.LM125:
 987 0014 44E0      		ldi r20,lo8(4)
 347:main.cpp      **** 					_delay_ms(10);
 988               		.stabn	68,0,347,.LM126-.LFBB10
 989               	.LM126:
 990 0016 58E0      		ldi r21,lo8(8)
 991               	.L100:
 341:main.cpp      ****         {
 992               		.stabn	68,0,341,.LM127-.LFBB10
 993               	.LM127:
 994 0018 8091 0000 		lds r24,compteur
 995 001c 8330      		cpi r24,lo8(3)
 996 001e 00F0      		brlo .+2
 997 0020 00C0      		rjmp .L114
 343:main.cpp      **** 				_delay_ms(10);
 998               		.stabn	68,0,343,.LM128-.LFBB10
 999               	.LM128:
 1000 0022 1899      		sbic 0x3,0
 1001 0024 00C0      		rjmp .L101
 1002               	.LBB39:
 1003               	.LBB40:
 1004               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext9
 1005               	.Ltext9:
 1006               		.stabn	68,0,164,.LM129-.LFBB10
 1007               	.LM129:
 1008 0026 EFE1      		ldi r30,lo8(19999)
 1009 0028 FEE4      		ldi r31,hi8(19999)
 1010 002a 3197      		1: sbiw r30,1
 1011 002c 01F4      		brne 1b
 1012 002e 00C0      		rjmp .
 1013 0030 0000      		nop
 1014               	.LBE40:
 1015               	.LBE39:
 1016               		.stabs	"main.cpp",132,0,0,.Ltext10
 1017               	.Ltext10:
 345:main.cpp      **** 					enfonceDroit = true;
 1018               		.stabn	68,0,345,.LM130-.LFBB10
 1019               	.LM130:
 1020 0032 1899      		sbic 0x3,0
 1021 0034 00C0      		rjmp .L100
 346:main.cpp      ****                                         PORTA = 0b1000;
 1022               		.stabn	68,0,346,.LM131-.LFBB10
 1023               	.LM131:
 1024 0036 9093 0000 		sts enfonceDroit,r25
 347:main.cpp      **** 					_delay_ms(10);
 1025               		.stabn	68,0,347,.LM132-.LFBB10
 1026               	.LM132:
 1027 003a 52B9      		out 0x2,r21
 1028 003c 00C0      		rjmp .L112
 1029               	.L101:
GAS LISTING /tmp/ccmZqj4k.s 			page 29


 351:main.cpp      ****                         { 		//bouton gauche
 1030               		.stabn	68,0,351,.LM133-.LFBB10
 1031               	.LM133:
 1032 003e 1999      		sbic 0x3,1
 1033 0040 00C0      		rjmp .L104
 1034               	.LBB41:
 1035               	.LBB42:
 1036               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext11
 1037               	.Ltext11:
 1038               		.stabn	68,0,164,.LM134-.LFBB10
 1039               	.LM134:
 1040 0042 EFE1      		ldi r30,lo8(19999)
 1041 0044 FEE4      		ldi r31,hi8(19999)
 1042 0046 3197      		1: sbiw r30,1
 1043 0048 01F4      		brne 1b
 1044 004a 00C0      		rjmp .
 1045 004c 0000      		nop
 1046               	.LBE42:
 1047               	.LBE41:
 1048               		.stabs	"main.cpp",132,0,0,.Ltext12
 1049               	.Ltext12:
 354:main.cpp      ****                                 {
 1050               		.stabn	68,0,354,.LM135-.LFBB10
 1051               	.LM135:
 1052 004e 1999      		sbic 0x3,1
 1053 0050 00C0      		rjmp .L100
 356:main.cpp      ****                                          PORTA = 0b0100;
 1054               		.stabn	68,0,356,.LM136-.LFBB10
 1055               	.LM136:
 1056 0052 9093 0000 		sts enfonceGauche,r25
 357:main.cpp      **** 					_delay_ms(10);
 1057               		.stabn	68,0,357,.LM137-.LFBB10
 1058               	.LM137:
 1059 0056 42B9      		out 0x2,r20
 1060               	.L112:
 1061               	.LBB43:
 1062               	.LBB44:
 1063               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext13
 1064               	.Ltext13:
 1065               		.stabn	68,0,164,.LM138-.LFBB10
 1066               	.LM138:
 1067 0058 EFE1      		ldi r30,lo8(19999)
 1068 005a FEE4      		ldi r31,hi8(19999)
 1069 005c 3197      		1: sbiw r30,1
 1070 005e 01F4      		brne 1b
 1071 0060 00C0      		rjmp .
 1072 0062 0000      		nop
 1073 0064 00C0      		rjmp .L100
 1074               	.L104:
 1075               	.LBE44:
 1076               	.LBE43:
 1077               		.stabs	"main.cpp",132,0,0,.Ltext14
 1078               	.Ltext14:
 361:main.cpp      ****                         {
 1079               		.stabn	68,0,361,.LM139-.LFBB10
 1080               	.LM139:
 1081 0066 8091 0000 		lds r24,enfonceDroit
GAS LISTING /tmp/ccmZqj4k.s 			page 30


 1082 006a 8823      		tst r24
 1083 006c 01F0      		breq .L106
 363:main.cpp      ****                             PORTA = 0x00;
 1084               		.stabn	68,0,363,.LM140-.LFBB10
 1085               	.LM140:
 1086 006e 1092 0000 		sts enfonceDroit,__zero_reg__
 364:main.cpp      ****                             directions[compteur] = 'g';
 1087               		.stabn	68,0,364,.LM141-.LFBB10
 1088               	.LM141:
 1089 0072 12B8      		out 0x2,__zero_reg__
 365:main.cpp      ****                             compteur++;
 1090               		.stabn	68,0,365,.LM142-.LFBB10
 1091               	.LM142:
 1092 0074 8091 0000 		lds r24,compteur
 1093 0078 E82F      		mov r30,r24
 1094 007a F0E0      		ldi r31,0
 1095 007c E050      		subi r30,lo8(-(directions))
 1096 007e F040      		sbci r31,hi8(-(directions))
 1097 0080 3083      		st Z,r19
 1098 0082 00C0      		rjmp .L113
 1099               	.L106:
 368:main.cpp      ****                         {
 1100               		.stabn	68,0,368,.LM143-.LFBB10
 1101               	.LM143:
 1102 0084 8091 0000 		lds r24,enfonceGauche
 1103 0088 8823      		tst r24
 1104 008a 01F0      		breq .L100
 370:main.cpp      ****                             PORTA = 0x00;
 1105               		.stabn	68,0,370,.LM144-.LFBB10
 1106               	.LM144:
 1107 008c 1092 0000 		sts enfonceGauche,__zero_reg__
 371:main.cpp      ****                             directions[compteur] = 'd';
 1108               		.stabn	68,0,371,.LM145-.LFBB10
 1109               	.LM145:
 1110 0090 12B8      		out 0x2,__zero_reg__
 1111               		.stabn	68,0,372,.LM146-.LFBB10
 1112               	.LM146:
 1113 0092 8091 0000 		lds r24,compteur
 1114 0096 E82F      		mov r30,r24
 1115 0098 F0E0      		ldi r31,0
 1116 009a E050      		subi r30,lo8(-(directions))
 1117 009c F040      		sbci r31,hi8(-(directions))
 1118 009e 2083      		st Z,r18
 1119               	.L113:
 373:main.cpp      ****                             compteur++;
 1120               		.stabn	68,0,373,.LM147-.LFBB10
 1121               	.LM147:
 1122 00a0 8F5F      		subi r24,lo8(-(1))
 1123 00a2 8093 0000 		sts compteur,r24
 1124 00a6 00C0      		rjmp .L100
 1125               	.L114:
 374:main.cpp      ****                         }
 375:main.cpp      **** 				
 376:main.cpp      ****         }
 377:main.cpp      **** 
 378:main.cpp      **** 	
 379:main.cpp      **** 		
GAS LISTING /tmp/ccmZqj4k.s 			page 31


 380:main.cpp      **** 	
 381:main.cpp      **** ////////////// FIN DE DETECTION DE BOUTONS /////////////////////
 382:main.cpp      ****  
 383:main.cpp      ****  
 384:main.cpp      ****  
 385:main.cpp      ****     compteur = 0;
 1126               		.stabn	68,0,385,.LM148-.LFBB10
 1127               	.LM148:
 1128 00a8 1092 0000 		sts compteur,__zero_reg__
 1129               	.L108:
 386:main.cpp      ****     while (true)
 387:main.cpp      ****     {
 388:main.cpp      ****         verifierLuminosite();
 1130               		.stabn	68,0,388,.LM149-.LFBB10
 1131               	.LM149:
 1132 00ac 0E94 0000 		call _Z18verifierLuminositev
 389:main.cpp      ****         lireDirection();
 1133               		.stabn	68,0,389,.LM150-.LFBB10
 1134               	.LM150:
 1135 00b0 0E94 0000 		call _Z13lireDirectionv
 390:main.cpp      ****         suivreLigne();
 1136               		.stabn	68,0,390,.LM151-.LFBB10
 1137               	.LM151:
 1138 00b4 0E94 0000 		call _Z11suivreLignev
 329:main.cpp      **** {
 1139               		.stabn	68,0,329,.LM152-.LFBB10
 1140               	.LM152:
 1141 00b8 00C0      		rjmp .L108
 1142               		.size	main, .-main
 1143               	.Lscope10:
 1144               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 1145               		.stabd	78,0,0
 1146               		.stabs	"_GLOBAL__sub_I_bit1:f(0,4)",36,0,393,_GLOBAL__sub_I_bit1
 1147               		.type	_GLOBAL__sub_I_bit1, @function
 1148               	_GLOBAL__sub_I_bit1:
 1149               		.stabd	46,0,0
 391:main.cpp      ****     }
 392:main.cpp      ****  
 393:main.cpp      **** }
 1150               		.stabn	68,0,393,.LM153-.LFBB11
 1151               	.LM153:
 1152               	.LFBB11:
 1153               	/* prologue: function */
 1154               	/* frame size = 0 */
 1155               	/* stack size = 0 */
 1156               	.L__stack_usage = 0
 1157               	.LBB47:
 1158               	.LBB48:
  18:main.cpp      **** Pwm moteur;
 1159               		.stabn	68,0,18,.LM154-.LFBB11
 1160               	.LM154:
 1161 00ba 80E0      		ldi r24,lo8(del)
 1162 00bc 90E0      		ldi r25,hi8(del)
 1163 00be 0E94 0000 		call _ZN3DelC1Ev
  19:main.cpp      **** can intensite;
 1164               		.stabn	68,0,19,.LM155-.LFBB11
 1165               	.LM155:
GAS LISTING /tmp/ccmZqj4k.s 			page 32


 1166 00c2 80E0      		ldi r24,lo8(moteur)
 1167 00c4 90E0      		ldi r25,hi8(moteur)
 1168 00c6 0E94 0000 		call _ZN3PwmC1Ev
  20:main.cpp      **** 
 1169               		.stabn	68,0,20,.LM156-.LFBB11
 1170               	.LM156:
 1171 00ca 80E0      		ldi r24,lo8(intensite)
 1172 00cc 90E0      		ldi r25,hi8(intensite)
 1173 00ce 0C94 0000 		jmp _ZN3canC1Ev
 1174               	.LBE48:
 1175               	.LBE47:
 1176               		.size	_GLOBAL__sub_I_bit1, .-_GLOBAL__sub_I_bit1
 1177               	.Lscope11:
 1178               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 1179               		.stabd	78,0,0
 1180               		.global __do_global_ctors
 1181               		.section .ctors,"a",@progbits
 1182               		.p2align	1
 1183 0000 0000      		.word	gs(_GLOBAL__sub_I_bit1)
 1184               		.section	.text.exit,"ax",@progbits
 1185               		.stabs	"_GLOBAL__sub_D_bit1:f(0,4)",36,0,393,_GLOBAL__sub_D_bit1
 1186               		.type	_GLOBAL__sub_D_bit1, @function
 1187               	_GLOBAL__sub_D_bit1:
 1188               		.stabd	46,0,0
 1189               		.stabn	68,0,393,.LM157-.LFBB12
 1190               	.LM157:
 1191               	.LFBB12:
 1192               	/* prologue: function */
 1193               	/* frame size = 0 */
 1194               	/* stack size = 0 */
 1195               	.L__stack_usage = 0
 1196               	.LBB53:
 1197               	.LBB54:
 1198               	.LBB55:
  20:main.cpp      **** 
 1199               		.stabn	68,0,20,.LM158-.LFBB12
 1200               	.LM158:
 1201 0000 80E0      		ldi r24,lo8(intensite)
 1202 0002 90E0      		ldi r25,hi8(intensite)
 1203 0004 0E94 0000 		call _ZN3canD1Ev
  19:main.cpp      **** can intensite;
 1204               		.stabn	68,0,19,.LM159-.LFBB12
 1205               	.LM159:
 1206 0008 80E0      		ldi r24,lo8(moteur)
 1207 000a 90E0      		ldi r25,hi8(moteur)
 1208 000c 0E94 0000 		call _ZN3PwmD1Ev
  18:main.cpp      **** Pwm moteur;
 1209               		.stabn	68,0,18,.LM160-.LFBB12
 1210               	.LM160:
 1211 0010 80E0      		ldi r24,lo8(del)
 1212 0012 90E0      		ldi r25,hi8(del)
 1213 0014 0C94 0000 		jmp _ZN3DelD1Ev
 1214               	.LBE55:
 1215               	.LBE54:
 1216               	.LBE53:
 1217               		.size	_GLOBAL__sub_D_bit1, .-_GLOBAL__sub_D_bit1
 1218               	.Lscope12:
GAS LISTING /tmp/ccmZqj4k.s 			page 33


 1219               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 1220               		.stabd	78,0,0
 1221               		.global __do_global_dtors
 1222               		.section .dtors,"a",@progbits
 1223               		.p2align	1
 1224 0000 0000      		.word	gs(_GLOBAL__sub_D_bit1)
 1225               	.global	intensite
 1226               		.section .bss
 1227               		.type	intensite, @object
 1228               		.size	intensite, 1
 1229               	intensite:
 1230 0000 00        		.zero	1
 1231               	.global	moteur
 1232               		.type	moteur, @object
 1233               		.size	moteur, 1
 1234               	moteur:
 1235 0001 00        		.zero	1
 1236               	.global	del
 1237               		.type	del, @object
 1238               		.size	del, 1
 1239               	del:
 1240 0002 00        		.zero	1
 1241               	.global	directions
 1242               		.type	directions, @object
 1243               		.size	directions, 3
 1244               	directions:
 1245 0003 0000 00   		.zero	3
 1246               	.global	rapport
 1247               		.type	rapport, @object
 1248               		.size	rapport, 1
 1249               	rapport:
 1250 0006 00        		.zero	1
 1251               	.global	petitSkip
 1252               		.type	petitSkip, @object
 1253               		.size	petitSkip, 1
 1254               	petitSkip:
 1255 0007 00        		.zero	1
 1256               	.global	compteur
 1257               		.type	compteur, @object
 1258               		.size	compteur, 1
 1259               	compteur:
 1260 0008 00        		.zero	1
 1261               	.global	enfonceDroit
 1262               		.type	enfonceDroit, @object
 1263               		.size	enfonceDroit, 1
 1264               	enfonceDroit:
 1265 0009 00        		.zero	1
 1266               	.global	enfonceGauche
 1267               		.type	enfonceGauche, @object
 1268               		.size	enfonceGauche, 1
 1269               	enfonceGauche:
 1270 000a 00        		.zero	1
 1271               	.global	bit5
 1272               		.type	bit5, @object
 1273               		.size	bit5, 1
 1274               	bit5:
 1275 000b 00        		.zero	1
GAS LISTING /tmp/ccmZqj4k.s 			page 34


 1276               	.global	bit4
 1277               		.type	bit4, @object
 1278               		.size	bit4, 1
 1279               	bit4:
 1280 000c 00        		.zero	1
 1281               	.global	bit3
 1282               		.type	bit3, @object
 1283               		.size	bit3, 1
 1284               	bit3:
 1285 000d 00        		.zero	1
 1286               	.global	bit2
 1287               		.type	bit2, @object
 1288               		.size	bit2, 1
 1289               	bit2:
 1290 000e 00        		.zero	1
 1291               	.global	bit1
 1292               		.type	bit1, @object
 1293               		.size	bit1, 1
 1294               	bit1:
 1295 000f 00        		.zero	1
 1296               		.stabs	"bit1:G(0,54)",32,0,15,0
 1297               		.stabs	"bit2:G(0,54)",32,0,15,0
 1298               		.stabs	"bit3:G(0,54)",32,0,15,0
 1299               		.stabs	"bit4:G(0,54)",32,0,15,0
 1300               		.stabs	"bit5:G(0,54)",32,0,15,0
 1301               		.stabs	"enfonceGauche:G(0,54)",32,0,15,0
 1302               		.stabs	"enfonceDroit:G(0,54)",32,0,15,0
 1303               		.stabs	"compteur:G(0,59)",32,0,16,0
 1304               		.stabs	"petitSkip:G(0,59)",32,0,16,0
 1305               		.stabs	"rapport:G(0,59)",32,0,16,0
 1306               		.stabs	"directions:G(0,128)=ar(0,129)=r(0,129);0;0177777;;0;2;(0,17)",32,0,17,0
 1307               		.stabs	"del:G(0,98)",32,0,18,0
 1308               		.stabs	"moteur:G(0,123)",32,0,19,0
 1309               		.stabs	"intensite:G(0,105)",32,0,20,0
 1310               		.text
 1311               		.stabs	"",100,0,0,.Letext0
 1312               	.Letext0:
 1313               		.ident	"GCC: (Fedora 4.9.3-1.fc23) 4.9.3"
 1314               	.global __do_clear_bss
GAS LISTING /tmp/ccmZqj4k.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccmZqj4k.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccmZqj4k.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccmZqj4k.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccmZqj4k.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccmZqj4k.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccmZqj4k.s:114    .text:0000000000000000 _Z22transmissionPcVersUartv
     /tmp/ccmZqj4k.s:152    .text:0000000000000012 _Z8faireSonj
     /tmp/ccmZqj4k.s:229    .text:000000000000007a _Z18initialisationUARTv
     /tmp/ccmZqj4k.s:266    .text:0000000000000098 _Z22transmissionUARTVersPch
     /tmp/ccmZqj4k.s:292    .text:00000000000000a6 _Z13lireDirectionv
     /tmp/ccmZqj4k.s:1294   .bss:000000000000000f bit1
     /tmp/ccmZqj4k.s:1289   .bss:000000000000000e bit2
     /tmp/ccmZqj4k.s:1284   .bss:000000000000000d bit3
     /tmp/ccmZqj4k.s:1279   .bss:000000000000000c bit4
     /tmp/ccmZqj4k.s:1274   .bss:000000000000000b bit5
     /tmp/ccmZqj4k.s:340    .text:00000000000000dc _Z17faireIntersectionv
     /tmp/ccmZqj4k.s:1259   .bss:0000000000000008 compteur
     /tmp/ccmZqj4k.s:1244   .bss:0000000000000003 directions
     /tmp/ccmZqj4k.s:1234   .bss:0000000000000001 moteur
     /tmp/ccmZqj4k.s:638    .text:0000000000000266 _Z25faireIntersectionTrianglev
     /tmp/ccmZqj4k.s:655    .text:0000000000000268 _Z11suivreLignev
     /tmp/ccmZqj4k.s:1239   .bss:0000000000000002 del
     /tmp/ccmZqj4k.s:910    .text:00000000000003ae _Z18verifierLuminositev
     /tmp/ccmZqj4k.s:1229   .bss:0000000000000000 intensite
     /tmp/ccmZqj4k.s:1249   .bss:0000000000000006 rapport
     /tmp/ccmZqj4k.s:952    .text.startup:0000000000000000 main
     /tmp/ccmZqj4k.s:1264   .bss:0000000000000009 enfonceDroit
     /tmp/ccmZqj4k.s:1269   .bss:000000000000000a enfonceGauche
     /tmp/ccmZqj4k.s:1148   .text.startup:00000000000000ba _GLOBAL__sub_I_bit1
     /tmp/ccmZqj4k.s:1187   .text.exit:0000000000000000 _GLOBAL__sub_D_bit1
     /tmp/ccmZqj4k.s:1254   .bss:0000000000000007 petitSkip

UNDEFINED SYMBOLS
__floatunsisf
__divsf3
__mulsf3
__fixunssfsi
pow
_ZN3Pwm10pivotDroitEj
_ZN3Pwm6AvanceEj
_ZN3Pwm11pivotGaucheEj
_ZN3Pwm14Tourner_DroiteEj
_ZN3Pwm14Tourner_GaucheEj
_ZN3Del12allumerRougeEh
_ZN3can7lectureEh
_ZN3DelC1Ev
_ZN3PwmC1Ev
_ZN3canC1Ev
__do_global_ctors
_ZN3canD1Ev
_ZN3PwmD1Ev
_ZN3DelD1Ev
__do_global_dtors
__do_clear_bss
