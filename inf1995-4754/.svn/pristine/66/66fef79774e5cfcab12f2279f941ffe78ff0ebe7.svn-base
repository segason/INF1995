GAS LISTING /tmp/ccmkVy1l.s 			page 1


   1               		.file	"can.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/olstob/Desktop/testzone/projet/",100,0,4,.Ltext0
   8               		.stabs	"can.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"short _Fract:t(0,23)=r(0,9);1;0;",128,0,0,0
  38               		.stabs	"long _Fract:t(0,24)=r(0,9);4;0;",128,0,0,0
  39               		.stabs	"long long _Fract:t(0,25)=r(0,9);8;0;",128,0,0,0
  40               		.stabs	"unsigned short _Fract:t(0,26)=r(0,9);1;0;",128,0,0,0
  41               		.stabs	"unsigned _Fract:t(0,27)=r(0,9);2;0;",128,0,0,0
  42               		.stabs	"unsigned long _Fract:t(0,28)=r(0,9);4;0;",128,0,0,0
  43               		.stabs	"unsigned long long _Fract:t(0,29)=r(0,9);8;0;",128,0,0,0
  44               		.stabs	"_Sat short _Fract:t(0,30)=r(0,9);1;0;",128,0,0,0
  45               		.stabs	"_Sat _Fract:t(0,31)=r(0,9);2;0;",128,0,0,0
  46               		.stabs	"_Sat long _Fract:t(0,32)=r(0,9);4;0;",128,0,0,0
  47               		.stabs	"_Sat long long _Fract:t(0,33)=r(0,9);8;0;",128,0,0,0
  48               		.stabs	"_Sat unsigned short _Fract:t(0,34)=r(0,9);1;0;",128,0,0,0
  49               		.stabs	"_Sat unsigned _Fract:t(0,35)=r(0,9);2;0;",128,0,0,0
  50               		.stabs	"_Sat unsigned long _Fract:t(0,36)=r(0,9);4;0;",128,0,0,0
  51               		.stabs	"_Sat unsigned long long _Fract:t(0,37)=r(0,9);8;0;",128,0,0,0
  52               		.stabs	"short _Accum:t(0,38)=r(0,9);2;0;",128,0,0,0
  53               		.stabs	"long _Accum:t(0,39)=r(0,9);8;0;",128,0,0,0
  54               		.stabs	"long long _Accum:t(0,40)=r(0,9);8;0;",128,0,0,0
  55               		.stabs	"unsigned short _Accum:t(0,41)=r(0,9);2;0;",128,0,0,0
  56               		.stabs	"unsigned _Accum:t(0,42)=r(0,9);4;0;",128,0,0,0
  57               		.stabs	"unsigned long _Accum:t(0,43)=r(0,9);8;0;",128,0,0,0
GAS LISTING /tmp/ccmkVy1l.s 			page 2


  58               		.stabs	"unsigned long long _Accum:t(0,44)=r(0,9);8;0;",128,0,0,0
  59               		.stabs	"_Sat short _Accum:t(0,45)=r(0,9);2;0;",128,0,0,0
  60               		.stabs	"_Sat _Accum:t(0,46)=r(0,9);4;0;",128,0,0,0
  61               		.stabs	"_Sat long _Accum:t(0,47)=r(0,9);8;0;",128,0,0,0
  62               		.stabs	"_Sat long long _Accum:t(0,48)=r(0,9);8;0;",128,0,0,0
  63               		.stabs	"_Sat unsigned short _Accum:t(0,49)=r(0,9);2;0;",128,0,0,0
  64               		.stabs	"_Sat unsigned _Accum:t(0,50)=r(0,9);4;0;",128,0,0,0
  65               		.stabs	"_Sat unsigned long _Accum:t(0,51)=r(0,9);8;0;",128,0,0,0
  66               		.stabs	"_Sat unsigned long long _Accum:t(0,52)=r(0,9);8;0;",128,0,0,0
  67               		.stabs	"void:t(0,4)",128,0,0,0
  68               		.stabs	"wchar_t:t(0,53)=r(0,53);-32768;32767;",128,0,0,0
  69               		.stabs	"bool:t(0,54)=@s8;-16;",128,0,0,0
  70               		.stabs	"__vtbl_ptr_type:t(0,55)=*(0,56)=f(0,9)",128,0,0,0
  71               		.stabs	"decltype(nullptr):t(0,57)=(0,57)",128,0,0,0
  72               		.stabs	"int8_t:t(0,58)=(0,16)",128,0,121,0
  73               		.stabs	"uint8_t:t(0,59)=(0,13)",128,0,122,0
  74               		.stabs	"int16_t:t(0,60)=(0,9)",128,0,123,0
  75               		.stabs	"uint16_t:t(0,61)=(0,12)",128,0,124,0
  76               		.stabs	"int32_t:t(0,62)=(0,15)",128,0,125,0
  77               		.stabs	"uint32_t:t(0,63)=(0,11)",128,0,126,0
  78               		.stabs	"int64_t:t(0,64)=(0,14)",128,0,128,0
  79               		.stabs	"uint64_t:t(0,65)=(0,10)",128,0,129,0
  80               		.stabs	"intptr_t:t(0,66)=(0,60)",128,0,142,0
  81               		.stabs	"uintptr_t:t(0,67)=(0,61)",128,0,147,0
  82               		.stabs	"int_least8_t:t(0,68)=(0,58)",128,0,159,0
  83               		.stabs	"uint_least8_t:t(0,69)=(0,59)",128,0,164,0
  84               		.stabs	"int_least16_t:t(0,70)=(0,60)",128,0,169,0
  85               		.stabs	"uint_least16_t:t(0,71)=(0,61)",128,0,174,0
  86               		.stabs	"int_least32_t:t(0,72)=(0,62)",128,0,179,0
  87               		.stabs	"uint_least32_t:t(0,73)=(0,63)",128,0,184,0
  88               		.stabs	"int_least64_t:t(0,74)=(0,64)",128,0,192,0
  89               		.stabs	"uint_least64_t:t(0,75)=(0,65)",128,0,199,0
  90               		.stabs	"int_fast8_t:t(0,76)=(0,58)",128,0,213,0
  91               		.stabs	"uint_fast8_t:t(0,77)=(0,59)",128,0,218,0
  92               		.stabs	"int_fast16_t:t(0,78)=(0,60)",128,0,223,0
  93               		.stabs	"uint_fast16_t:t(0,79)=(0,61)",128,0,228,0
  94               		.stabs	"int_fast32_t:t(0,80)=(0,62)",128,0,233,0
  95               		.stabs	"uint_fast32_t:t(0,81)=(0,63)",128,0,238,0
  96               		.stabs	"int_fast64_t:t(0,82)=(0,64)",128,0,246,0
  97               		.stabs	"uint_fast64_t:t(0,83)=(0,65)",128,0,253,0
  98               		.stabs	"intmax_t:t(0,84)=(0,64)",128,0,273,0
  99               		.stabs	"uintmax_t:t(0,85)=(0,65)",128,0,278,0
 100               		.stabs	"int_farptr_t:t(0,86)=(0,62)",128,0,77,0
 101               		.stabs	"uint_farptr_t:t(0,87)=(0,63)",128,0,81,0
 102               		.stabs	"._0:Tt(0,88)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
 103               		.stabs	"__fuse_t:t(0,88)",128,0,244,0
 104               		.stabs	"can:Tt(0,89)=s1__base_ctor ::(0,90)=#(0,89),(0,4),(0,91)=*(0,89),(0,4);:_ZN3canC2Ev;2A.;__
 105               		.stabs	"_ZN3canC2Ev:F(0,4)",36,0,16,_ZN3canC2Ev
 106               		.stabs	"this:P(0,93)=k(0,91)",64,0,16,24
 107               	.global	_ZN3canC2Ev
 108               		.type	_ZN3canC2Ev, @function
 109               	_ZN3canC2Ev:
 110               		.stabd	46,0,0
   1:can.cpp       **** /*
   2:can.cpp       ****  * Ecole Polytechnique de Montreal
   3:can.cpp       ****  * Departement de genie informatique
   4:can.cpp       ****  * Cours inf1995
GAS LISTING /tmp/ccmkVy1l.s 			page 3


   5:can.cpp       ****  *
   6:can.cpp       ****  * Matthew Khouzam et Jerome Collin
   7:can.cpp       ****  * 2005-2006
   8:can.cpp       ****  *
   9:can.cpp       ****  * Code qui n'est sous aucune license.
  10:can.cpp       ****  *
  11:can.cpp       ****  */
  12:can.cpp       **** 
  13:can.cpp       **** #include "can.h"
  14:can.cpp       **** 
  15:can.cpp       **** // constructeur: initialisation du convertisseur
  16:can.cpp       **** can::can()
 111               		.stabn	68,0,16,.LM0-.LFBB1
 112               	.LM0:
 113               	.LFBB1:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
 118               	.LBB2:
  17:can.cpp       **** {
  18:can.cpp       ****    // ADC mux : reference analogique externe
  19:can.cpp       ****    //           ajuste a droite
  20:can.cpp       ****    ADMUX  = ( 0 << REFS1 ) | ( 0 << REFS0 ) | ( 0 << ADLAR ) | ( 0 << MUX4 ) |
  21:can.cpp       ****             ( 0 << MUX3 ) | ( 0 << MUX2 ) | ( 0 << MUX1) | ( 0 << MUX0 ) ;
 119               		.stabn	68,0,21,.LM1-.LFBB1
 120               	.LM1:
 121 0000 1092 7C00 		sts 124,__zero_reg__
  22:can.cpp       **** 
  23:can.cpp       ****    // ADC Status and Control Register A : 
  24:can.cpp       ****    //  Active le convertisseur mais sans demarrer de conversion pour l'instant.
  25:can.cpp       ****    //  Pas de declanchement automatique et aucune interruption suivant
  26:can.cpp       ****    //  la fin d'une convertion. Division de l'horloge par 64 (il faudra
  27:can.cpp       ****    //  donc 13 cycles du convertisseur * 64 pour terminer une conversion
  28:can.cpp       ****    //  soit 832 cycles d'horloge soit 104 micro-secondes
  29:can.cpp       ****    ADCSRA = ( 1 << ADEN ) | ( 0 << ADSC )  | ( 0 << ADATE ) | ( 0 << ADIF ) |
  30:can.cpp       ****             ( 0 << ADIE ) | ( 1 << ADPS2 ) | ( 1 << ADPS1 ) | ( 0 << ADPS0 ) ;
 122               		.stabn	68,0,30,.LM2-.LFBB1
 123               	.LM2:
 124 0004 86E8      		ldi r24,lo8(-122)
 125 0006 8093 7A00 		sts 122,r24
 126 000a 0895      		ret
 127               	.LBE2:
 128               		.size	_ZN3canC2Ev, .-_ZN3canC2Ev
 129               	.Lscope1:
 130               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 131               		.stabd	78,0,0
 132               	.global	_ZN3canC1Ev
 133               		.set	_ZN3canC1Ev,_ZN3canC2Ev
 134               		.stabs	"_ZN3canD2Ev:F(0,4)",36,0,34,_ZN3canD2Ev
 135               		.stabs	"this:P(0,93)",64,0,34,24
 136               	.global	_ZN3canD2Ev
 137               		.type	_ZN3canD2Ev, @function
 138               	_ZN3canD2Ev:
 139               		.stabd	46,0,0
  31:can.cpp       **** }
  32:can.cpp       **** 
GAS LISTING /tmp/ccmkVy1l.s 			page 4


  33:can.cpp       **** // Destructeur:  Arreter le convertisseur pour sauver sur la consommation.
  34:can.cpp       **** can::~can()
 140               		.stabn	68,0,34,.LM3-.LFBB2
 141               	.LM3:
 142               	.LFBB2:
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 0 */
 146               	.L__stack_usage = 0
 147               	.LBB3:
  35:can.cpp       **** {
  36:can.cpp       ****    // rendre le convertisseur inactif.
  37:can.cpp       ****    ADCSRA = 0 << ADEN ;
 148               		.stabn	68,0,37,.LM4-.LFBB2
 149               	.LM4:
 150 000c 1092 7A00 		sts 122,__zero_reg__
 151 0010 0895      		ret
 152               	.LBE3:
 153               		.size	_ZN3canD2Ev, .-_ZN3canD2Ev
 154               	.Lscope2:
 155               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 156               		.stabd	78,0,0
 157               	.global	_ZN3canD1Ev
 158               		.set	_ZN3canD1Ev,_ZN3canD2Ev
 159               		.stabs	"_ZN3can7lectureEh:F(0,61)",36,0,43,_ZN3can7lectureEh
 160               		.stabs	"this:P(0,93)",64,0,43,24
 161               		.stabs	"pos:P(0,59)",64,0,43,22
 162               	.global	_ZN3can7lectureEh
 163               		.type	_ZN3can7lectureEh, @function
 164               	_ZN3can7lectureEh:
 165               		.stabd	46,0,0
  38:can.cpp       **** }
  39:can.cpp       **** 
  40:can.cpp       **** // Faire une conversion et aller retourner le resultat sur 16 bits
  41:can.cpp       **** // dont seulement les 10 de poids faibles sont significatifs.
  42:can.cpp       **** uint16_t
  43:can.cpp       **** can::lecture( uint8_t pos)
  44:can.cpp       **** {
 166               		.stabn	68,0,44,.LM5-.LFBB3
 167               	.LM5:
 168               	.LFBB3:
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
 173               	.LBB4:
  45:can.cpp       ****    uint16_t adcVal;
  46:can.cpp       **** 
  47:can.cpp       ****    // Garder les bits de ADMUX intacts, sauf les bit permettant 
  48:can.cpp       ****    // la selection de l'entree
  49:can.cpp       ****    ADMUX  &=  ~(( 1 << MUX4 ) | ( 1 << MUX3 ) | 
  50:can.cpp       ****                 ( 1 << MUX2 ) | ( 1 << MUX1)  | ( 1 << MUX0 ));
 174               		.stabn	68,0,50,.LM6-.LFBB3
 175               	.LM6:
 176 0012 8091 7C00 		lds r24,124
 177 0016 807E      		andi r24,lo8(-32)
 178 0018 8093 7C00 		sts 124,r24
GAS LISTING /tmp/ccmkVy1l.s 			page 5


  51:can.cpp       **** 
  52:can.cpp       ****    // selectionner l'entree voulue
  53:can.cpp       ****    ADMUX |= ((pos & 0x07) << MUX0) ;
 179               		.stabn	68,0,53,.LM7-.LFBB3
 180               	.LM7:
 181 001c 8091 7C00 		lds r24,124
 182 0020 6770      		andi r22,lo8(7)
 183 0022 682B      		or r22,r24
 184 0024 6093 7C00 		sts 124,r22
  54:can.cpp       **** 
  55:can.cpp       ****    // demarrer la conversion
  56:can.cpp       ****    ADCSRA |= ( 1 << ADSC );
 185               		.stabn	68,0,56,.LM8-.LFBB3
 186               	.LM8:
 187 0028 8091 7A00 		lds r24,122
 188 002c 8064      		ori r24,lo8(64)
 189 002e 8093 7A00 		sts 122,r24
 190               	.L4:
  57:can.cpp       **** 
  58:can.cpp       ****    // Attendre la fin de la conversion soit 13 cycles du convertisseur.
  59:can.cpp       ****    while( ! (ADCSRA & ( 1 << ADIF ) ) );
 191               		.stabn	68,0,59,.LM9-.LFBB3
 192               	.LM9:
 193 0032 8091 7A00 		lds r24,122
 194 0036 84FF      		sbrs r24,4
 195 0038 00C0      		rjmp .L4
  60:can.cpp       **** 
  61:can.cpp       ****    // important: remettre le bit d'indication de fin de cycle a zero 
  62:can.cpp       ****    // pour la prochaine conversion ce qui se fait en l'ajustant a un.
  63:can.cpp       ****    ADCSRA |= (1 << ADIF);
 196               		.stabn	68,0,63,.LM10-.LFBB3
 197               	.LM10:
 198 003a 8091 7A00 		lds r24,122
 199 003e 8061      		ori r24,lo8(16)
 200 0040 8093 7A00 		sts 122,r24
  64:can.cpp       **** 
  65:can.cpp       ****    // Aller chercher le resultat sur 16 bits.
  66:can.cpp       ****    adcVal =   ADCL ;
 201               		.stabn	68,0,66,.LM11-.LFBB3
 202               	.LM11:
 203 0044 2091 7800 		lds r18,120
  67:can.cpp       ****    adcVal +=  ADCH << 8;
 204               		.stabn	68,0,67,.LM12-.LFBB3
 205               	.LM12:
 206 0048 8091 7900 		lds r24,121
 207 004c 90E0      		ldi r25,0
 208 004e 982F      		mov r25,r24
 209 0050 8827      		clr r24
 210               	.LBE4:
  68:can.cpp       **** 
  69:can.cpp       ****    // resultat sur 16 bits
  70:can.cpp       ****    return adcVal;
  71:can.cpp       **** }
 211               		.stabn	68,0,71,.LM13-.LFBB3
 212               	.LM13:
 213 0052 820F      		add r24,r18
 214 0054 911D      		adc r25,__zero_reg__
GAS LISTING /tmp/ccmkVy1l.s 			page 6


 215 0056 0895      		ret
 216               		.size	_ZN3can7lectureEh, .-_ZN3can7lectureEh
 217               	.Lscope3:
 218               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 219               		.stabd	78,0,0
 220               		.stabs	"",100,0,0,.Letext0
 221               	.Letext0:
 222               		.ident	"GCC: (Fedora 4.9.3-1.fc23) 4.9.3"
GAS LISTING /tmp/ccmkVy1l.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 can.cpp
     /tmp/ccmkVy1l.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccmkVy1l.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccmkVy1l.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccmkVy1l.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccmkVy1l.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccmkVy1l.s:109    .text:0000000000000000 _ZN3canC2Ev
     /tmp/ccmkVy1l.s:109    .text:0000000000000000 _ZN3canC1Ev
     /tmp/ccmkVy1l.s:138    .text:000000000000000c _ZN3canD2Ev
     /tmp/ccmkVy1l.s:138    .text:000000000000000c _ZN3canD1Ev
     /tmp/ccmkVy1l.s:164    .text:0000000000000012 _ZN3can7lectureEh

NO UNDEFINED SYMBOLS
