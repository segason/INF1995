GAS LISTING /tmp/ccWbmsjt.s 			page 1


   1               		.file	"td4.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/usagers/olstob/inf1995-47/inf1995-47/tp/tp4/",100,0,4,.Ltext0
   8               		.stabs	"td4.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"short _Fract:t(0,23)=r(0,9);1;0;",128,0,0,0
  38               		.stabs	"long _Fract:t(0,24)=r(0,9);4;0;",128,0,0,0
  39               		.stabs	"long long _Fract:t(0,25)=r(0,9);8;0;",128,0,0,0
  40               		.stabs	"unsigned short _Fract:t(0,26)=r(0,9);1;0;",128,0,0,0
  41               		.stabs	"unsigned _Fract:t(0,27)=r(0,9);2;0;",128,0,0,0
  42               		.stabs	"unsigned long _Fract:t(0,28)=r(0,9);4;0;",128,0,0,0
  43               		.stabs	"unsigned long long _Fract:t(0,29)=r(0,9);8;0;",128,0,0,0
  44               		.stabs	"_Sat short _Fract:t(0,30)=r(0,9);1;0;",128,0,0,0
  45               		.stabs	"_Sat _Fract:t(0,31)=r(0,9);2;0;",128,0,0,0
  46               		.stabs	"_Sat long _Fract:t(0,32)=r(0,9);4;0;",128,0,0,0
  47               		.stabs	"_Sat long long _Fract:t(0,33)=r(0,9);8;0;",128,0,0,0
  48               		.stabs	"_Sat unsigned short _Fract:t(0,34)=r(0,9);1;0;",128,0,0,0
  49               		.stabs	"_Sat unsigned _Fract:t(0,35)=r(0,9);2;0;",128,0,0,0
  50               		.stabs	"_Sat unsigned long _Fract:t(0,36)=r(0,9);4;0;",128,0,0,0
  51               		.stabs	"_Sat unsigned long long _Fract:t(0,37)=r(0,9);8;0;",128,0,0,0
  52               		.stabs	"short _Accum:t(0,38)=r(0,9);2;0;",128,0,0,0
  53               		.stabs	"long _Accum:t(0,39)=r(0,9);8;0;",128,0,0,0
  54               		.stabs	"long long _Accum:t(0,40)=r(0,9);8;0;",128,0,0,0
  55               		.stabs	"unsigned short _Accum:t(0,41)=r(0,9);2;0;",128,0,0,0
  56               		.stabs	"unsigned _Accum:t(0,42)=r(0,9);4;0;",128,0,0,0
  57               		.stabs	"unsigned long _Accum:t(0,43)=r(0,9);8;0;",128,0,0,0
GAS LISTING /tmp/ccWbmsjt.s 			page 2


  58               		.stabs	"unsigned long long _Accum:t(0,44)=r(0,9);8;0;",128,0,0,0
  59               		.stabs	"_Sat short _Accum:t(0,45)=r(0,9);2;0;",128,0,0,0
  60               		.stabs	"_Sat _Accum:t(0,46)=r(0,9);4;0;",128,0,0,0
  61               		.stabs	"_Sat long _Accum:t(0,47)=r(0,9);8;0;",128,0,0,0
  62               		.stabs	"_Sat long long _Accum:t(0,48)=r(0,9);8;0;",128,0,0,0
  63               		.stabs	"_Sat unsigned short _Accum:t(0,49)=r(0,9);2;0;",128,0,0,0
  64               		.stabs	"_Sat unsigned _Accum:t(0,50)=r(0,9);4;0;",128,0,0,0
  65               		.stabs	"_Sat unsigned long _Accum:t(0,51)=r(0,9);8;0;",128,0,0,0
  66               		.stabs	"_Sat unsigned long long _Accum:t(0,52)=r(0,9);8;0;",128,0,0,0
  67               		.stabs	"void:t(0,4)",128,0,0,0
  68               		.stabs	"wchar_t:t(0,53)=r(0,53);-32768;32767;",128,0,0,0
  69               		.stabs	"bool:t(0,54)=@s8;-16;",128,0,0,0
  70               		.stabs	"__vtbl_ptr_type:t(0,55)=*(0,56)=f(0,9)",128,0,0,0
  71               		.stabs	"decltype(nullptr):t(0,57)=(0,57)",128,0,0,0
  72               		.stabs	"int8_t:t(0,58)=(0,16)",128,0,121,0
  73               		.stabs	"uint8_t:t(0,59)=(0,13)",128,0,122,0
  74               		.stabs	"int16_t:t(0,60)=(0,9)",128,0,123,0
  75               		.stabs	"uint16_t:t(0,61)=(0,12)",128,0,124,0
  76               		.stabs	"int32_t:t(0,62)=(0,15)",128,0,125,0
  77               		.stabs	"uint32_t:t(0,63)=(0,11)",128,0,126,0
  78               		.stabs	"int64_t:t(0,64)=(0,14)",128,0,128,0
  79               		.stabs	"uint64_t:t(0,65)=(0,10)",128,0,129,0
  80               		.stabs	"intptr_t:t(0,66)=(0,60)",128,0,142,0
  81               		.stabs	"uintptr_t:t(0,67)=(0,61)",128,0,147,0
  82               		.stabs	"int_least8_t:t(0,68)=(0,58)",128,0,159,0
  83               		.stabs	"uint_least8_t:t(0,69)=(0,59)",128,0,164,0
  84               		.stabs	"int_least16_t:t(0,70)=(0,60)",128,0,169,0
  85               		.stabs	"uint_least16_t:t(0,71)=(0,61)",128,0,174,0
  86               		.stabs	"int_least32_t:t(0,72)=(0,62)",128,0,179,0
  87               		.stabs	"uint_least32_t:t(0,73)=(0,63)",128,0,184,0
  88               		.stabs	"int_least64_t:t(0,74)=(0,64)",128,0,192,0
  89               		.stabs	"uint_least64_t:t(0,75)=(0,65)",128,0,199,0
  90               		.stabs	"int_fast8_t:t(0,76)=(0,58)",128,0,213,0
  91               		.stabs	"uint_fast8_t:t(0,77)=(0,59)",128,0,218,0
  92               		.stabs	"int_fast16_t:t(0,78)=(0,60)",128,0,223,0
  93               		.stabs	"uint_fast16_t:t(0,79)=(0,61)",128,0,228,0
  94               		.stabs	"int_fast32_t:t(0,80)=(0,62)",128,0,233,0
  95               		.stabs	"uint_fast32_t:t(0,81)=(0,63)",128,0,238,0
  96               		.stabs	"int_fast64_t:t(0,82)=(0,64)",128,0,246,0
  97               		.stabs	"uint_fast64_t:t(0,83)=(0,65)",128,0,253,0
  98               		.stabs	"intmax_t:t(0,84)=(0,64)",128,0,273,0
  99               		.stabs	"uintmax_t:t(0,85)=(0,65)",128,0,278,0
 100               		.stabs	"int_farptr_t:t(0,86)=(0,62)",128,0,77,0
 101               		.stabs	"uint_farptr_t:t(0,87)=(0,63)",128,0,81,0
 102               		.stabs	"._0:Tt(0,88)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
 103               		.stabs	"__fuse_t:t(0,88)",128,0,244,0
 104               		.section	.text.startup,"ax",@progbits
 105               		.stabs	"main:F(0,9)",36,0,6,main
 106               	.global	main
 107               		.type	main, @function
 108               	main:
 109               		.stabd	46,0,0
   1:td4.cpp       **** #define F_CPU 8000000
   2:td4.cpp       **** #include <avr/io.h> 
   3:td4.cpp       **** #include <util/delay.h>
   4:td4.cpp       **** 
   5:td4.cpp       **** 
GAS LISTING /tmp/ccWbmsjt.s 			page 3


   6:td4.cpp       **** int main()
   7:td4.cpp       **** {
 110               		.stabn	68,0,7,.LM0-.LFBB1
 111               	.LM0:
 112               	.LFBB1:
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
 117               	.LBB24:
   8:td4.cpp       **** 	DDRB = 0xff; // PORT B est en mode sortie
 118               		.stabn	68,0,8,.LM1-.LFBB1
 119               	.LM1:
 120 0000 8FEF      		ldi r24,lo8(-1)
 121 0002 84B9      		out 0x4,r24
 122               	.LBB25:
   9:td4.cpp       **** 
  10:td4.cpp       ****   for(;;)  // boucle sans fin
  11:td4.cpp       ****   {
  12:td4.cpp       **** 	PORTB = 0xFF;
 123               		.stabn	68,0,12,.LM2-.LFBB1
 124               	.LM2:
 125 0004 6FEF      		ldi r22,lo8(-1)
 126 0006 7FEF      		ldi r23,lo8(-1)
 127               	.LBB26:
 128               	.LBB27:
 129               	.LBB28:
 130               	.LBB29:
  13:td4.cpp       **** 	int brightness = 255;
  14:td4.cpp       **** 
  15:td4.cpp       **** 
  16:td4.cpp       **** 	while(brightness >= 0){
  17:td4.cpp       **** 	
  18:td4.cpp       **** 	for (int i = 0 ; i < 5; i++){
  19:td4.cpp       **** 		for (int j = 0 ; j < brightness ; j++){
  20:td4.cpp       **** 			PORTB = 0x01;
 131               		.stabn	68,0,20,.LM3-.LFBB1
 132               	.LM3:
 133 0008 E1E0      		ldi r30,lo8(1)
 134               	.LBE29:
 135               	.LBE28:
 136               	.LBE27:
 137               	.LBE26:
 138               	.LBB35:
 139               	.LBB36:
 140               	.LBB37:
 141               	.LBB38:
  21:td4.cpp       **** 			_delay_ms(1/10);
  22:td4.cpp       **** 		}
  23:td4.cpp       **** 		PORTB = 0xFF;
  24:td4.cpp       ****                 _delay_ms(1);
  25:td4.cpp       **** 	
  26:td4.cpp       **** 	}
  27:td4.cpp       **** 
  28:td4.cpp       **** 	brightness--;
  29:td4.cpp       ****       }
  30:td4.cpp       ****       
GAS LISTING /tmp/ccWbmsjt.s 			page 4


  31:td4.cpp       ****       brightness = 255;
  32:td4.cpp       ****       
  33:td4.cpp       ****       while(brightness >= 0){
  34:td4.cpp       **** 	
  35:td4.cpp       **** 	for (int i = 0 ; i < 5; i++){
  36:td4.cpp       **** 		for (int j = 0 ; j < brightness ; j++){
  37:td4.cpp       **** 			PORTB = 0x02;
 142               		.stabn	68,0,37,.LM4-.LFBB1
 143               	.LM4:
 144 000a F2E0      		ldi r31,lo8(2)
 145               	.L11:
 146               	.LBE38:
 147               	.LBE37:
 148               	.LBE36:
 149               	.LBE35:
  12:td4.cpp       **** 	int brightness = 255;
 150               		.stabn	68,0,12,.LM5-.LFBB1
 151               	.LM5:
 152 000c 75B9      		out 0x5,r23
  13:td4.cpp       **** 	int brightness = 255;
 153               		.stabn	68,0,13,.LM6-.LFBB1
 154               	.LM6:
 155 000e 8FEF      		ldi r24,lo8(-1)
 156 0010 90E0      		ldi r25,0
 157               	.L2:
 158               	.LBE25:
 159               	.LBE24:
   7:td4.cpp       **** 	DDRB = 0xff; // PORT B est en mode sortie
 160               		.stabn	68,0,7,.LM7-.LFBB1
 161               	.LM7:
 162 0012 25E0      		ldi r18,lo8(5)
 163 0014 30E0      		ldi r19,0
 164               	.L7:
 165 0016 40E0      		ldi r20,0
 166 0018 50E0      		ldi r21,0
 167               	.L5:
 168               	.LBB47:
 169               	.LBB46:
 170               	.LBB44:
 171               	.LBB34:
 172               	.LBB33:
 173               	.LBB30:
  19:td4.cpp       **** 			PORTB = 0x01;
 174               		.stabn	68,0,19,.LM8-.LFBB1
 175               	.LM8:
 176 001a 4817      		cp r20,r24
 177 001c 5907      		cpc r21,r25
 178 001e 04F4      		brge .L17
  20:td4.cpp       **** 			_delay_ms(1/10);
 179               		.stabn	68,0,20,.LM9-.LFBB1
 180               	.LM9:
 181 0020 E5B9      		out 0x5,r30
  19:td4.cpp       **** 			PORTB = 0x01;
 182               		.stabn	68,0,19,.LM10-.LFBB1
 183               	.LM10:
 184 0022 4F5F      		subi r20,-1
 185 0024 5F4F      		sbci r21,-1
GAS LISTING /tmp/ccWbmsjt.s 			page 5


 186 0026 00C0      		rjmp .L5
 187               	.L17:
 188               	.LBE30:
  23:td4.cpp       ****                 _delay_ms(1);
 189               		.stabn	68,0,23,.LM11-.LFBB1
 190               	.LM11:
 191 0028 65B9      		out 0x5,r22
 192               	.LBB31:
 193               	.LBB32:
 194               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext1
 195               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
GAS LISTING /tmp/ccWbmsjt.s 			page 6


  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
GAS LISTING /tmp/ccWbmsjt.s 			page 7


 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/avr/include/util/delay.h **** 
 156:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/avr/include/util/delay.h **** 
 159:/usr/avr/include/util/delay.h **** 	#else
 160:/usr/avr/include/util/delay.h **** 		//round up by default
GAS LISTING /tmp/ccWbmsjt.s 			page 8


 161:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/avr/include/util/delay.h **** 	#endif
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 196               		.stabn	68,0,164,.LM12-.LFBB1
 197               	.LM12:
 198 002a AFEC      		ldi r26,lo8(1999)
 199 002c B7E0      		ldi r27,hi8(1999)
 200 002e 1197      		1: sbiw r26,1
 201 0030 01F4      		brne 1b
 202 0032 00C0      		rjmp .
 203 0034 0000      		nop
 204 0036 2150      		subi r18,1
 205 0038 3109      		sbc r19,__zero_reg__
 206               	.LBE32:
 207               	.LBE31:
 208               	.LBE33:
 209               		.stabs	"td4.cpp",132,0,0,.Ltext2
 210               	.Ltext2:
  18:td4.cpp       **** 		for (int j = 0 ; j < brightness ; j++){
 211               		.stabn	68,0,18,.LM13-.LFBB1
 212               	.LM13:
 213 003a 01F4      		brne .L7
 214               	.LBE34:
  28:td4.cpp       ****       }
 215               		.stabn	68,0,28,.LM14-.LFBB1
 216               	.LM14:
 217               	.LBE44:
 218 003c 0197      		sbiw r24,1
 219 003e 00F4      		brcc .L2
 220 0040 8FEF      		ldi r24,lo8(-1)
 221 0042 90E0      		ldi r25,0
 222               	.L6:
  13:td4.cpp       **** 
 223               		.stabn	68,0,13,.LM15-.LFBB1
 224               	.LM15:
 225 0044 25E0      		ldi r18,lo8(5)
 226 0046 30E0      		ldi r19,0
 227               	.L12:
 228 0048 40E0      		ldi r20,0
 229 004a 50E0      		ldi r21,0
 230               	.L10:
 231               	.LBB45:
 232               	.LBB43:
 233               	.LBB42:
 234               	.LBB39:
  36:td4.cpp       **** 			PORTB = 0x02;
 235               		.stabn	68,0,36,.LM16-.LFBB1
 236               	.LM16:
 237 004c 4817      		cp r20,r24
 238 004e 5907      		cpc r21,r25
 239 0050 04F4      		brge .L18
 240               		.stabn	68,0,37,.LM17-.LFBB1
 241               	.LM17:
 242 0052 F5B9      		out 0x5,r31
  36:td4.cpp       **** 			PORTB = 0x02;
 243               		.stabn	68,0,36,.LM18-.LFBB1
GAS LISTING /tmp/ccWbmsjt.s 			page 9


 244               	.LM18:
 245 0054 4F5F      		subi r20,-1
 246 0056 5F4F      		sbci r21,-1
 247 0058 00C0      		rjmp .L10
 248               	.L18:
 249               	.LBE39:
  38:td4.cpp       **** 			_delay_ms(1/10);
  39:td4.cpp       **** 		}
  40:td4.cpp       **** 		PORTB = 0xFF;
 250               		.stabn	68,0,40,.LM19-.LFBB1
 251               	.LM19:
 252 005a 65B9      		out 0x5,r22
 253               	.LBB40:
 254               	.LBB41:
 255               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext3
 256               	.Ltext3:
 257               		.stabn	68,0,164,.LM20-.LFBB1
 258               	.LM20:
 259 005c AFEC      		ldi r26,lo8(1999)
 260 005e B7E0      		ldi r27,hi8(1999)
 261 0060 1197      		1: sbiw r26,1
 262 0062 01F4      		brne 1b
 263 0064 00C0      		rjmp .
 264 0066 0000      		nop
 265 0068 2150      		subi r18,1
 266 006a 3109      		sbc r19,__zero_reg__
 267               	.LBE41:
 268               	.LBE40:
 269               	.LBE42:
 270               		.stabs	"td4.cpp",132,0,0,.Ltext4
 271               	.Ltext4:
  35:td4.cpp       **** 		for (int j = 0 ; j < brightness ; j++){
 272               		.stabn	68,0,35,.LM21-.LFBB1
 273               	.LM21:
 274 006c 01F4      		brne .L12
 275               	.LBE43:
  41:td4.cpp       ****                 _delay_ms(1);
  42:td4.cpp       **** 	
  43:td4.cpp       **** 	}
  44:td4.cpp       **** 
  45:td4.cpp       **** 	brightness--;
 276               		.stabn	68,0,45,.LM22-.LFBB1
 277               	.LM22:
 278               	.LBE45:
 279 006e 0197      		sbiw r24,1
 280 0070 00F4      		brcc .L6
 281 0072 00C0      		rjmp .L11
 282               	.LBE46:
 283               	.LBE47:
 284               		.size	main, .-main
 285               		.stabs	"j:r(0,9)",64,0,19,20
 286               		.stabn	192,0,0,.LBB29-.LFBB1
 287               		.stabn	224,0,0,.LBE29-.LFBB1
 288               		.stabs	"j:r(0,9)",64,0,19,20
 289               		.stabn	192,0,0,.LBB30-.LFBB1
 290               		.stabn	224,0,0,.LBE30-.LFBB1
 291               		.stabs	"j:r(0,9)",64,0,36,20
GAS LISTING /tmp/ccWbmsjt.s 			page 10


 292               		.stabn	192,0,0,.LBB38-.LFBB1
 293               		.stabn	224,0,0,.LBE38-.LFBB1
 294               		.stabs	"j:r(0,9)",64,0,36,20
 295               		.stabn	192,0,0,.LBB39-.LFBB1
 296               		.stabn	224,0,0,.LBE39-.LFBB1
 297               	.Lscope1:
 298               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 299               		.stabd	78,0,0
 300               		.text
 301               		.stabs	"",100,0,0,.Letext0
 302               	.Letext0:
 303               		.ident	"GCC: (Fedora 4.9.2-1.fc22) 4.9.2"
GAS LISTING /tmp/ccWbmsjt.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 td4.cpp
     /tmp/ccWbmsjt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccWbmsjt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccWbmsjt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccWbmsjt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccWbmsjt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccWbmsjt.s:108    .text.startup:0000000000000000 main

NO UNDEFINED SYMBOLS
